
Compiler Haupttests STM32H743ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b48  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001de0  08001de0  00011de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001e68  08001e68  00011e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e6c  08001e6c  00011e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08001e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000003c  24000074  08001ee4  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000b0  08001ee4  000200b0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010468  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000024a1  00000000  00000000  0003050a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00002bf5  00000000  00000000  000329ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000660  00000000  00000000  000355a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a08  00000000  00000000  00035c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035496  00000000  00000000  00036608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000940d  00000000  00000000  0006ba9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e261  00000000  00000000  00074eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c310c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000160c  00000000  00000000  001c3160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001dc8 	.word	0x08001dc8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	08001dc8 	.word	0x08001dc8

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b5d0      	push	{r4, r6, r7, lr}
 80002da:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002dc:	224c      	movs	r2, #76	; 0x4c
 80002de:	2100      	movs	r1, #0
 80002e0:	a80b      	add	r0, sp, #44	; 0x2c
 80002e2:	f001 f8a3 	bl	800142c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	2220      	movs	r2, #32
 80002e8:	2100      	movs	r1, #0
 80002ea:	a802      	add	r0, sp, #8
 80002ec:	f001 f89e 	bl	800142c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80002f0:	2002      	movs	r0, #2
 80002f2:	f000 fb8b 	bl	8000a0c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80002f6:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <SystemClock_Config+0x9c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	9201      	str	r2, [sp, #4]
 80002fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80002fe:	4a1e      	ldr	r2, [pc, #120]	; (8000378 <SystemClock_Config+0xa0>)
 8000300:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000304:	4610      	mov	r0, r2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000306:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	6993      	ldr	r3, [r2, #24]
 8000312:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	6993      	ldr	r3, [r2, #24]
 800031e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000326:	6983      	ldr	r3, [r0, #24]
 8000328:	049b      	lsls	r3, r3, #18
 800032a:	d5fc      	bpl.n	8000326 <SystemClock_Config+0x4e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	2102      	movs	r1, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800032e:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000330:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000332:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000336:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033a:	e9cd 420e 	strd	r4, r2, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f000 fb8b 	bl	8000a58 <HAL_RCC_OscConfig>
 8000342:	b108      	cbz	r0, 8000348 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000344:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000346:	e7fe      	b.n	8000346 <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	263f      	movs	r6, #63	; 0x3f
 800034e:	2700      	movs	r7, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000350:	4621      	mov	r1, r4
 8000352:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000358:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800035c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000360:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000364:	f000 ff0e 	bl	8001184 <HAL_RCC_ClockConfig>
 8000368:	b108      	cbz	r0, 800036e <SystemClock_Config+0x96>
 800036a:	b672      	cpsid	i
  while (1)
 800036c:	e7fe      	b.n	800036c <SystemClock_Config+0x94>
}
 800036e:	b01e      	add	sp, #120	; 0x78
 8000370:	bdd0      	pop	{r4, r6, r7, pc}
 8000372:	bf00      	nop
 8000374:	58000400 	.word	0x58000400
 8000378:	58024800 	.word	0x58024800

0800037c <main>:
{
 800037c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 8000380:	2640      	movs	r6, #64	; 0x40
  HAL_Init();
 8000382:	f000 f969 	bl	8000658 <HAL_Init>
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 8000386:	2701      	movs	r7, #1
  SystemClock_Config();
 8000388:	f7ff ffa6 	bl	80002d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038e:	4b17      	ldr	r3, [pc, #92]	; (80003ec <main+0x70>)
  HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 8000390:	2140      	movs	r1, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	9206      	str	r2, [sp, #24]
  HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 8000394:	4816      	ldr	r0, [pc, #88]	; (80003f0 <main+0x74>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	e9cd 2202 	strd	r2, r2, [sp, #8]
 800039a:	e9cd 2204 	strd	r2, r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039e:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80003a2:	4605      	mov	r5, r0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a4:	f044 0404 	orr.w	r4, r4, #4
 80003a8:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 80003ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 80003b8:	f000 fb1a 	bl	80009f0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 80003bc:	2200      	movs	r2, #0
 80003be:	2300      	movs	r3, #0
  HAL_GPIO_Init(EXECUTE_PIN_GPIO_Port, &GPIO_InitStruct);
 80003c0:	a902      	add	r1, sp, #8
 80003c2:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 80003c4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80003c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(EXECUTE_PIN_GPIO_Port, &GPIO_InitStruct);
 80003cc:	f000 f9f2 	bl	80007b4 <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80003d0:	2140      	movs	r1, #64	; 0x40
 80003d2:	4628      	mov	r0, r5
 80003d4:	2464      	movs	r4, #100	; 0x64
 80003d6:	f000 fb0f 	bl	80009f8 <HAL_GPIO_TogglePin>
		Test_printf();
 80003da:	f000 f8e7 	bl	80005ac <Test_printf>
	for(int i = 0; i < 100; i++)
 80003de:	3c01      	subs	r4, #1
 80003e0:	d1fb      	bne.n	80003da <main+0x5e>
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80003e2:	2140      	movs	r1, #64	; 0x40
 80003e4:	4628      	mov	r0, r5
 80003e6:	f000 fb07 	bl	80009f8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80003ea:	e7f1      	b.n	80003d0 <main+0x54>
 80003ec:	58024400 	.word	0x58024400
 80003f0:	58020800 	.word	0x58020800

080003f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <HAL_MspInit+0x20>)
{
 80003f6:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80003fc:	f042 0202 	orr.w	r2, r2, #2
 8000400:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000408:	f003 0302 	and.w	r3, r3, #2
 800040c:	9301      	str	r3, [sp, #4]
 800040e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000410:	b002      	add	sp, #8
 8000412:	4770      	bx	lr
 8000414:	58024400 	.word	0x58024400

08000418 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000418:	e7fe      	b.n	8000418 <NMI_Handler>
 800041a:	bf00      	nop

0800041c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <HardFault_Handler>
 800041e:	bf00      	nop

08000420 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <MemManage_Handler>
 8000422:	bf00      	nop

08000424 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000424:	e7fe      	b.n	8000424 <BusFault_Handler>
 8000426:	bf00      	nop

08000428 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <UsageFault_Handler>
 800042a:	bf00      	nop

0800042c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop

08000430 <DebugMon_Handler>:
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop

08000434 <PendSV_Handler>:
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop

08000438 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000438:	f000 b93e 	b.w	80006b8 <HAL_IncTick>

0800043c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800043c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800043e:	1e16      	subs	r6, r2, #0
 8000440:	dd07      	ble.n	8000452 <_read+0x16>
 8000442:	460c      	mov	r4, r1
 8000444:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000446:	f3af 8000 	nop.w
 800044a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044e:	42a5      	cmp	r5, r4
 8000450:	d1f9      	bne.n	8000446 <_read+0xa>
	}

return len;
}
 8000452:	4630      	mov	r0, r6
 8000454:	bd70      	pop	{r4, r5, r6, pc}
 8000456:	bf00      	nop

08000458 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000458:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045a:	1e16      	subs	r6, r2, #0
 800045c:	dd07      	ble.n	800046e <_write+0x16>
 800045e:	460c      	mov	r4, r1
 8000460:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000462:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000466:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046a:	42ac      	cmp	r4, r5
 800046c:	d1f9      	bne.n	8000462 <_write+0xa>
	}
	return len;
}
 800046e:	4630      	mov	r0, r6
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	bf00      	nop

08000474 <_close>:

int _close(int file)
{
	return -1;
}
 8000474:	f04f 30ff 	mov.w	r0, #4294967295
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800047c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000480:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000482:	604b      	str	r3, [r1, #4]
}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000488:	2001      	movs	r0, #1
 800048a:	4770      	bx	lr

0800048c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800048c:	2000      	movs	r0, #0
 800048e:	4770      	bx	lr

08000490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000490:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000492:	4c0d      	ldr	r4, [pc, #52]	; (80004c8 <_sbrk+0x38>)
{
 8000494:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000496:	490d      	ldr	r1, [pc, #52]	; (80004cc <_sbrk+0x3c>)
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800049a:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800049c:	1a09      	subs	r1, r1, r0
  if (NULL == __sbrk_heap_end)
 800049e:	b12a      	cbz	r2, 80004ac <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004a0:	4413      	add	r3, r2
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d808      	bhi.n	80004b8 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80004a6:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 80004a8:	6023      	str	r3, [r4, #0]
}
 80004aa:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80004ac:	4809      	ldr	r0, [pc, #36]	; (80004d4 <_sbrk+0x44>)
 80004ae:	4602      	mov	r2, r0
 80004b0:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80004b2:	4413      	add	r3, r2
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d9f6      	bls.n	80004a6 <_sbrk+0x16>
    errno = ENOMEM;
 80004b8:	f000 ff8e 	bl	80013d8 <__errno>
 80004bc:	230c      	movs	r3, #12
    return (void *)-1;
 80004be:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80004c2:	6003      	str	r3, [r0, #0]
}
 80004c4:	4610      	mov	r0, r2
 80004c6:	bd10      	pop	{r4, pc}
 80004c8:	24000090 	.word	0x24000090
 80004cc:	24080000 	.word	0x24080000
 80004d0:	00000400 	.word	0x00000400
 80004d4:	240000b0 	.word	0x240000b0

080004d8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004d8:	4929      	ldr	r1, [pc, #164]	; (8000580 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80004da:	4a2a      	ldr	r2, [pc, #168]	; (8000584 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80004e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80004e4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80004ea:	6813      	ldr	r3, [r2, #0]
 80004ec:	f003 030f 	and.w	r3, r3, #15
 80004f0:	2b06      	cmp	r3, #6
 80004f2:	d805      	bhi.n	8000500 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80004f4:	6813      	ldr	r3, [r2, #0]
 80004f6:	f023 030f 	bic.w	r3, r3, #15
 80004fa:	f043 0307 	orr.w	r3, r3, #7
 80004fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000502:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8000506:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000508:	481e      	ldr	r0, [pc, #120]	; (8000584 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800050a:	f041 0101 	orr.w	r1, r1, #1
 800050e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000510:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000512:	6819      	ldr	r1, [r3, #0]
 8000514:	400a      	ands	r2, r1
 8000516:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000518:	6803      	ldr	r3, [r0, #0]
 800051a:	071b      	lsls	r3, r3, #28
 800051c:	d505      	bpl.n	800052a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800051e:	6803      	ldr	r3, [r0, #0]
 8000520:	f023 030f 	bic.w	r3, r3, #15
 8000524:	f043 0307 	orr.w	r3, r3, #7
 8000528:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <SystemInit+0xb0>)
 800052c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800052e:	4918      	ldr	r1, [pc, #96]	; (8000590 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8000530:	4c18      	ldr	r4, [pc, #96]	; (8000594 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8000532:	4819      	ldr	r0, [pc, #100]	; (8000598 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8000534:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000536:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000538:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800053a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800053c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800053e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000542:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000544:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000546:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000548:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800054a:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800054c:	4c13      	ldr	r4, [pc, #76]	; (800059c <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 800054e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000552:	4913      	ldr	r1, [pc, #76]	; (80005a0 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8000554:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000556:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000558:	6823      	ldr	r3, [r4, #0]
 800055a:	4019      	ands	r1, r3
 800055c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000560:	d202      	bcs.n	8000568 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000562:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <SystemInit+0xcc>)
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000568:	490f      	ldr	r1, [pc, #60]	; (80005a8 <SystemInit+0xd0>)
 800056a:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <SystemInit+0xa8>)
 8000570:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000574:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000576:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800057a:	609a      	str	r2, [r3, #8]
}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000ed00 	.word	0xe000ed00
 8000584:	52002000 	.word	0x52002000
 8000588:	58024400 	.word	0x58024400
 800058c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000590:	01010280 	.word	0x01010280
 8000594:	02020200 	.word	0x02020200
 8000598:	01ff0000 	.word	0x01ff0000
 800059c:	5c001000 	.word	0x5c001000
 80005a0:	ffff0000 	.word	0xffff0000
 80005a4:	51008108 	.word	0x51008108
 80005a8:	52004000 	.word	0x52004000

080005ac <Test_printf>:
	} while(switchCount > 0);
}

void Test_printf()
{
	printf("Hello STM32H743ZI\n");
 80005ac:	4801      	ldr	r0, [pc, #4]	; (80005b4 <Test_printf+0x8>)
 80005ae:	f000 bfb3 	b.w	8001518 <puts>
 80005b2:	bf00      	nop
 80005b4:	08001df0 	.word	0x08001df0

080005b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80005b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005bc:	f7ff ff8c 	bl	80004d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005c2:	490d      	ldr	r1, [pc, #52]	; (80005f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005d8:	4c0a      	ldr	r4, [pc, #40]	; (8000604 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005e6:	f000 fefd 	bl	80013e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ea:	f7ff fec7 	bl	800037c <main>
  bx  lr
 80005ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80005f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80005f8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80005fc:	08001e70 	.word	0x08001e70
  ldr r2, =_sbss
 8000600:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000604:	240000b0 	.word	0x240000b0

08000608 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC3_IRQHandler>
	...

0800060c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_InitTick+0x40>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b90b      	cbnz	r3, 8000616 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000612:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000614:	4770      	bx	lr
{
 8000616:	b510      	push	{r4, lr}
 8000618:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800061a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800061e:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <HAL_InitTick+0x44>)
 8000620:	fbb0 f3f3 	udiv	r3, r0, r3
 8000624:	6810      	ldr	r0, [r2, #0]
 8000626:	fbb0 f0f3 	udiv	r0, r0, r3
 800062a:	f000 f8ab 	bl	8000784 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	2c0f      	cmp	r4, #15
 8000630:	d800      	bhi.n	8000634 <HAL_InitTick+0x28>
 8000632:	b108      	cbz	r0, 8000638 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000634:	2001      	movs	r0, #1
}
 8000636:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	4621      	mov	r1, r4
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 f866 	bl	8000710 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <HAL_InitTick+0x48>)
 8000646:	2000      	movs	r0, #0
 8000648:	601c      	str	r4, [r3, #0]
}
 800064a:	bd10      	pop	{r4, pc}
 800064c:	24000008 	.word	0x24000008
 8000650:	24000000 	.word	0x24000000
 8000654:	2400000c 	.word	0x2400000c

08000658 <HAL_Init>:
{
 8000658:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065a:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800065c:	4c12      	ldr	r4, [pc, #72]	; (80006a8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065e:	f000 f843 	bl	80006e8 <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000662:	4d12      	ldr	r5, [pc, #72]	; (80006ac <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000664:	f000 fcee 	bl	8001044 <HAL_RCC_GetSysClockFreq>
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_Init+0x58>)
 800066a:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800066c:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800066e:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000670:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000672:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000676:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000678:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800067a:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800067c:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8000680:	4c0c      	ldr	r4, [pc, #48]	; (80006b4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000682:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000686:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000688:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800068c:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800068e:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000690:	f7ff ffbc 	bl	800060c <HAL_InitTick>
 8000694:	b110      	cbz	r0, 800069c <HAL_Init+0x44>
    return HAL_ERROR;
 8000696:	2401      	movs	r4, #1
}
 8000698:	4620      	mov	r0, r4
 800069a:	bd38      	pop	{r3, r4, r5, pc}
 800069c:	4604      	mov	r4, r0
  HAL_MspInit();
 800069e:	f7ff fea9 	bl	80003f4 <HAL_MspInit>
}
 80006a2:	4620      	mov	r0, r4
 80006a4:	bd38      	pop	{r3, r4, r5, pc}
 80006a6:	bf00      	nop
 80006a8:	08001de0 	.word	0x08001de0
 80006ac:	24000004 	.word	0x24000004
 80006b0:	58024400 	.word	0x58024400
 80006b4:	24000000 	.word	0x24000000

080006b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <HAL_IncTick+0x10>)
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <HAL_IncTick+0x14>)
 80006bc:	6811      	ldr	r1, [r2, #0]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	440b      	add	r3, r1
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	2400009c 	.word	0x2400009c
 80006cc:	24000008 	.word	0x24000008

080006d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006d0:	4b01      	ldr	r3, [pc, #4]	; (80006d8 <HAL_GetTick+0x8>)
 80006d2:	6818      	ldr	r0, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	2400009c 	.word	0x2400009c

080006dc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <HAL_GetREVID+0x8>)
 80006de:	6818      	ldr	r0, [r3, #0]
}
 80006e0:	0c00      	lsrs	r0, r0, #16
 80006e2:	4770      	bx	lr
 80006e4:	5c001000 	.word	0x5c001000

080006e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4907      	ldr	r1, [pc, #28]	; (8000708 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006ea:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ee:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f4:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80006fa:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000700:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000702:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000704:	60cb      	str	r3, [r1, #12]
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00
 800070c:	05fa0000 	.word	0x05fa0000

08000710 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <HAL_NVIC_SetPriority+0x68>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000718:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800071a:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	2d04      	cmp	r5, #4
 8000722:	bf28      	it	cs
 8000724:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000726:	2c06      	cmp	r4, #6
 8000728:	d919      	bls.n	800075e <HAL_NVIC_SetPriority+0x4e>
 800072a:	3b03      	subs	r3, #3
 800072c:	f04f 34ff 	mov.w	r4, #4294967295
 8000730:	409c      	lsls	r4, r3
 8000732:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000736:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800073a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	fa04 f405 	lsl.w	r4, r4, r5
 8000740:	ea21 0104 	bic.w	r1, r1, r4
 8000744:	fa01 f103 	lsl.w	r1, r1, r3
 8000748:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800074c:	db0a      	blt.n	8000764 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074e:	0109      	lsls	r1, r1, #4
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_NVIC_SetPriority+0x6c>)
 8000752:	b2c9      	uxtb	r1, r1
 8000754:	4403      	add	r3, r0
 8000756:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800075a:	bc30      	pop	{r4, r5}
 800075c:	4770      	bx	lr
 800075e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000760:	4613      	mov	r3, r2
 8000762:	e7e8      	b.n	8000736 <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	f000 000f 	and.w	r0, r0, #15
 8000768:	0109      	lsls	r1, r1, #4
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_NVIC_SetPriority+0x70>)
 800076c:	b2c9      	uxtb	r1, r1
 800076e:	4403      	add	r3, r0
 8000770:	7619      	strb	r1, [r3, #24]
 8000772:	bc30      	pop	{r4, r5}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ecfc 	.word	0xe000ecfc

08000784 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000784:	3801      	subs	r0, #1
 8000786:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800078a:	d20d      	bcs.n	80007a8 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000790:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000792:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	25f0      	movs	r5, #240	; 0xf0
 8000796:	4c06      	ldr	r4, [pc, #24]	; (80007b0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000798:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800079a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80007a4:	bc30      	pop	{r4, r5}
 80007a6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007a8:	2001      	movs	r0, #1
 80007aa:	4770      	bx	lr
 80007ac:	e000e010 	.word	0xe000e010
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80007b8:	680e      	ldr	r6, [r1, #0]
{
 80007ba:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80007bc:	2e00      	cmp	r6, #0
 80007be:	f000 80d3 	beq.w	8000968 <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 80007c2:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c4:	f8df a220 	ldr.w	sl, [pc, #544]	; 80009e8 <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80007c8:	f8df b220 	ldr.w	fp, [pc, #544]	; 80009ec <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80007cc:	46b1      	mov	r9, r6
 80007ce:	e020      	b.n	8000812 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 80007d0:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80007d2:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007d6:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80007da:	f04f 0e0f 	mov.w	lr, #15
 80007de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80007e2:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80007e4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007e8:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 80007ec:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80007ee:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80007f2:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80007f6:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80007fa:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007fe:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8000800:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000802:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000804:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8000806:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8000808:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800080a:	fa39 f203 	lsrs.w	r2, r9, r3
 800080e:	f000 80ab 	beq.w	8000968 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000812:	2201      	movs	r2, #1
 8000814:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8000816:	ea12 0809 	ands.w	r8, r2, r9
 800081a:	d0f5      	beq.n	8000808 <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800081c:	684c      	ldr	r4, [r1, #4]
 800081e:	005f      	lsls	r7, r3, #1
 8000820:	f024 0c10 	bic.w	ip, r4, #16
 8000824:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000828:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800082a:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082e:	f200 809e 	bhi.w	800096e <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000832:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 8000836:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800083a:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800083c:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800083e:	ea2e 0e05 	bic.w	lr, lr, r5
 8000842:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000844:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000846:	68ce      	ldr	r6, [r1, #12]
 8000848:	40be      	lsls	r6, r7
 800084a:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800084e:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8000850:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000854:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000858:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800085c:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800085e:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000860:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000862:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000866:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000868:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800086c:	fa02 f207 	lsl.w	r2, r2, r7
 8000870:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8000874:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000876:	d0ab      	beq.n	80007d0 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 8000878:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800087a:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800087e:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000880:	fa02 f707 	lsl.w	r7, r2, r7
 8000884:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000886:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000888:	00e6      	lsls	r6, r4, #3
 800088a:	d5bd      	bpl.n	8000808 <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088c:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 8000890:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000894:	f003 0203 	and.w	r2, r3, #3
 8000898:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	f046 0602 	orr.w	r6, r6, #2
 800089e:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80008a2:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a4:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 80008a8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80008ac:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80008b0:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b4:	f006 0602 	and.w	r6, r6, #2
 80008b8:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008ba:	4e42      	ldr	r6, [pc, #264]	; (80009c4 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008bc:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008be:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80008c0:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80008c2:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008c6:	d020      	beq.n	800090a <HAL_GPIO_Init+0x156>
 80008c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008cc:	42b0      	cmp	r0, r6
 80008ce:	d056      	beq.n	800097e <HAL_GPIO_Init+0x1ca>
 80008d0:	4e3d      	ldr	r6, [pc, #244]	; (80009c8 <HAL_GPIO_Init+0x214>)
 80008d2:	42b0      	cmp	r0, r6
 80008d4:	d058      	beq.n	8000988 <HAL_GPIO_Init+0x1d4>
 80008d6:	4e3d      	ldr	r6, [pc, #244]	; (80009cc <HAL_GPIO_Init+0x218>)
 80008d8:	42b0      	cmp	r0, r6
 80008da:	d04b      	beq.n	8000974 <HAL_GPIO_Init+0x1c0>
 80008dc:	4e3c      	ldr	r6, [pc, #240]	; (80009d0 <HAL_GPIO_Init+0x21c>)
 80008de:	42b0      	cmp	r0, r6
 80008e0:	d05c      	beq.n	800099c <HAL_GPIO_Init+0x1e8>
 80008e2:	4e3c      	ldr	r6, [pc, #240]	; (80009d4 <HAL_GPIO_Init+0x220>)
 80008e4:	42b0      	cmp	r0, r6
 80008e6:	d05e      	beq.n	80009a6 <HAL_GPIO_Init+0x1f2>
 80008e8:	4e3b      	ldr	r6, [pc, #236]	; (80009d8 <HAL_GPIO_Init+0x224>)
 80008ea:	42b0      	cmp	r0, r6
 80008ec:	d051      	beq.n	8000992 <HAL_GPIO_Init+0x1de>
 80008ee:	4e3b      	ldr	r6, [pc, #236]	; (80009dc <HAL_GPIO_Init+0x228>)
 80008f0:	42b0      	cmp	r0, r6
 80008f2:	d05d      	beq.n	80009b0 <HAL_GPIO_Init+0x1fc>
 80008f4:	4e3a      	ldr	r6, [pc, #232]	; (80009e0 <HAL_GPIO_Init+0x22c>)
 80008f6:	42b0      	cmp	r0, r6
 80008f8:	d05f      	beq.n	80009ba <HAL_GPIO_Init+0x206>
 80008fa:	4e3a      	ldr	r6, [pc, #232]	; (80009e4 <HAL_GPIO_Init+0x230>)
 80008fc:	42b0      	cmp	r0, r6
 80008fe:	bf0c      	ite	eq
 8000900:	2609      	moveq	r6, #9
 8000902:	260a      	movne	r6, #10
 8000904:	fa06 f202 	lsl.w	r2, r6, r2
 8000908:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 800090a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800090c:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8000910:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000914:	03e5      	lsls	r5, r4, #15
    position++;
 8000916:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 800091a:	bf54      	ite	pl
 800091c:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800091e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8000922:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000926:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8000928:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 800092c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8000930:	bf54      	ite	pl
 8000932:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000934:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000938:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 800093a:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 800093e:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8000940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8000944:	bf54      	ite	pl
 8000946:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000948:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800094c:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 800094e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8000952:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8000954:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8000956:	bf54      	ite	pl
 8000958:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800095a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800095e:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000960:	fa39 f203 	lsrs.w	r2, r9, r3
 8000964:	f47f af55 	bne.w	8000812 <HAL_GPIO_Init+0x5e>
  }
}
 8000968:	b005      	add	sp, #20
 800096a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800096e:	40bd      	lsls	r5, r7
 8000970:	43ed      	mvns	r5, r5
 8000972:	e775      	b.n	8000860 <HAL_GPIO_Init+0xac>
 8000974:	2603      	movs	r6, #3
 8000976:	fa06 f202 	lsl.w	r2, r6, r2
 800097a:	4315      	orrs	r5, r2
 800097c:	e7c5      	b.n	800090a <HAL_GPIO_Init+0x156>
 800097e:	2601      	movs	r6, #1
 8000980:	fa06 f202 	lsl.w	r2, r6, r2
 8000984:	4315      	orrs	r5, r2
 8000986:	e7c0      	b.n	800090a <HAL_GPIO_Init+0x156>
 8000988:	2602      	movs	r6, #2
 800098a:	fa06 f202 	lsl.w	r2, r6, r2
 800098e:	4315      	orrs	r5, r2
 8000990:	e7bb      	b.n	800090a <HAL_GPIO_Init+0x156>
 8000992:	2606      	movs	r6, #6
 8000994:	fa06 f202 	lsl.w	r2, r6, r2
 8000998:	4315      	orrs	r5, r2
 800099a:	e7b6      	b.n	800090a <HAL_GPIO_Init+0x156>
 800099c:	2604      	movs	r6, #4
 800099e:	fa06 f202 	lsl.w	r2, r6, r2
 80009a2:	4315      	orrs	r5, r2
 80009a4:	e7b1      	b.n	800090a <HAL_GPIO_Init+0x156>
 80009a6:	2605      	movs	r6, #5
 80009a8:	fa06 f202 	lsl.w	r2, r6, r2
 80009ac:	4315      	orrs	r5, r2
 80009ae:	e7ac      	b.n	800090a <HAL_GPIO_Init+0x156>
 80009b0:	2607      	movs	r6, #7
 80009b2:	fa06 f202 	lsl.w	r2, r6, r2
 80009b6:	4315      	orrs	r5, r2
 80009b8:	e7a7      	b.n	800090a <HAL_GPIO_Init+0x156>
 80009ba:	2608      	movs	r6, #8
 80009bc:	fa06 f202 	lsl.w	r2, r6, r2
 80009c0:	4315      	orrs	r5, r2
 80009c2:	e7a2      	b.n	800090a <HAL_GPIO_Init+0x156>
 80009c4:	58020000 	.word	0x58020000
 80009c8:	58020800 	.word	0x58020800
 80009cc:	58020c00 	.word	0x58020c00
 80009d0:	58021000 	.word	0x58021000
 80009d4:	58021400 	.word	0x58021400
 80009d8:	58021800 	.word	0x58021800
 80009dc:	58021c00 	.word	0x58021c00
 80009e0:	58022000 	.word	0x58022000
 80009e4:	58022400 	.word	0x58022400
 80009e8:	58024400 	.word	0x58024400
 80009ec:	58000080 	.word	0x58000080

080009f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009f0:	b902      	cbnz	r2, 80009f4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80009f2:	0409      	lsls	r1, r1, #16
 80009f4:	6181      	str	r1, [r0, #24]
  }
}
 80009f6:	4770      	bx	lr

080009f8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80009f8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80009fa:	ea01 0203 	and.w	r2, r1, r3
 80009fe:	ea21 0103 	bic.w	r1, r1, r3
 8000a02:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000a06:	6181      	str	r1, [r0, #24]
}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000a0c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_PWREx_ConfigSupply+0x48>)
 8000a10:	68da      	ldr	r2, [r3, #12]
 8000a12:	0752      	lsls	r2, r2, #29
 8000a14:	d406      	bmi.n	8000a24 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000a1c:	1a18      	subs	r0, r3, r0
 8000a1e:	bf18      	it	ne
 8000a20:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8000a22:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000a24:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000a26:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000a28:	f022 0207 	bic.w	r2, r2, #7
 8000a2c:	4310      	orrs	r0, r2
 8000a2e:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8000a30:	f7ff fe4e 	bl	80006d0 <HAL_GetTick>
 8000a34:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000a36:	e005      	b.n	8000a44 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000a38:	f7ff fe4a 	bl	80006d0 <HAL_GetTick>
 8000a3c:	1b00      	subs	r0, r0, r4
 8000a3e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000a42:	d804      	bhi.n	8000a4e <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000a44:	686b      	ldr	r3, [r5, #4]
 8000a46:	049b      	lsls	r3, r3, #18
 8000a48:	d5f6      	bpl.n	8000a38 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8000a4a:	2000      	movs	r0, #0
}
 8000a4c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8000a4e:	2001      	movs	r0, #1
}
 8000a50:	bd38      	pop	{r3, r4, r5, pc}
 8000a52:	bf00      	nop
 8000a54:	58024800 	.word	0x58024800

08000a58 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	f000 81f7 	beq.w	8000e4c <HAL_RCC_OscConfig+0x3f4>
{
 8000a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a60:	6803      	ldr	r3, [r0, #0]
 8000a62:	4604      	mov	r4, r0
 8000a64:	07d9      	lsls	r1, r3, #31
 8000a66:	d52e      	bpl.n	8000ac6 <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a68:	49b4      	ldr	r1, [pc, #720]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000a6a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000a6c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a6e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000a72:	2a10      	cmp	r2, #16
 8000a74:	f000 812c 	beq.w	8000cd0 <HAL_RCC_OscConfig+0x278>
 8000a78:	2a18      	cmp	r2, #24
 8000a7a:	f000 8124 	beq.w	8000cc6 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a7e:	6863      	ldr	r3, [r4, #4]
 8000a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a84:	f000 8167 	beq.w	8000d56 <HAL_RCC_OscConfig+0x2fe>
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f000 817f 	beq.w	8000d8c <HAL_RCC_OscConfig+0x334>
 8000a8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a92:	4baa      	ldr	r3, [pc, #680]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	f000 8278 	beq.w	8000f8a <HAL_RCC_OscConfig+0x532>
 8000a9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000aa6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000aa8:	f7ff fe12 	bl	80006d0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000aac:	4ea3      	ldr	r6, [pc, #652]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8000aae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ab0:	e005      	b.n	8000abe <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ab2:	f7ff fe0d 	bl	80006d0 <HAL_GetTick>
 8000ab6:	1b40      	subs	r0, r0, r5
 8000ab8:	2864      	cmp	r0, #100	; 0x64
 8000aba:	f200 8165 	bhi.w	8000d88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000abe:	6833      	ldr	r3, [r6, #0]
 8000ac0:	039f      	lsls	r7, r3, #14
 8000ac2:	d5f6      	bpl.n	8000ab2 <HAL_RCC_OscConfig+0x5a>
 8000ac4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ac6:	0799      	lsls	r1, r3, #30
 8000ac8:	d521      	bpl.n	8000b0e <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aca:	4a9c      	ldr	r2, [pc, #624]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000acc:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000ace:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000ad0:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8000ad4:	f040 80a8 	bne.w	8000c28 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ad8:	4b98      	ldr	r3, [pc, #608]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	075b      	lsls	r3, r3, #29
 8000ade:	d503      	bpl.n	8000ae8 <HAL_RCC_OscConfig+0x90>
 8000ae0:	68e3      	ldr	r3, [r4, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 80ed 	beq.w	8000cc2 <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ae8:	f7ff fdf8 	bl	80006dc <HAL_GetREVID>
 8000aec:	f241 0303 	movw	r3, #4099	; 0x1003
 8000af0:	4298      	cmp	r0, r3
 8000af2:	f200 8189 	bhi.w	8000e08 <HAL_RCC_OscConfig+0x3b0>
 8000af6:	6922      	ldr	r2, [r4, #16]
 8000af8:	2a40      	cmp	r2, #64	; 0x40
 8000afa:	f000 824e 	beq.w	8000f9a <HAL_RCC_OscConfig+0x542>
 8000afe:	498f      	ldr	r1, [pc, #572]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b00:	684b      	ldr	r3, [r1, #4]
 8000b02:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000b06:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8000b0a:	604b      	str	r3, [r1, #4]
 8000b0c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000b0e:	06d9      	lsls	r1, r3, #27
 8000b10:	d456      	bmi.n	8000bc0 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b12:	071d      	lsls	r5, r3, #28
 8000b14:	d517      	bpl.n	8000b46 <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b16:	6963      	ldr	r3, [r4, #20]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f000 80b4 	beq.w	8000c86 <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b1e:	4b87      	ldr	r3, [pc, #540]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b20:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000b22:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8000b24:	f042 0201 	orr.w	r2, r2, #1
 8000b28:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000b2a:	f7ff fdd1 	bl	80006d0 <HAL_GetTick>
 8000b2e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000b30:	e005      	b.n	8000b3e <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b32:	f7ff fdcd 	bl	80006d0 <HAL_GetTick>
 8000b36:	1b40      	subs	r0, r0, r5
 8000b38:	2802      	cmp	r0, #2
 8000b3a:	f200 8125 	bhi.w	8000d88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000b3e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000b40:	0798      	lsls	r0, r3, #30
 8000b42:	d5f6      	bpl.n	8000b32 <HAL_RCC_OscConfig+0xda>
 8000b44:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000b46:	069a      	lsls	r2, r3, #26
 8000b48:	d517      	bpl.n	8000b7a <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000b4a:	69a3      	ldr	r3, [r4, #24]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	f000 8134 	beq.w	8000dba <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000b52:	4b7a      	ldr	r3, [pc, #488]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b54:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000b56:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8000b58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b5c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fdb7 	bl	80006d0 <HAL_GetTick>
 8000b62:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000b64:	e005      	b.n	8000b72 <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000b66:	f7ff fdb3 	bl	80006d0 <HAL_GetTick>
 8000b6a:	1b40      	subs	r0, r0, r5
 8000b6c:	2802      	cmp	r0, #2
 8000b6e:	f200 810b 	bhi.w	8000d88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000b72:	6833      	ldr	r3, [r6, #0]
 8000b74:	049f      	lsls	r7, r3, #18
 8000b76:	d5f6      	bpl.n	8000b66 <HAL_RCC_OscConfig+0x10e>
 8000b78:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b7a:	0759      	lsls	r1, r3, #29
 8000b7c:	f100 80b2 	bmi.w	8000ce4 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b80:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000b82:	b1d8      	cbz	r0, 8000bbc <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000b84:	4b6d      	ldr	r3, [pc, #436]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000b86:	691a      	ldr	r2, [r3, #16]
 8000b88:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000b8c:	2a18      	cmp	r2, #24
 8000b8e:	f000 81ce 	beq.w	8000f2e <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b92:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b94:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000b96:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8000b98:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000b9c:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b9e:	f000 8161 	beq.w	8000e64 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fd95 	bl	80006d0 <HAL_GetTick>
 8000ba6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000ba8:	e005      	b.n	8000bb6 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000baa:	f7ff fd91 	bl	80006d0 <HAL_GetTick>
 8000bae:	1b00      	subs	r0, r0, r4
 8000bb0:	2802      	cmp	r0, #2
 8000bb2:	f200 80e9 	bhi.w	8000d88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	019b      	lsls	r3, r3, #6
 8000bba:	d4f6      	bmi.n	8000baa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000bbc:	2000      	movs	r0, #0
}
 8000bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bc0:	4a5e      	ldr	r2, [pc, #376]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000bc2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000bc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000bca:	2b08      	cmp	r3, #8
 8000bcc:	d072      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x25c>
 8000bce:	2b18      	cmp	r3, #24
 8000bd0:	d06c      	beq.n	8000cac <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000bd2:	69e3      	ldr	r3, [r4, #28]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f000 8103 	beq.w	8000de0 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 8000bda:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000bde:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8000be0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000be4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000be6:	f7ff fd73 	bl	80006d0 <HAL_GetTick>
 8000bea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000bec:	e005      	b.n	8000bfa <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000bee:	f7ff fd6f 	bl	80006d0 <HAL_GetTick>
 8000bf2:	1b40      	subs	r0, r0, r5
 8000bf4:	2802      	cmp	r0, #2
 8000bf6:	f200 80c7 	bhi.w	8000d88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000bfa:	6833      	ldr	r3, [r6, #0]
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	d5f6      	bpl.n	8000bee <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000c00:	f7ff fd6c 	bl	80006dc <HAL_GetREVID>
 8000c04:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	f200 81e9 	bhi.w	8000fe0 <HAL_RCC_OscConfig+0x588>
 8000c0e:	6a22      	ldr	r2, [r4, #32]
 8000c10:	6873      	ldr	r3, [r6, #4]
 8000c12:	2a20      	cmp	r2, #32
 8000c14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000c18:	bf0c      	ite	eq
 8000c1a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8000c1e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8000c22:	6073      	str	r3, [r6, #4]
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	e774      	b.n	8000b12 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000c28:	2b18      	cmp	r3, #24
 8000c2a:	f000 810b 	beq.w	8000e44 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c2e:	68e2      	ldr	r2, [r4, #12]
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f000 80f3 	beq.w	8000e1c <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c36:	4941      	ldr	r1, [pc, #260]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000c38:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c3a:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c3c:	f023 0319 	bic.w	r3, r3, #25
 8000c40:	4313      	orrs	r3, r2
 8000c42:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8000c44:	f7ff fd44 	bl	80006d0 <HAL_GetTick>
 8000c48:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c4a:	e005      	b.n	8000c58 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c4c:	f7ff fd40 	bl	80006d0 <HAL_GetTick>
 8000c50:	1b40      	subs	r0, r0, r5
 8000c52:	2802      	cmp	r0, #2
 8000c54:	f200 8098 	bhi.w	8000d88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c58:	6833      	ldr	r3, [r6, #0]
 8000c5a:	075f      	lsls	r7, r3, #29
 8000c5c:	d5f6      	bpl.n	8000c4c <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c5e:	f7ff fd3d 	bl	80006dc <HAL_GetREVID>
 8000c62:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c66:	4298      	cmp	r0, r3
 8000c68:	f200 81c3 	bhi.w	8000ff2 <HAL_RCC_OscConfig+0x59a>
 8000c6c:	6922      	ldr	r2, [r4, #16]
 8000c6e:	6873      	ldr	r3, [r6, #4]
 8000c70:	2a40      	cmp	r2, #64	; 0x40
 8000c72:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000c76:	bf0c      	ite	eq
 8000c78:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8000c7c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8000c80:	6073      	str	r3, [r6, #4]
 8000c82:	6823      	ldr	r3, [r4, #0]
 8000c84:	e743      	b.n	8000b0e <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8000c86:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000c88:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000c8a:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8000c8c:	f022 0201 	bic.w	r2, r2, #1
 8000c90:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000c92:	f7ff fd1d 	bl	80006d0 <HAL_GetTick>
 8000c96:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000c98:	e004      	b.n	8000ca4 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c9a:	f7ff fd19 	bl	80006d0 <HAL_GetTick>
 8000c9e:	1b40      	subs	r0, r0, r5
 8000ca0:	2802      	cmp	r0, #2
 8000ca2:	d871      	bhi.n	8000d88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ca4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000ca6:	0799      	lsls	r1, r3, #30
 8000ca8:	d4f7      	bmi.n	8000c9a <HAL_RCC_OscConfig+0x242>
 8000caa:	e74b      	b.n	8000b44 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000cac:	f002 0203 	and.w	r2, r2, #3
 8000cb0:	2a01      	cmp	r2, #1
 8000cb2:	d18e      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000cb4:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	05da      	lsls	r2, r3, #23
 8000cba:	d552      	bpl.n	8000d62 <HAL_RCC_OscConfig+0x30a>
 8000cbc:	69e3      	ldr	r3, [r4, #28]
 8000cbe:	2b80      	cmp	r3, #128	; 0x80
 8000cc0:	d04f      	beq.n	8000d62 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8000cc2:	2001      	movs	r0, #1
}
 8000cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000cc6:	f001 0103 	and.w	r1, r1, #3
 8000cca:	2902      	cmp	r1, #2
 8000ccc:	f47f aed7 	bne.w	8000a7e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	0392      	lsls	r2, r2, #14
 8000cd6:	f57f aef6 	bpl.w	8000ac6 <HAL_RCC_OscConfig+0x6e>
 8000cda:	6862      	ldr	r2, [r4, #4]
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f47f aef2 	bne.w	8000ac6 <HAL_RCC_OscConfig+0x6e>
 8000ce2:	e7ee      	b.n	8000cc2 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_RCC_OscConfig+0x2e8>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000ce8:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8000cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cee:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000cf0:	f7ff fcee 	bl	80006d0 <HAL_GetTick>
 8000cf4:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000cf6:	e004      	b.n	8000d02 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000cf8:	f7ff fcea 	bl	80006d0 <HAL_GetTick>
 8000cfc:	1b40      	subs	r0, r0, r5
 8000cfe:	2864      	cmp	r0, #100	; 0x64
 8000d00:	d842      	bhi.n	8000d88 <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000d02:	6833      	ldr	r3, [r6, #0]
 8000d04:	05da      	lsls	r2, r3, #23
 8000d06:	d5f7      	bpl.n	8000cf8 <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d08:	68a3      	ldr	r3, [r4, #8]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	f000 817a 	beq.w	8001004 <HAL_RCC_OscConfig+0x5ac>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 814b 	beq.w	8000fac <HAL_RCC_OscConfig+0x554>
 8000d16:	2b05      	cmp	r3, #5
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
 8000d1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000d1c:	f000 8187 	beq.w	800102e <HAL_RCC_OscConfig+0x5d6>
 8000d20:	f022 0201 	bic.w	r2, r2, #1
 8000d24:	671a      	str	r2, [r3, #112]	; 0x70
 8000d26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000d28:	f022 0204 	bic.w	r2, r2, #4
 8000d2c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d2e:	f7ff fccf 	bl	80006d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000d32:	4e02      	ldr	r6, [pc, #8]	; (8000d3c <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d34:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d38:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x2f6>
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d44:	f7ff fcc4 	bl	80006d0 <HAL_GetTick>
 8000d48:	1b40      	subs	r0, r0, r5
 8000d4a:	42b8      	cmp	r0, r7
 8000d4c:	d81c      	bhi.n	8000d88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000d4e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000d50:	079b      	lsls	r3, r3, #30
 8000d52:	d5f7      	bpl.n	8000d44 <HAL_RCC_OscConfig+0x2ec>
 8000d54:	e714      	b.n	8000b80 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d56:	4aae      	ldr	r2, [pc, #696]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
 8000d58:	6813      	ldr	r3, [r2, #0]
 8000d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d60:	e6a2      	b.n	8000aa8 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d62:	f7ff fcbb 	bl	80006dc <HAL_GetREVID>
 8000d66:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d6a:	4298      	cmp	r0, r3
 8000d6c:	d870      	bhi.n	8000e50 <HAL_RCC_OscConfig+0x3f8>
 8000d6e:	6a22      	ldr	r2, [r4, #32]
 8000d70:	2a20      	cmp	r2, #32
 8000d72:	f000 8153 	beq.w	800101c <HAL_RCC_OscConfig+0x5c4>
 8000d76:	49a6      	ldr	r1, [pc, #664]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
 8000d78:	684b      	ldr	r3, [r1, #4]
 8000d7a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000d7e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8000d82:	604b      	str	r3, [r1, #4]
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	e6c4      	b.n	8000b12 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000d88:	2003      	movs	r0, #3
}
 8000d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8c:	4ba0      	ldr	r3, [pc, #640]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d90:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000da0:	f7ff fc96 	bl	80006d0 <HAL_GetTick>
 8000da4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000da6:	e004      	b.n	8000db2 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da8:	f7ff fc92 	bl	80006d0 <HAL_GetTick>
 8000dac:	1b40      	subs	r0, r0, r5
 8000dae:	2864      	cmp	r0, #100	; 0x64
 8000db0:	d8ea      	bhi.n	8000d88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000db2:	6833      	ldr	r3, [r6, #0]
 8000db4:	0398      	lsls	r0, r3, #14
 8000db6:	d4f7      	bmi.n	8000da8 <HAL_RCC_OscConfig+0x350>
 8000db8:	e684      	b.n	8000ac4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8000dba:	4b95      	ldr	r3, [pc, #596]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000dbe:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8000dc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000dc4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fc83 	bl	80006d0 <HAL_GetTick>
 8000dca:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000dcc:	e004      	b.n	8000dd8 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000dce:	f7ff fc7f 	bl	80006d0 <HAL_GetTick>
 8000dd2:	1b40      	subs	r0, r0, r5
 8000dd4:	2802      	cmp	r0, #2
 8000dd6:	d8d7      	bhi.n	8000d88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000dd8:	6833      	ldr	r3, [r6, #0]
 8000dda:	0498      	lsls	r0, r3, #18
 8000ddc:	d4f7      	bmi.n	8000dce <HAL_RCC_OscConfig+0x376>
 8000dde:	e6cb      	b.n	8000b78 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8000de0:	4b8b      	ldr	r3, [pc, #556]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
 8000de2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000de4:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8000de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dec:	f7ff fc70 	bl	80006d0 <HAL_GetTick>
 8000df0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000df2:	e004      	b.n	8000dfe <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000df4:	f7ff fc6c 	bl	80006d0 <HAL_GetTick>
 8000df8:	1b40      	subs	r0, r0, r5
 8000dfa:	2802      	cmp	r0, #2
 8000dfc:	d8c4      	bhi.n	8000d88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000dfe:	6833      	ldr	r3, [r6, #0]
 8000e00:	05df      	lsls	r7, r3, #23
 8000e02:	d4f7      	bmi.n	8000df4 <HAL_RCC_OscConfig+0x39c>
 8000e04:	6823      	ldr	r3, [r4, #0]
 8000e06:	e684      	b.n	8000b12 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e08:	4a81      	ldr	r2, [pc, #516]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
 8000e0a:	6921      	ldr	r1, [r4, #16]
 8000e0c:	6853      	ldr	r3, [r2, #4]
 8000e0e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000e12:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000e16:	6053      	str	r3, [r2, #4]
 8000e18:	6823      	ldr	r3, [r4, #0]
 8000e1a:	e678      	b.n	8000b0e <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8000e1c:	4b7c      	ldr	r3, [pc, #496]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e20:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8000e22:	f022 0201 	bic.w	r2, r2, #1
 8000e26:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc52 	bl	80006d0 <HAL_GetTick>
 8000e2c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e2e:	e004      	b.n	8000e3a <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e30:	f7ff fc4e 	bl	80006d0 <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d8a6      	bhi.n	8000d88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e3a:	6833      	ldr	r3, [r6, #0]
 8000e3c:	0758      	lsls	r0, r3, #29
 8000e3e:	d4f7      	bmi.n	8000e30 <HAL_RCC_OscConfig+0x3d8>
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	e664      	b.n	8000b0e <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000e44:	0792      	lsls	r2, r2, #30
 8000e46:	f47f aef2 	bne.w	8000c2e <HAL_RCC_OscConfig+0x1d6>
 8000e4a:	e645      	b.n	8000ad8 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8000e4c:	2001      	movs	r0, #1
}
 8000e4e:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000e50:	4a6f      	ldr	r2, [pc, #444]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
 8000e52:	6a21      	ldr	r1, [r4, #32]
 8000e54:	68d3      	ldr	r3, [r2, #12]
 8000e56:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000e5a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000e5e:	60d3      	str	r3, [r2, #12]
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	e656      	b.n	8000b12 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8000e64:	f7ff fc34 	bl	80006d0 <HAL_GetTick>
 8000e68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000e6a:	e004      	b.n	8000e76 <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e6c:	f7ff fc30 	bl	80006d0 <HAL_GetTick>
 8000e70:	1b80      	subs	r0, r0, r6
 8000e72:	2802      	cmp	r0, #2
 8000e74:	d888      	bhi.n	8000d88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000e76:	682b      	ldr	r3, [r5, #0]
 8000e78:	0199      	lsls	r1, r3, #6
 8000e7a:	d4f7      	bmi.n	8000e6c <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e7c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000e7e:	4b65      	ldr	r3, [pc, #404]	; (8001014 <HAL_RCC_OscConfig+0x5bc>)
 8000e80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e82:	4013      	ands	r3, r2
 8000e84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000e86:	4964      	ldr	r1, [pc, #400]	; (8001018 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e88:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000e8a:	4e61      	ldr	r6, [pc, #388]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e8c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000e90:	62ab      	str	r3, [r5, #40]	; 0x28
 8000e92:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8000e94:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8000e98:	3f01      	subs	r7, #1
 8000e9a:	1e50      	subs	r0, r2, #1
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000ea0:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8000ea4:	025b      	lsls	r3, r3, #9
 8000ea6:	0400      	lsls	r0, r0, #16
 8000ea8:	3a01      	subs	r2, #1
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8000eb0:	0612      	lsls	r2, r2, #24
 8000eb2:	4303      	orrs	r3, r0
 8000eb4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000eb8:	433b      	orrs	r3, r7
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8000ebe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ec0:	f023 0301 	bic.w	r3, r3, #1
 8000ec4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000ec6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000ec8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000eca:	4011      	ands	r1, r2
 8000ecc:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8000ed0:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000ed2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ed4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ed6:	f023 030c 	bic.w	r3, r3, #12
 8000eda:	4313      	orrs	r3, r2
 8000edc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000ede:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ee0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ee2:	f023 0302 	bic.w	r3, r3, #2
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000eea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000ef2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000efa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f00:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8000f02:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000f0a:	682b      	ldr	r3, [r5, #0]
 8000f0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f10:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f12:	f7ff fbdd 	bl	80006d0 <HAL_GetTick>
 8000f16:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000f18:	e005      	b.n	8000f26 <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f1a:	f7ff fbd9 	bl	80006d0 <HAL_GetTick>
 8000f1e:	1b00      	subs	r0, r0, r4
 8000f20:	2802      	cmp	r0, #2
 8000f22:	f63f af31 	bhi.w	8000d88 <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000f26:	6833      	ldr	r3, [r6, #0]
 8000f28:	019a      	lsls	r2, r3, #6
 8000f2a:	d5f6      	bpl.n	8000f1a <HAL_RCC_OscConfig+0x4c2>
 8000f2c:	e646      	b.n	8000bbc <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f2e:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8000f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8000f32:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f34:	f43f ae43 	beq.w	8000bbe <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f38:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f3c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	f47f aebf 	bne.w	8000cc2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f44:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	f47f aeb9 	bne.w	8000cc2 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000f50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f52:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8000f56:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f47f aeb2 	bne.w	8000cc2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f60:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8000f64:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000f66:	429a      	cmp	r2, r3
 8000f68:	f47f aeab 	bne.w	8000cc2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000f6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f6e:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8000f72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f47f aea4 	bne.w	8000cc2 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8000f7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000f7c:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8000f80:	3801      	subs	r0, #1
  return HAL_OK;
 8000f82:	1a28      	subs	r0, r5, r0
 8000f84:	bf18      	it	ne
 8000f86:	2001      	movne	r0, #1
}
 8000f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e586      	b.n	8000aa8 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
 8000f9c:	6853      	ldr	r3, [r2, #4]
 8000f9e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa6:	6053      	str	r3, [r2, #4]
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	e5b0      	b.n	8000b0e <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fae:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000fb4:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	671a      	str	r2, [r3, #112]	; 0x70
 8000fbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fbe:	f022 0204 	bic.w	r2, r2, #4
 8000fc2:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fb84 	bl	80006d0 <HAL_GetTick>
 8000fc8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000fca:	e005      	b.n	8000fd8 <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fb80 	bl	80006d0 <HAL_GetTick>
 8000fd0:	1b40      	subs	r0, r0, r5
 8000fd2:	42b8      	cmp	r0, r7
 8000fd4:	f63f aed8 	bhi.w	8000d88 <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000fd8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000fda:	0798      	lsls	r0, r3, #30
 8000fdc:	d4f6      	bmi.n	8000fcc <HAL_RCC_OscConfig+0x574>
 8000fde:	e5cf      	b.n	8000b80 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000fe0:	68f3      	ldr	r3, [r6, #12]
 8000fe2:	6a22      	ldr	r2, [r4, #32]
 8000fe4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000fe8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000fec:	60f3      	str	r3, [r6, #12]
 8000fee:	6823      	ldr	r3, [r4, #0]
 8000ff0:	e58f      	b.n	8000b12 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff2:	6873      	ldr	r3, [r6, #4]
 8000ff4:	6922      	ldr	r2, [r4, #16]
 8000ff6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000ffa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ffe:	6073      	str	r3, [r6, #4]
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	e584      	b.n	8000b0e <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001004:	4a02      	ldr	r2, [pc, #8]	; (8001010 <HAL_RCC_OscConfig+0x5b8>)
 8001006:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800100e:	e68e      	b.n	8000d2e <HAL_RCC_OscConfig+0x2d6>
 8001010:	58024400 	.word	0x58024400
 8001014:	fffffc0c 	.word	0xfffffc0c
 8001018:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800101c:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_RCC_OscConfig+0x5e8>)
 800101e:	6853      	ldr	r3, [r2, #4]
 8001020:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001028:	6053      	str	r3, [r2, #4]
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	e571      	b.n	8000b12 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800102e:	f042 0204 	orr.w	r2, r2, #4
 8001032:	671a      	str	r2, [r3, #112]	; 0x70
 8001034:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001036:	f042 0201 	orr.w	r2, r2, #1
 800103a:	671a      	str	r2, [r3, #112]	; 0x70
 800103c:	e677      	b.n	8000d2e <HAL_RCC_OscConfig+0x2d6>
 800103e:	bf00      	nop
 8001040:	58024400 	.word	0x58024400

08001044 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001044:	4a47      	ldr	r2, [pc, #284]	; (8001164 <HAL_RCC_GetSysClockFreq+0x120>)
 8001046:	6913      	ldr	r3, [r2, #16]
 8001048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800104c:	2b10      	cmp	r3, #16
 800104e:	d004      	beq.n	800105a <HAL_RCC_GetSysClockFreq+0x16>
 8001050:	2b18      	cmp	r3, #24
 8001052:	d00d      	beq.n	8001070 <HAL_RCC_GetSysClockFreq+0x2c>
 8001054:	b11b      	cbz	r3, 800105e <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001056:	4844      	ldr	r0, [pc, #272]	; (8001168 <HAL_RCC_GetSysClockFreq+0x124>)
 8001058:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800105a:	4844      	ldr	r0, [pc, #272]	; (800116c <HAL_RCC_GetSysClockFreq+0x128>)
 800105c:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800105e:	6813      	ldr	r3, [r2, #0]
 8001060:	0699      	lsls	r1, r3, #26
 8001062:	d54a      	bpl.n	80010fa <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001064:	6813      	ldr	r3, [r2, #0]
 8001066:	4842      	ldr	r0, [pc, #264]	; (8001170 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001068:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800106c:	40d8      	lsrs	r0, r3
 800106e:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001070:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8001072:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001074:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001076:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8001078:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800107c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001080:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8001082:	d038      	beq.n	80010f6 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001084:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001088:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800108c:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001090:	fb01 f105 	mul.w	r1, r1, r5
 8001094:	2b01      	cmp	r3, #1
 8001096:	ee07 1a90 	vmov	s15, r1
 800109a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 800109e:	d002      	beq.n	80010a6 <HAL_RCC_GetSysClockFreq+0x62>
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d02c      	beq.n	80010fe <HAL_RCC_GetSysClockFreq+0xba>
 80010a4:	b393      	cbz	r3, 800110c <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80010a6:	ee07 0a90 	vmov	s15, r0
 80010aa:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001174 <HAL_RCC_GetSysClockFreq+0x130>
 80010ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010b4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80010b8:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8001178 <HAL_RCC_GetSysClockFreq+0x134>
 80010bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010c0:	ee06 3a90 	vmov	s13, r3
 80010c4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80010c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80010cc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80010d0:	eee7 6a25 	vfma.f32	s13, s14, s11
 80010d4:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_RCC_GetSysClockFreq+0x120>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80010e0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f2:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80010f6:	bc30      	pop	{r4, r5}
 80010f8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80010fa:	481d      	ldr	r0, [pc, #116]	; (8001170 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 80010fc:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80010fe:	ee07 0a90 	vmov	s15, r0
 8001102:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800117c <HAL_RCC_GetSysClockFreq+0x138>
 8001106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110a:	e7d2      	b.n	80010b2 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800110c:	6813      	ldr	r3, [r2, #0]
 800110e:	069b      	lsls	r3, r3, #26
 8001110:	d520      	bpl.n	8001154 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001112:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001114:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001118:	4915      	ldr	r1, [pc, #84]	; (8001170 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800111a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800111e:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001126:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001128:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800112a:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8001178 <HAL_RCC_GetSysClockFreq+0x134>
 800112e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001132:	ee06 1a10 	vmov	s12, r1
 8001136:	ee06 3a90 	vmov	s13, r3
 800113a:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 800113e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001142:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001146:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800114a:	eee7 6a05 	vfma.f32	s13, s14, s10
 800114e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001152:	e7c1      	b.n	80010d8 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001154:	ee07 0a90 	vmov	s15, r0
 8001158:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001180 <HAL_RCC_GetSysClockFreq+0x13c>
 800115c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001160:	e7a7      	b.n	80010b2 <HAL_RCC_GetSysClockFreq+0x6e>
 8001162:	bf00      	nop
 8001164:	58024400 	.word	0x58024400
 8001168:	003d0900 	.word	0x003d0900
 800116c:	017d7840 	.word	0x017d7840
 8001170:	03d09000 	.word	0x03d09000
 8001174:	4a742400 	.word	0x4a742400
 8001178:	39000000 	.word	0x39000000
 800117c:	4bbebc20 	.word	0x4bbebc20
 8001180:	4c742400 	.word	0x4c742400

08001184 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001184:	2800      	cmp	r0, #0
 8001186:	f000 810e 	beq.w	80013a6 <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800118a:	4a8d      	ldr	r2, [pc, #564]	; (80013c0 <HAL_RCC_ClockConfig+0x23c>)
 800118c:	6813      	ldr	r3, [r2, #0]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	428b      	cmp	r3, r1
{
 8001194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001198:	4604      	mov	r4, r0
 800119a:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800119c:	d20c      	bcs.n	80011b8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119e:	6813      	ldr	r3, [r2, #0]
 80011a0:	f023 030f 	bic.w	r3, r3, #15
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a8:	6813      	ldr	r3, [r2, #0]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	428b      	cmp	r3, r1
 80011b0:	d002      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80011b2:	2001      	movs	r0, #1
}
 80011b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	075f      	lsls	r7, r3, #29
 80011bc:	d50b      	bpl.n	80011d6 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80011be:	4981      	ldr	r1, [pc, #516]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 80011c0:	6920      	ldr	r0, [r4, #16]
 80011c2:	698a      	ldr	r2, [r1, #24]
 80011c4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d904      	bls.n	80011d6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80011cc:	698a      	ldr	r2, [r1, #24]
 80011ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011d2:	4302      	orrs	r2, r0
 80011d4:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d6:	071e      	lsls	r6, r3, #28
 80011d8:	d50b      	bpl.n	80011f2 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80011da:	497a      	ldr	r1, [pc, #488]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 80011dc:	6960      	ldr	r0, [r4, #20]
 80011de:	69ca      	ldr	r2, [r1, #28]
 80011e0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80011e4:	4290      	cmp	r0, r2
 80011e6:	d904      	bls.n	80011f2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80011e8:	69ca      	ldr	r2, [r1, #28]
 80011ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011ee:	4302      	orrs	r2, r0
 80011f0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f2:	06d8      	lsls	r0, r3, #27
 80011f4:	d50b      	bpl.n	800120e <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80011f6:	4973      	ldr	r1, [pc, #460]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 80011f8:	69a0      	ldr	r0, [r4, #24]
 80011fa:	69ca      	ldr	r2, [r1, #28]
 80011fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001200:	4290      	cmp	r0, r2
 8001202:	d904      	bls.n	800120e <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001204:	69ca      	ldr	r2, [r1, #28]
 8001206:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800120a:	4302      	orrs	r2, r0
 800120c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800120e:	0699      	lsls	r1, r3, #26
 8001210:	d50b      	bpl.n	800122a <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001212:	496c      	ldr	r1, [pc, #432]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 8001214:	69e0      	ldr	r0, [r4, #28]
 8001216:	6a0a      	ldr	r2, [r1, #32]
 8001218:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800121c:	4290      	cmp	r0, r2
 800121e:	d904      	bls.n	800122a <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001220:	6a0a      	ldr	r2, [r1, #32]
 8001222:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001226:	4302      	orrs	r2, r0
 8001228:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800122a:	079a      	lsls	r2, r3, #30
 800122c:	f140 80ad 	bpl.w	800138a <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001230:	4864      	ldr	r0, [pc, #400]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 8001232:	68e1      	ldr	r1, [r4, #12]
 8001234:	6982      	ldr	r2, [r0, #24]
 8001236:	f002 020f 	and.w	r2, r2, #15
 800123a:	4291      	cmp	r1, r2
 800123c:	d904      	bls.n	8001248 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800123e:	6982      	ldr	r2, [r0, #24]
 8001240:	f022 020f 	bic.w	r2, r2, #15
 8001244:	430a      	orrs	r2, r1
 8001246:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001248:	07d8      	lsls	r0, r3, #31
 800124a:	d531      	bpl.n	80012b0 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800124c:	4a5d      	ldr	r2, [pc, #372]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 800124e:	68a1      	ldr	r1, [r4, #8]
 8001250:	6993      	ldr	r3, [r2, #24]
 8001252:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001256:	430b      	orrs	r3, r1
 8001258:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125a:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800125c:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125e:	2902      	cmp	r1, #2
 8001260:	f000 80a3 	beq.w	80013aa <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001264:	2903      	cmp	r1, #3
 8001266:	f000 809a 	beq.w	800139e <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800126a:	2901      	cmp	r1, #1
 800126c:	f000 80a3 	beq.w	80013b6 <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001270:	0758      	lsls	r0, r3, #29
 8001272:	d59e      	bpl.n	80011b2 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001274:	4a53      	ldr	r2, [pc, #332]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001276:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800127a:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127c:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800127e:	f023 0307 	bic.w	r3, r3, #7
 8001282:	430b      	orrs	r3, r1
 8001284:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 8001286:	f7ff fa23 	bl	80006d0 <HAL_GetTick>
 800128a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128c:	e005      	b.n	800129a <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128e:	f7ff fa1f 	bl	80006d0 <HAL_GetTick>
 8001292:	1b80      	subs	r0, r0, r6
 8001294:	4540      	cmp	r0, r8
 8001296:	f200 808c 	bhi.w	80013b2 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	6862      	ldr	r2, [r4, #4]
 800129e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012a2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80012a6:	d1f2      	bne.n	800128e <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	0799      	lsls	r1, r3, #30
 80012ac:	d506      	bpl.n	80012bc <HAL_RCC_ClockConfig+0x138>
 80012ae:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80012b0:	4844      	ldr	r0, [pc, #272]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 80012b2:	6982      	ldr	r2, [r0, #24]
 80012b4:	f002 020f 	and.w	r2, r2, #15
 80012b8:	428a      	cmp	r2, r1
 80012ba:	d86a      	bhi.n	8001392 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012bc:	4940      	ldr	r1, [pc, #256]	; (80013c0 <HAL_RCC_ClockConfig+0x23c>)
 80012be:	680a      	ldr	r2, [r1, #0]
 80012c0:	f002 020f 	and.w	r2, r2, #15
 80012c4:	42aa      	cmp	r2, r5
 80012c6:	d90a      	bls.n	80012de <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c8:	680a      	ldr	r2, [r1, #0]
 80012ca:	f022 020f 	bic.w	r2, r2, #15
 80012ce:	432a      	orrs	r2, r5
 80012d0:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d2:	680a      	ldr	r2, [r1, #0]
 80012d4:	f002 020f 	and.w	r2, r2, #15
 80012d8:	42aa      	cmp	r2, r5
 80012da:	f47f af6a 	bne.w	80011b2 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80012de:	075a      	lsls	r2, r3, #29
 80012e0:	d50b      	bpl.n	80012fa <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80012e2:	4938      	ldr	r1, [pc, #224]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 80012e4:	6920      	ldr	r0, [r4, #16]
 80012e6:	698a      	ldr	r2, [r1, #24]
 80012e8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80012ec:	4290      	cmp	r0, r2
 80012ee:	d204      	bcs.n	80012fa <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80012f0:	698a      	ldr	r2, [r1, #24]
 80012f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012f6:	4302      	orrs	r2, r0
 80012f8:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fa:	071f      	lsls	r7, r3, #28
 80012fc:	d50b      	bpl.n	8001316 <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80012fe:	4931      	ldr	r1, [pc, #196]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 8001300:	6960      	ldr	r0, [r4, #20]
 8001302:	69ca      	ldr	r2, [r1, #28]
 8001304:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001308:	4290      	cmp	r0, r2
 800130a:	d204      	bcs.n	8001316 <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800130c:	69ca      	ldr	r2, [r1, #28]
 800130e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001312:	4302      	orrs	r2, r0
 8001314:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001316:	06de      	lsls	r6, r3, #27
 8001318:	d50b      	bpl.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800131a:	492a      	ldr	r1, [pc, #168]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 800131c:	69a0      	ldr	r0, [r4, #24]
 800131e:	69ca      	ldr	r2, [r1, #28]
 8001320:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001324:	4290      	cmp	r0, r2
 8001326:	d204      	bcs.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001328:	69ca      	ldr	r2, [r1, #28]
 800132a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800132e:	4302      	orrs	r2, r0
 8001330:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001332:	069d      	lsls	r5, r3, #26
 8001334:	d50b      	bpl.n	800134e <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001336:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 8001338:	69e1      	ldr	r1, [r4, #28]
 800133a:	6a13      	ldr	r3, [r2, #32]
 800133c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001340:	4299      	cmp	r1, r3
 8001342:	d204      	bcs.n	800134e <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001344:	6a13      	ldr	r3, [r2, #32]
 8001346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800134a:	430b      	orrs	r3, r1
 800134c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800134e:	f7ff fe79 	bl	8001044 <HAL_RCC_GetSysClockFreq>
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <HAL_RCC_ClockConfig+0x240>)
 8001354:	4602      	mov	r2, r0
 8001356:	481c      	ldr	r0, [pc, #112]	; (80013c8 <HAL_RCC_ClockConfig+0x244>)
 8001358:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800135a:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800135c:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8001360:	4d1a      	ldr	r5, [pc, #104]	; (80013cc <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	4c1a      	ldr	r4, [pc, #104]	; (80013d0 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001368:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800136a:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800136c:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8001370:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001372:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8001376:	4d17      	ldr	r5, [pc, #92]	; (80013d4 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001378:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800137e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001380:	6023      	str	r3, [r4, #0]
}
 8001382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8001386:	f7ff b941 	b.w	800060c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800138a:	07da      	lsls	r2, r3, #31
 800138c:	f53f af5e 	bmi.w	800124c <HAL_RCC_ClockConfig+0xc8>
 8001390:	e794      	b.n	80012bc <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001392:	6982      	ldr	r2, [r0, #24]
 8001394:	f022 020f 	bic.w	r2, r2, #15
 8001398:	4311      	orrs	r1, r2
 800139a:	6181      	str	r1, [r0, #24]
 800139c:	e78e      	b.n	80012bc <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800139e:	019f      	lsls	r7, r3, #6
 80013a0:	f53f af68 	bmi.w	8001274 <HAL_RCC_ClockConfig+0xf0>
 80013a4:	e705      	b.n	80011b2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80013a6:	2001      	movs	r0, #1
}
 80013a8:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013aa:	039b      	lsls	r3, r3, #14
 80013ac:	f53f af62 	bmi.w	8001274 <HAL_RCC_ClockConfig+0xf0>
 80013b0:	e6ff      	b.n	80011b2 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80013b2:	2003      	movs	r0, #3
 80013b4:	e6fe      	b.n	80011b4 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013b6:	05de      	lsls	r6, r3, #23
 80013b8:	f53f af5c 	bmi.w	8001274 <HAL_RCC_ClockConfig+0xf0>
 80013bc:	e6f9      	b.n	80011b2 <HAL_RCC_ClockConfig+0x2e>
 80013be:	bf00      	nop
 80013c0:	52002000 	.word	0x52002000
 80013c4:	58024400 	.word	0x58024400
 80013c8:	08001de0 	.word	0x08001de0
 80013cc:	2400000c 	.word	0x2400000c
 80013d0:	24000004 	.word	0x24000004
 80013d4:	24000000 	.word	0x24000000

080013d8 <__errno>:
 80013d8:	4b01      	ldr	r3, [pc, #4]	; (80013e0 <__errno+0x8>)
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	24000010 	.word	0x24000010

080013e4 <__libc_init_array>:
 80013e4:	b570      	push	{r4, r5, r6, lr}
 80013e6:	4d0d      	ldr	r5, [pc, #52]	; (800141c <__libc_init_array+0x38>)
 80013e8:	4c0d      	ldr	r4, [pc, #52]	; (8001420 <__libc_init_array+0x3c>)
 80013ea:	1b64      	subs	r4, r4, r5
 80013ec:	10a4      	asrs	r4, r4, #2
 80013ee:	2600      	movs	r6, #0
 80013f0:	42a6      	cmp	r6, r4
 80013f2:	d109      	bne.n	8001408 <__libc_init_array+0x24>
 80013f4:	4d0b      	ldr	r5, [pc, #44]	; (8001424 <__libc_init_array+0x40>)
 80013f6:	4c0c      	ldr	r4, [pc, #48]	; (8001428 <__libc_init_array+0x44>)
 80013f8:	f000 fce6 	bl	8001dc8 <_init>
 80013fc:	1b64      	subs	r4, r4, r5
 80013fe:	10a4      	asrs	r4, r4, #2
 8001400:	2600      	movs	r6, #0
 8001402:	42a6      	cmp	r6, r4
 8001404:	d105      	bne.n	8001412 <__libc_init_array+0x2e>
 8001406:	bd70      	pop	{r4, r5, r6, pc}
 8001408:	f855 3b04 	ldr.w	r3, [r5], #4
 800140c:	4798      	blx	r3
 800140e:	3601      	adds	r6, #1
 8001410:	e7ee      	b.n	80013f0 <__libc_init_array+0xc>
 8001412:	f855 3b04 	ldr.w	r3, [r5], #4
 8001416:	4798      	blx	r3
 8001418:	3601      	adds	r6, #1
 800141a:	e7f2      	b.n	8001402 <__libc_init_array+0x1e>
 800141c:	08001e68 	.word	0x08001e68
 8001420:	08001e68 	.word	0x08001e68
 8001424:	08001e68 	.word	0x08001e68
 8001428:	08001e6c 	.word	0x08001e6c

0800142c <memset>:
 800142c:	4402      	add	r2, r0
 800142e:	4603      	mov	r3, r0
 8001430:	4293      	cmp	r3, r2
 8001432:	d100      	bne.n	8001436 <memset+0xa>
 8001434:	4770      	bx	lr
 8001436:	f803 1b01 	strb.w	r1, [r3], #1
 800143a:	e7f9      	b.n	8001430 <memset+0x4>

0800143c <_puts_r>:
 800143c:	b570      	push	{r4, r5, r6, lr}
 800143e:	460e      	mov	r6, r1
 8001440:	4605      	mov	r5, r0
 8001442:	b118      	cbz	r0, 800144c <_puts_r+0x10>
 8001444:	6983      	ldr	r3, [r0, #24]
 8001446:	b90b      	cbnz	r3, 800144c <_puts_r+0x10>
 8001448:	f000 fa48 	bl	80018dc <__sinit>
 800144c:	69ab      	ldr	r3, [r5, #24]
 800144e:	68ac      	ldr	r4, [r5, #8]
 8001450:	b913      	cbnz	r3, 8001458 <_puts_r+0x1c>
 8001452:	4628      	mov	r0, r5
 8001454:	f000 fa42 	bl	80018dc <__sinit>
 8001458:	4b2c      	ldr	r3, [pc, #176]	; (800150c <_puts_r+0xd0>)
 800145a:	429c      	cmp	r4, r3
 800145c:	d120      	bne.n	80014a0 <_puts_r+0x64>
 800145e:	686c      	ldr	r4, [r5, #4]
 8001460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001462:	07db      	lsls	r3, r3, #31
 8001464:	d405      	bmi.n	8001472 <_puts_r+0x36>
 8001466:	89a3      	ldrh	r3, [r4, #12]
 8001468:	0598      	lsls	r0, r3, #22
 800146a:	d402      	bmi.n	8001472 <_puts_r+0x36>
 800146c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800146e:	f000 fad3 	bl	8001a18 <__retarget_lock_acquire_recursive>
 8001472:	89a3      	ldrh	r3, [r4, #12]
 8001474:	0719      	lsls	r1, r3, #28
 8001476:	d51d      	bpl.n	80014b4 <_puts_r+0x78>
 8001478:	6923      	ldr	r3, [r4, #16]
 800147a:	b1db      	cbz	r3, 80014b4 <_puts_r+0x78>
 800147c:	3e01      	subs	r6, #1
 800147e:	68a3      	ldr	r3, [r4, #8]
 8001480:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001484:	3b01      	subs	r3, #1
 8001486:	60a3      	str	r3, [r4, #8]
 8001488:	bb39      	cbnz	r1, 80014da <_puts_r+0x9e>
 800148a:	2b00      	cmp	r3, #0
 800148c:	da38      	bge.n	8001500 <_puts_r+0xc4>
 800148e:	4622      	mov	r2, r4
 8001490:	210a      	movs	r1, #10
 8001492:	4628      	mov	r0, r5
 8001494:	f000 f848 	bl	8001528 <__swbuf_r>
 8001498:	3001      	adds	r0, #1
 800149a:	d011      	beq.n	80014c0 <_puts_r+0x84>
 800149c:	250a      	movs	r5, #10
 800149e:	e011      	b.n	80014c4 <_puts_r+0x88>
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <_puts_r+0xd4>)
 80014a2:	429c      	cmp	r4, r3
 80014a4:	d101      	bne.n	80014aa <_puts_r+0x6e>
 80014a6:	68ac      	ldr	r4, [r5, #8]
 80014a8:	e7da      	b.n	8001460 <_puts_r+0x24>
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <_puts_r+0xd8>)
 80014ac:	429c      	cmp	r4, r3
 80014ae:	bf08      	it	eq
 80014b0:	68ec      	ldreq	r4, [r5, #12]
 80014b2:	e7d5      	b.n	8001460 <_puts_r+0x24>
 80014b4:	4621      	mov	r1, r4
 80014b6:	4628      	mov	r0, r5
 80014b8:	f000 f888 	bl	80015cc <__swsetup_r>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d0dd      	beq.n	800147c <_puts_r+0x40>
 80014c0:	f04f 35ff 	mov.w	r5, #4294967295
 80014c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014c6:	07da      	lsls	r2, r3, #31
 80014c8:	d405      	bmi.n	80014d6 <_puts_r+0x9a>
 80014ca:	89a3      	ldrh	r3, [r4, #12]
 80014cc:	059b      	lsls	r3, r3, #22
 80014ce:	d402      	bmi.n	80014d6 <_puts_r+0x9a>
 80014d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014d2:	f000 faa2 	bl	8001a1a <__retarget_lock_release_recursive>
 80014d6:	4628      	mov	r0, r5
 80014d8:	bd70      	pop	{r4, r5, r6, pc}
 80014da:	2b00      	cmp	r3, #0
 80014dc:	da04      	bge.n	80014e8 <_puts_r+0xac>
 80014de:	69a2      	ldr	r2, [r4, #24]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dc06      	bgt.n	80014f2 <_puts_r+0xb6>
 80014e4:	290a      	cmp	r1, #10
 80014e6:	d004      	beq.n	80014f2 <_puts_r+0xb6>
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	6022      	str	r2, [r4, #0]
 80014ee:	7019      	strb	r1, [r3, #0]
 80014f0:	e7c5      	b.n	800147e <_puts_r+0x42>
 80014f2:	4622      	mov	r2, r4
 80014f4:	4628      	mov	r0, r5
 80014f6:	f000 f817 	bl	8001528 <__swbuf_r>
 80014fa:	3001      	adds	r0, #1
 80014fc:	d1bf      	bne.n	800147e <_puts_r+0x42>
 80014fe:	e7df      	b.n	80014c0 <_puts_r+0x84>
 8001500:	6823      	ldr	r3, [r4, #0]
 8001502:	250a      	movs	r5, #10
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	6022      	str	r2, [r4, #0]
 8001508:	701d      	strb	r5, [r3, #0]
 800150a:	e7db      	b.n	80014c4 <_puts_r+0x88>
 800150c:	08001e28 	.word	0x08001e28
 8001510:	08001e48 	.word	0x08001e48
 8001514:	08001e08 	.word	0x08001e08

08001518 <puts>:
 8001518:	4b02      	ldr	r3, [pc, #8]	; (8001524 <puts+0xc>)
 800151a:	4601      	mov	r1, r0
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f7ff bf8d 	b.w	800143c <_puts_r>
 8001522:	bf00      	nop
 8001524:	24000010 	.word	0x24000010

08001528 <__swbuf_r>:
 8001528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152a:	460e      	mov	r6, r1
 800152c:	4614      	mov	r4, r2
 800152e:	4605      	mov	r5, r0
 8001530:	b118      	cbz	r0, 800153a <__swbuf_r+0x12>
 8001532:	6983      	ldr	r3, [r0, #24]
 8001534:	b90b      	cbnz	r3, 800153a <__swbuf_r+0x12>
 8001536:	f000 f9d1 	bl	80018dc <__sinit>
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <__swbuf_r+0x98>)
 800153c:	429c      	cmp	r4, r3
 800153e:	d12b      	bne.n	8001598 <__swbuf_r+0x70>
 8001540:	686c      	ldr	r4, [r5, #4]
 8001542:	69a3      	ldr	r3, [r4, #24]
 8001544:	60a3      	str	r3, [r4, #8]
 8001546:	89a3      	ldrh	r3, [r4, #12]
 8001548:	071a      	lsls	r2, r3, #28
 800154a:	d52f      	bpl.n	80015ac <__swbuf_r+0x84>
 800154c:	6923      	ldr	r3, [r4, #16]
 800154e:	b36b      	cbz	r3, 80015ac <__swbuf_r+0x84>
 8001550:	6923      	ldr	r3, [r4, #16]
 8001552:	6820      	ldr	r0, [r4, #0]
 8001554:	1ac0      	subs	r0, r0, r3
 8001556:	6963      	ldr	r3, [r4, #20]
 8001558:	b2f6      	uxtb	r6, r6
 800155a:	4283      	cmp	r3, r0
 800155c:	4637      	mov	r7, r6
 800155e:	dc04      	bgt.n	800156a <__swbuf_r+0x42>
 8001560:	4621      	mov	r1, r4
 8001562:	4628      	mov	r0, r5
 8001564:	f000 f926 	bl	80017b4 <_fflush_r>
 8001568:	bb30      	cbnz	r0, 80015b8 <__swbuf_r+0x90>
 800156a:	68a3      	ldr	r3, [r4, #8]
 800156c:	3b01      	subs	r3, #1
 800156e:	60a3      	str	r3, [r4, #8]
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	6022      	str	r2, [r4, #0]
 8001576:	701e      	strb	r6, [r3, #0]
 8001578:	6963      	ldr	r3, [r4, #20]
 800157a:	3001      	adds	r0, #1
 800157c:	4283      	cmp	r3, r0
 800157e:	d004      	beq.n	800158a <__swbuf_r+0x62>
 8001580:	89a3      	ldrh	r3, [r4, #12]
 8001582:	07db      	lsls	r3, r3, #31
 8001584:	d506      	bpl.n	8001594 <__swbuf_r+0x6c>
 8001586:	2e0a      	cmp	r6, #10
 8001588:	d104      	bne.n	8001594 <__swbuf_r+0x6c>
 800158a:	4621      	mov	r1, r4
 800158c:	4628      	mov	r0, r5
 800158e:	f000 f911 	bl	80017b4 <_fflush_r>
 8001592:	b988      	cbnz	r0, 80015b8 <__swbuf_r+0x90>
 8001594:	4638      	mov	r0, r7
 8001596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <__swbuf_r+0x9c>)
 800159a:	429c      	cmp	r4, r3
 800159c:	d101      	bne.n	80015a2 <__swbuf_r+0x7a>
 800159e:	68ac      	ldr	r4, [r5, #8]
 80015a0:	e7cf      	b.n	8001542 <__swbuf_r+0x1a>
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <__swbuf_r+0xa0>)
 80015a4:	429c      	cmp	r4, r3
 80015a6:	bf08      	it	eq
 80015a8:	68ec      	ldreq	r4, [r5, #12]
 80015aa:	e7ca      	b.n	8001542 <__swbuf_r+0x1a>
 80015ac:	4621      	mov	r1, r4
 80015ae:	4628      	mov	r0, r5
 80015b0:	f000 f80c 	bl	80015cc <__swsetup_r>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d0cb      	beq.n	8001550 <__swbuf_r+0x28>
 80015b8:	f04f 37ff 	mov.w	r7, #4294967295
 80015bc:	e7ea      	b.n	8001594 <__swbuf_r+0x6c>
 80015be:	bf00      	nop
 80015c0:	08001e28 	.word	0x08001e28
 80015c4:	08001e48 	.word	0x08001e48
 80015c8:	08001e08 	.word	0x08001e08

080015cc <__swsetup_r>:
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <__swsetup_r+0xcc>)
 80015ce:	b570      	push	{r4, r5, r6, lr}
 80015d0:	681d      	ldr	r5, [r3, #0]
 80015d2:	4606      	mov	r6, r0
 80015d4:	460c      	mov	r4, r1
 80015d6:	b125      	cbz	r5, 80015e2 <__swsetup_r+0x16>
 80015d8:	69ab      	ldr	r3, [r5, #24]
 80015da:	b913      	cbnz	r3, 80015e2 <__swsetup_r+0x16>
 80015dc:	4628      	mov	r0, r5
 80015de:	f000 f97d 	bl	80018dc <__sinit>
 80015e2:	4b2e      	ldr	r3, [pc, #184]	; (800169c <__swsetup_r+0xd0>)
 80015e4:	429c      	cmp	r4, r3
 80015e6:	d10f      	bne.n	8001608 <__swsetup_r+0x3c>
 80015e8:	686c      	ldr	r4, [r5, #4]
 80015ea:	89a3      	ldrh	r3, [r4, #12]
 80015ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015f0:	0719      	lsls	r1, r3, #28
 80015f2:	d42c      	bmi.n	800164e <__swsetup_r+0x82>
 80015f4:	06dd      	lsls	r5, r3, #27
 80015f6:	d411      	bmi.n	800161c <__swsetup_r+0x50>
 80015f8:	2309      	movs	r3, #9
 80015fa:	6033      	str	r3, [r6, #0]
 80015fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001600:	81a3      	strh	r3, [r4, #12]
 8001602:	f04f 30ff 	mov.w	r0, #4294967295
 8001606:	e03e      	b.n	8001686 <__swsetup_r+0xba>
 8001608:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <__swsetup_r+0xd4>)
 800160a:	429c      	cmp	r4, r3
 800160c:	d101      	bne.n	8001612 <__swsetup_r+0x46>
 800160e:	68ac      	ldr	r4, [r5, #8]
 8001610:	e7eb      	b.n	80015ea <__swsetup_r+0x1e>
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <__swsetup_r+0xd8>)
 8001614:	429c      	cmp	r4, r3
 8001616:	bf08      	it	eq
 8001618:	68ec      	ldreq	r4, [r5, #12]
 800161a:	e7e6      	b.n	80015ea <__swsetup_r+0x1e>
 800161c:	0758      	lsls	r0, r3, #29
 800161e:	d512      	bpl.n	8001646 <__swsetup_r+0x7a>
 8001620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001622:	b141      	cbz	r1, 8001636 <__swsetup_r+0x6a>
 8001624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001628:	4299      	cmp	r1, r3
 800162a:	d002      	beq.n	8001632 <__swsetup_r+0x66>
 800162c:	4630      	mov	r0, r6
 800162e:	f000 fa59 	bl	8001ae4 <_free_r>
 8001632:	2300      	movs	r3, #0
 8001634:	6363      	str	r3, [r4, #52]	; 0x34
 8001636:	89a3      	ldrh	r3, [r4, #12]
 8001638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800163c:	81a3      	strh	r3, [r4, #12]
 800163e:	2300      	movs	r3, #0
 8001640:	6063      	str	r3, [r4, #4]
 8001642:	6923      	ldr	r3, [r4, #16]
 8001644:	6023      	str	r3, [r4, #0]
 8001646:	89a3      	ldrh	r3, [r4, #12]
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	81a3      	strh	r3, [r4, #12]
 800164e:	6923      	ldr	r3, [r4, #16]
 8001650:	b94b      	cbnz	r3, 8001666 <__swsetup_r+0x9a>
 8001652:	89a3      	ldrh	r3, [r4, #12]
 8001654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800165c:	d003      	beq.n	8001666 <__swsetup_r+0x9a>
 800165e:	4621      	mov	r1, r4
 8001660:	4630      	mov	r0, r6
 8001662:	f000 f9ff 	bl	8001a64 <__smakebuf_r>
 8001666:	89a0      	ldrh	r0, [r4, #12]
 8001668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800166c:	f010 0301 	ands.w	r3, r0, #1
 8001670:	d00a      	beq.n	8001688 <__swsetup_r+0xbc>
 8001672:	2300      	movs	r3, #0
 8001674:	60a3      	str	r3, [r4, #8]
 8001676:	6963      	ldr	r3, [r4, #20]
 8001678:	425b      	negs	r3, r3
 800167a:	61a3      	str	r3, [r4, #24]
 800167c:	6923      	ldr	r3, [r4, #16]
 800167e:	b943      	cbnz	r3, 8001692 <__swsetup_r+0xc6>
 8001680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001684:	d1ba      	bne.n	80015fc <__swsetup_r+0x30>
 8001686:	bd70      	pop	{r4, r5, r6, pc}
 8001688:	0781      	lsls	r1, r0, #30
 800168a:	bf58      	it	pl
 800168c:	6963      	ldrpl	r3, [r4, #20]
 800168e:	60a3      	str	r3, [r4, #8]
 8001690:	e7f4      	b.n	800167c <__swsetup_r+0xb0>
 8001692:	2000      	movs	r0, #0
 8001694:	e7f7      	b.n	8001686 <__swsetup_r+0xba>
 8001696:	bf00      	nop
 8001698:	24000010 	.word	0x24000010
 800169c:	08001e28 	.word	0x08001e28
 80016a0:	08001e48 	.word	0x08001e48
 80016a4:	08001e08 	.word	0x08001e08

080016a8 <__sflush_r>:
 80016a8:	898a      	ldrh	r2, [r1, #12]
 80016aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016ae:	4605      	mov	r5, r0
 80016b0:	0710      	lsls	r0, r2, #28
 80016b2:	460c      	mov	r4, r1
 80016b4:	d458      	bmi.n	8001768 <__sflush_r+0xc0>
 80016b6:	684b      	ldr	r3, [r1, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	dc05      	bgt.n	80016c8 <__sflush_r+0x20>
 80016bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016be:	2b00      	cmp	r3, #0
 80016c0:	dc02      	bgt.n	80016c8 <__sflush_r+0x20>
 80016c2:	2000      	movs	r0, #0
 80016c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016ca:	2e00      	cmp	r6, #0
 80016cc:	d0f9      	beq.n	80016c2 <__sflush_r+0x1a>
 80016ce:	2300      	movs	r3, #0
 80016d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80016d4:	682f      	ldr	r7, [r5, #0]
 80016d6:	602b      	str	r3, [r5, #0]
 80016d8:	d032      	beq.n	8001740 <__sflush_r+0x98>
 80016da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016dc:	89a3      	ldrh	r3, [r4, #12]
 80016de:	075a      	lsls	r2, r3, #29
 80016e0:	d505      	bpl.n	80016ee <__sflush_r+0x46>
 80016e2:	6863      	ldr	r3, [r4, #4]
 80016e4:	1ac0      	subs	r0, r0, r3
 80016e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016e8:	b10b      	cbz	r3, 80016ee <__sflush_r+0x46>
 80016ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016ec:	1ac0      	subs	r0, r0, r3
 80016ee:	2300      	movs	r3, #0
 80016f0:	4602      	mov	r2, r0
 80016f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016f4:	6a21      	ldr	r1, [r4, #32]
 80016f6:	4628      	mov	r0, r5
 80016f8:	47b0      	blx	r6
 80016fa:	1c43      	adds	r3, r0, #1
 80016fc:	89a3      	ldrh	r3, [r4, #12]
 80016fe:	d106      	bne.n	800170e <__sflush_r+0x66>
 8001700:	6829      	ldr	r1, [r5, #0]
 8001702:	291d      	cmp	r1, #29
 8001704:	d82c      	bhi.n	8001760 <__sflush_r+0xb8>
 8001706:	4a2a      	ldr	r2, [pc, #168]	; (80017b0 <__sflush_r+0x108>)
 8001708:	40ca      	lsrs	r2, r1
 800170a:	07d6      	lsls	r6, r2, #31
 800170c:	d528      	bpl.n	8001760 <__sflush_r+0xb8>
 800170e:	2200      	movs	r2, #0
 8001710:	6062      	str	r2, [r4, #4]
 8001712:	04d9      	lsls	r1, r3, #19
 8001714:	6922      	ldr	r2, [r4, #16]
 8001716:	6022      	str	r2, [r4, #0]
 8001718:	d504      	bpl.n	8001724 <__sflush_r+0x7c>
 800171a:	1c42      	adds	r2, r0, #1
 800171c:	d101      	bne.n	8001722 <__sflush_r+0x7a>
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	b903      	cbnz	r3, 8001724 <__sflush_r+0x7c>
 8001722:	6560      	str	r0, [r4, #84]	; 0x54
 8001724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001726:	602f      	str	r7, [r5, #0]
 8001728:	2900      	cmp	r1, #0
 800172a:	d0ca      	beq.n	80016c2 <__sflush_r+0x1a>
 800172c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001730:	4299      	cmp	r1, r3
 8001732:	d002      	beq.n	800173a <__sflush_r+0x92>
 8001734:	4628      	mov	r0, r5
 8001736:	f000 f9d5 	bl	8001ae4 <_free_r>
 800173a:	2000      	movs	r0, #0
 800173c:	6360      	str	r0, [r4, #52]	; 0x34
 800173e:	e7c1      	b.n	80016c4 <__sflush_r+0x1c>
 8001740:	6a21      	ldr	r1, [r4, #32]
 8001742:	2301      	movs	r3, #1
 8001744:	4628      	mov	r0, r5
 8001746:	47b0      	blx	r6
 8001748:	1c41      	adds	r1, r0, #1
 800174a:	d1c7      	bne.n	80016dc <__sflush_r+0x34>
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0c4      	beq.n	80016dc <__sflush_r+0x34>
 8001752:	2b1d      	cmp	r3, #29
 8001754:	d001      	beq.n	800175a <__sflush_r+0xb2>
 8001756:	2b16      	cmp	r3, #22
 8001758:	d101      	bne.n	800175e <__sflush_r+0xb6>
 800175a:	602f      	str	r7, [r5, #0]
 800175c:	e7b1      	b.n	80016c2 <__sflush_r+0x1a>
 800175e:	89a3      	ldrh	r3, [r4, #12]
 8001760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001764:	81a3      	strh	r3, [r4, #12]
 8001766:	e7ad      	b.n	80016c4 <__sflush_r+0x1c>
 8001768:	690f      	ldr	r7, [r1, #16]
 800176a:	2f00      	cmp	r7, #0
 800176c:	d0a9      	beq.n	80016c2 <__sflush_r+0x1a>
 800176e:	0793      	lsls	r3, r2, #30
 8001770:	680e      	ldr	r6, [r1, #0]
 8001772:	bf08      	it	eq
 8001774:	694b      	ldreq	r3, [r1, #20]
 8001776:	600f      	str	r7, [r1, #0]
 8001778:	bf18      	it	ne
 800177a:	2300      	movne	r3, #0
 800177c:	eba6 0807 	sub.w	r8, r6, r7
 8001780:	608b      	str	r3, [r1, #8]
 8001782:	f1b8 0f00 	cmp.w	r8, #0
 8001786:	dd9c      	ble.n	80016c2 <__sflush_r+0x1a>
 8001788:	6a21      	ldr	r1, [r4, #32]
 800178a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800178c:	4643      	mov	r3, r8
 800178e:	463a      	mov	r2, r7
 8001790:	4628      	mov	r0, r5
 8001792:	47b0      	blx	r6
 8001794:	2800      	cmp	r0, #0
 8001796:	dc06      	bgt.n	80017a6 <__sflush_r+0xfe>
 8001798:	89a3      	ldrh	r3, [r4, #12]
 800179a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800179e:	81a3      	strh	r3, [r4, #12]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	e78e      	b.n	80016c4 <__sflush_r+0x1c>
 80017a6:	4407      	add	r7, r0
 80017a8:	eba8 0800 	sub.w	r8, r8, r0
 80017ac:	e7e9      	b.n	8001782 <__sflush_r+0xda>
 80017ae:	bf00      	nop
 80017b0:	20400001 	.word	0x20400001

080017b4 <_fflush_r>:
 80017b4:	b538      	push	{r3, r4, r5, lr}
 80017b6:	690b      	ldr	r3, [r1, #16]
 80017b8:	4605      	mov	r5, r0
 80017ba:	460c      	mov	r4, r1
 80017bc:	b913      	cbnz	r3, 80017c4 <_fflush_r+0x10>
 80017be:	2500      	movs	r5, #0
 80017c0:	4628      	mov	r0, r5
 80017c2:	bd38      	pop	{r3, r4, r5, pc}
 80017c4:	b118      	cbz	r0, 80017ce <_fflush_r+0x1a>
 80017c6:	6983      	ldr	r3, [r0, #24]
 80017c8:	b90b      	cbnz	r3, 80017ce <_fflush_r+0x1a>
 80017ca:	f000 f887 	bl	80018dc <__sinit>
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <_fflush_r+0x6c>)
 80017d0:	429c      	cmp	r4, r3
 80017d2:	d11b      	bne.n	800180c <_fflush_r+0x58>
 80017d4:	686c      	ldr	r4, [r5, #4]
 80017d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0ef      	beq.n	80017be <_fflush_r+0xa>
 80017de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80017e0:	07d0      	lsls	r0, r2, #31
 80017e2:	d404      	bmi.n	80017ee <_fflush_r+0x3a>
 80017e4:	0599      	lsls	r1, r3, #22
 80017e6:	d402      	bmi.n	80017ee <_fflush_r+0x3a>
 80017e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017ea:	f000 f915 	bl	8001a18 <__retarget_lock_acquire_recursive>
 80017ee:	4628      	mov	r0, r5
 80017f0:	4621      	mov	r1, r4
 80017f2:	f7ff ff59 	bl	80016a8 <__sflush_r>
 80017f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017f8:	07da      	lsls	r2, r3, #31
 80017fa:	4605      	mov	r5, r0
 80017fc:	d4e0      	bmi.n	80017c0 <_fflush_r+0xc>
 80017fe:	89a3      	ldrh	r3, [r4, #12]
 8001800:	059b      	lsls	r3, r3, #22
 8001802:	d4dd      	bmi.n	80017c0 <_fflush_r+0xc>
 8001804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001806:	f000 f908 	bl	8001a1a <__retarget_lock_release_recursive>
 800180a:	e7d9      	b.n	80017c0 <_fflush_r+0xc>
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <_fflush_r+0x70>)
 800180e:	429c      	cmp	r4, r3
 8001810:	d101      	bne.n	8001816 <_fflush_r+0x62>
 8001812:	68ac      	ldr	r4, [r5, #8]
 8001814:	e7df      	b.n	80017d6 <_fflush_r+0x22>
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <_fflush_r+0x74>)
 8001818:	429c      	cmp	r4, r3
 800181a:	bf08      	it	eq
 800181c:	68ec      	ldreq	r4, [r5, #12]
 800181e:	e7da      	b.n	80017d6 <_fflush_r+0x22>
 8001820:	08001e28 	.word	0x08001e28
 8001824:	08001e48 	.word	0x08001e48
 8001828:	08001e08 	.word	0x08001e08

0800182c <std>:
 800182c:	2300      	movs	r3, #0
 800182e:	b510      	push	{r4, lr}
 8001830:	4604      	mov	r4, r0
 8001832:	e9c0 3300 	strd	r3, r3, [r0]
 8001836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800183a:	6083      	str	r3, [r0, #8]
 800183c:	8181      	strh	r1, [r0, #12]
 800183e:	6643      	str	r3, [r0, #100]	; 0x64
 8001840:	81c2      	strh	r2, [r0, #14]
 8001842:	6183      	str	r3, [r0, #24]
 8001844:	4619      	mov	r1, r3
 8001846:	2208      	movs	r2, #8
 8001848:	305c      	adds	r0, #92	; 0x5c
 800184a:	f7ff fdef 	bl	800142c <memset>
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <std+0x38>)
 8001850:	6263      	str	r3, [r4, #36]	; 0x24
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <std+0x3c>)
 8001854:	62a3      	str	r3, [r4, #40]	; 0x28
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <std+0x40>)
 8001858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <std+0x44>)
 800185c:	6224      	str	r4, [r4, #32]
 800185e:	6323      	str	r3, [r4, #48]	; 0x30
 8001860:	bd10      	pop	{r4, pc}
 8001862:	bf00      	nop
 8001864:	08001c59 	.word	0x08001c59
 8001868:	08001c7b 	.word	0x08001c7b
 800186c:	08001cb3 	.word	0x08001cb3
 8001870:	08001cd7 	.word	0x08001cd7

08001874 <_cleanup_r>:
 8001874:	4901      	ldr	r1, [pc, #4]	; (800187c <_cleanup_r+0x8>)
 8001876:	f000 b8af 	b.w	80019d8 <_fwalk_reent>
 800187a:	bf00      	nop
 800187c:	080017b5 	.word	0x080017b5

08001880 <__sfmoreglue>:
 8001880:	b570      	push	{r4, r5, r6, lr}
 8001882:	1e4a      	subs	r2, r1, #1
 8001884:	2568      	movs	r5, #104	; 0x68
 8001886:	4355      	muls	r5, r2
 8001888:	460e      	mov	r6, r1
 800188a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800188e:	f000 f979 	bl	8001b84 <_malloc_r>
 8001892:	4604      	mov	r4, r0
 8001894:	b140      	cbz	r0, 80018a8 <__sfmoreglue+0x28>
 8001896:	2100      	movs	r1, #0
 8001898:	e9c0 1600 	strd	r1, r6, [r0]
 800189c:	300c      	adds	r0, #12
 800189e:	60a0      	str	r0, [r4, #8]
 80018a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018a4:	f7ff fdc2 	bl	800142c <memset>
 80018a8:	4620      	mov	r0, r4
 80018aa:	bd70      	pop	{r4, r5, r6, pc}

080018ac <__sfp_lock_acquire>:
 80018ac:	4801      	ldr	r0, [pc, #4]	; (80018b4 <__sfp_lock_acquire+0x8>)
 80018ae:	f000 b8b3 	b.w	8001a18 <__retarget_lock_acquire_recursive>
 80018b2:	bf00      	nop
 80018b4:	240000a8 	.word	0x240000a8

080018b8 <__sfp_lock_release>:
 80018b8:	4801      	ldr	r0, [pc, #4]	; (80018c0 <__sfp_lock_release+0x8>)
 80018ba:	f000 b8ae 	b.w	8001a1a <__retarget_lock_release_recursive>
 80018be:	bf00      	nop
 80018c0:	240000a8 	.word	0x240000a8

080018c4 <__sinit_lock_acquire>:
 80018c4:	4801      	ldr	r0, [pc, #4]	; (80018cc <__sinit_lock_acquire+0x8>)
 80018c6:	f000 b8a7 	b.w	8001a18 <__retarget_lock_acquire_recursive>
 80018ca:	bf00      	nop
 80018cc:	240000a3 	.word	0x240000a3

080018d0 <__sinit_lock_release>:
 80018d0:	4801      	ldr	r0, [pc, #4]	; (80018d8 <__sinit_lock_release+0x8>)
 80018d2:	f000 b8a2 	b.w	8001a1a <__retarget_lock_release_recursive>
 80018d6:	bf00      	nop
 80018d8:	240000a3 	.word	0x240000a3

080018dc <__sinit>:
 80018dc:	b510      	push	{r4, lr}
 80018de:	4604      	mov	r4, r0
 80018e0:	f7ff fff0 	bl	80018c4 <__sinit_lock_acquire>
 80018e4:	69a3      	ldr	r3, [r4, #24]
 80018e6:	b11b      	cbz	r3, 80018f0 <__sinit+0x14>
 80018e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018ec:	f7ff bff0 	b.w	80018d0 <__sinit_lock_release>
 80018f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80018f4:	6523      	str	r3, [r4, #80]	; 0x50
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <__sinit+0x68>)
 80018f8:	4a13      	ldr	r2, [pc, #76]	; (8001948 <__sinit+0x6c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80018fe:	42a3      	cmp	r3, r4
 8001900:	bf04      	itt	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	61a3      	streq	r3, [r4, #24]
 8001906:	4620      	mov	r0, r4
 8001908:	f000 f820 	bl	800194c <__sfp>
 800190c:	6060      	str	r0, [r4, #4]
 800190e:	4620      	mov	r0, r4
 8001910:	f000 f81c 	bl	800194c <__sfp>
 8001914:	60a0      	str	r0, [r4, #8]
 8001916:	4620      	mov	r0, r4
 8001918:	f000 f818 	bl	800194c <__sfp>
 800191c:	2200      	movs	r2, #0
 800191e:	60e0      	str	r0, [r4, #12]
 8001920:	2104      	movs	r1, #4
 8001922:	6860      	ldr	r0, [r4, #4]
 8001924:	f7ff ff82 	bl	800182c <std>
 8001928:	68a0      	ldr	r0, [r4, #8]
 800192a:	2201      	movs	r2, #1
 800192c:	2109      	movs	r1, #9
 800192e:	f7ff ff7d 	bl	800182c <std>
 8001932:	68e0      	ldr	r0, [r4, #12]
 8001934:	2202      	movs	r2, #2
 8001936:	2112      	movs	r1, #18
 8001938:	f7ff ff78 	bl	800182c <std>
 800193c:	2301      	movs	r3, #1
 800193e:	61a3      	str	r3, [r4, #24]
 8001940:	e7d2      	b.n	80018e8 <__sinit+0xc>
 8001942:	bf00      	nop
 8001944:	08001e04 	.word	0x08001e04
 8001948:	08001875 	.word	0x08001875

0800194c <__sfp>:
 800194c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194e:	4607      	mov	r7, r0
 8001950:	f7ff ffac 	bl	80018ac <__sfp_lock_acquire>
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <__sfp+0x84>)
 8001956:	681e      	ldr	r6, [r3, #0]
 8001958:	69b3      	ldr	r3, [r6, #24]
 800195a:	b913      	cbnz	r3, 8001962 <__sfp+0x16>
 800195c:	4630      	mov	r0, r6
 800195e:	f7ff ffbd 	bl	80018dc <__sinit>
 8001962:	3648      	adds	r6, #72	; 0x48
 8001964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001968:	3b01      	subs	r3, #1
 800196a:	d503      	bpl.n	8001974 <__sfp+0x28>
 800196c:	6833      	ldr	r3, [r6, #0]
 800196e:	b30b      	cbz	r3, 80019b4 <__sfp+0x68>
 8001970:	6836      	ldr	r6, [r6, #0]
 8001972:	e7f7      	b.n	8001964 <__sfp+0x18>
 8001974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001978:	b9d5      	cbnz	r5, 80019b0 <__sfp+0x64>
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <__sfp+0x88>)
 800197c:	60e3      	str	r3, [r4, #12]
 800197e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001982:	6665      	str	r5, [r4, #100]	; 0x64
 8001984:	f000 f847 	bl	8001a16 <__retarget_lock_init_recursive>
 8001988:	f7ff ff96 	bl	80018b8 <__sfp_lock_release>
 800198c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001994:	6025      	str	r5, [r4, #0]
 8001996:	61a5      	str	r5, [r4, #24]
 8001998:	2208      	movs	r2, #8
 800199a:	4629      	mov	r1, r5
 800199c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80019a0:	f7ff fd44 	bl	800142c <memset>
 80019a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80019a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80019ac:	4620      	mov	r0, r4
 80019ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019b0:	3468      	adds	r4, #104	; 0x68
 80019b2:	e7d9      	b.n	8001968 <__sfp+0x1c>
 80019b4:	2104      	movs	r1, #4
 80019b6:	4638      	mov	r0, r7
 80019b8:	f7ff ff62 	bl	8001880 <__sfmoreglue>
 80019bc:	4604      	mov	r4, r0
 80019be:	6030      	str	r0, [r6, #0]
 80019c0:	2800      	cmp	r0, #0
 80019c2:	d1d5      	bne.n	8001970 <__sfp+0x24>
 80019c4:	f7ff ff78 	bl	80018b8 <__sfp_lock_release>
 80019c8:	230c      	movs	r3, #12
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	e7ee      	b.n	80019ac <__sfp+0x60>
 80019ce:	bf00      	nop
 80019d0:	08001e04 	.word	0x08001e04
 80019d4:	ffff0001 	.word	0xffff0001

080019d8 <_fwalk_reent>:
 80019d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019dc:	4606      	mov	r6, r0
 80019de:	4688      	mov	r8, r1
 80019e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80019e4:	2700      	movs	r7, #0
 80019e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019ea:	f1b9 0901 	subs.w	r9, r9, #1
 80019ee:	d505      	bpl.n	80019fc <_fwalk_reent+0x24>
 80019f0:	6824      	ldr	r4, [r4, #0]
 80019f2:	2c00      	cmp	r4, #0
 80019f4:	d1f7      	bne.n	80019e6 <_fwalk_reent+0xe>
 80019f6:	4638      	mov	r0, r7
 80019f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019fc:	89ab      	ldrh	r3, [r5, #12]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d907      	bls.n	8001a12 <_fwalk_reent+0x3a>
 8001a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a06:	3301      	adds	r3, #1
 8001a08:	d003      	beq.n	8001a12 <_fwalk_reent+0x3a>
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	4630      	mov	r0, r6
 8001a0e:	47c0      	blx	r8
 8001a10:	4307      	orrs	r7, r0
 8001a12:	3568      	adds	r5, #104	; 0x68
 8001a14:	e7e9      	b.n	80019ea <_fwalk_reent+0x12>

08001a16 <__retarget_lock_init_recursive>:
 8001a16:	4770      	bx	lr

08001a18 <__retarget_lock_acquire_recursive>:
 8001a18:	4770      	bx	lr

08001a1a <__retarget_lock_release_recursive>:
 8001a1a:	4770      	bx	lr

08001a1c <__swhatbuf_r>:
 8001a1c:	b570      	push	{r4, r5, r6, lr}
 8001a1e:	460e      	mov	r6, r1
 8001a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a24:	2900      	cmp	r1, #0
 8001a26:	b096      	sub	sp, #88	; 0x58
 8001a28:	4614      	mov	r4, r2
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	da07      	bge.n	8001a3e <__swhatbuf_r+0x22>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	602b      	str	r3, [r5, #0]
 8001a32:	89b3      	ldrh	r3, [r6, #12]
 8001a34:	061a      	lsls	r2, r3, #24
 8001a36:	d410      	bmi.n	8001a5a <__swhatbuf_r+0x3e>
 8001a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a3c:	e00e      	b.n	8001a5c <__swhatbuf_r+0x40>
 8001a3e:	466a      	mov	r2, sp
 8001a40:	f000 f970 	bl	8001d24 <_fstat_r>
 8001a44:	2800      	cmp	r0, #0
 8001a46:	dbf2      	blt.n	8001a2e <__swhatbuf_r+0x12>
 8001a48:	9a01      	ldr	r2, [sp, #4]
 8001a4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a52:	425a      	negs	r2, r3
 8001a54:	415a      	adcs	r2, r3
 8001a56:	602a      	str	r2, [r5, #0]
 8001a58:	e7ee      	b.n	8001a38 <__swhatbuf_r+0x1c>
 8001a5a:	2340      	movs	r3, #64	; 0x40
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	6023      	str	r3, [r4, #0]
 8001a60:	b016      	add	sp, #88	; 0x58
 8001a62:	bd70      	pop	{r4, r5, r6, pc}

08001a64 <__smakebuf_r>:
 8001a64:	898b      	ldrh	r3, [r1, #12]
 8001a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a68:	079d      	lsls	r5, r3, #30
 8001a6a:	4606      	mov	r6, r0
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	d507      	bpl.n	8001a80 <__smakebuf_r+0x1c>
 8001a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a74:	6023      	str	r3, [r4, #0]
 8001a76:	6123      	str	r3, [r4, #16]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	6163      	str	r3, [r4, #20]
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd70      	pop	{r4, r5, r6, pc}
 8001a80:	ab01      	add	r3, sp, #4
 8001a82:	466a      	mov	r2, sp
 8001a84:	f7ff ffca 	bl	8001a1c <__swhatbuf_r>
 8001a88:	9900      	ldr	r1, [sp, #0]
 8001a8a:	4605      	mov	r5, r0
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f000 f879 	bl	8001b84 <_malloc_r>
 8001a92:	b948      	cbnz	r0, 8001aa8 <__smakebuf_r+0x44>
 8001a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a98:	059a      	lsls	r2, r3, #22
 8001a9a:	d4ef      	bmi.n	8001a7c <__smakebuf_r+0x18>
 8001a9c:	f023 0303 	bic.w	r3, r3, #3
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	81a3      	strh	r3, [r4, #12]
 8001aa6:	e7e3      	b.n	8001a70 <__smakebuf_r+0xc>
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <__smakebuf_r+0x7c>)
 8001aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8001aac:	89a3      	ldrh	r3, [r4, #12]
 8001aae:	6020      	str	r0, [r4, #0]
 8001ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab4:	81a3      	strh	r3, [r4, #12]
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	6163      	str	r3, [r4, #20]
 8001aba:	9b01      	ldr	r3, [sp, #4]
 8001abc:	6120      	str	r0, [r4, #16]
 8001abe:	b15b      	cbz	r3, 8001ad8 <__smakebuf_r+0x74>
 8001ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	f000 f93f 	bl	8001d48 <_isatty_r>
 8001aca:	b128      	cbz	r0, 8001ad8 <__smakebuf_r+0x74>
 8001acc:	89a3      	ldrh	r3, [r4, #12]
 8001ace:	f023 0303 	bic.w	r3, r3, #3
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	81a3      	strh	r3, [r4, #12]
 8001ad8:	89a0      	ldrh	r0, [r4, #12]
 8001ada:	4305      	orrs	r5, r0
 8001adc:	81a5      	strh	r5, [r4, #12]
 8001ade:	e7cd      	b.n	8001a7c <__smakebuf_r+0x18>
 8001ae0:	08001875 	.word	0x08001875

08001ae4 <_free_r>:
 8001ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ae6:	2900      	cmp	r1, #0
 8001ae8:	d048      	beq.n	8001b7c <_free_r+0x98>
 8001aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001aee:	9001      	str	r0, [sp, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f1a1 0404 	sub.w	r4, r1, #4
 8001af6:	bfb8      	it	lt
 8001af8:	18e4      	addlt	r4, r4, r3
 8001afa:	f000 f947 	bl	8001d8c <__malloc_lock>
 8001afe:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <_free_r+0x9c>)
 8001b00:	9801      	ldr	r0, [sp, #4]
 8001b02:	6813      	ldr	r3, [r2, #0]
 8001b04:	4615      	mov	r5, r2
 8001b06:	b933      	cbnz	r3, 8001b16 <_free_r+0x32>
 8001b08:	6063      	str	r3, [r4, #4]
 8001b0a:	6014      	str	r4, [r2, #0]
 8001b0c:	b003      	add	sp, #12
 8001b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b12:	f000 b941 	b.w	8001d98 <__malloc_unlock>
 8001b16:	42a3      	cmp	r3, r4
 8001b18:	d90b      	bls.n	8001b32 <_free_r+0x4e>
 8001b1a:	6821      	ldr	r1, [r4, #0]
 8001b1c:	1862      	adds	r2, r4, r1
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	bf04      	itt	eq
 8001b22:	681a      	ldreq	r2, [r3, #0]
 8001b24:	685b      	ldreq	r3, [r3, #4]
 8001b26:	6063      	str	r3, [r4, #4]
 8001b28:	bf04      	itt	eq
 8001b2a:	1852      	addeq	r2, r2, r1
 8001b2c:	6022      	streq	r2, [r4, #0]
 8001b2e:	602c      	str	r4, [r5, #0]
 8001b30:	e7ec      	b.n	8001b0c <_free_r+0x28>
 8001b32:	461a      	mov	r2, r3
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	b10b      	cbz	r3, 8001b3c <_free_r+0x58>
 8001b38:	42a3      	cmp	r3, r4
 8001b3a:	d9fa      	bls.n	8001b32 <_free_r+0x4e>
 8001b3c:	6811      	ldr	r1, [r2, #0]
 8001b3e:	1855      	adds	r5, r2, r1
 8001b40:	42a5      	cmp	r5, r4
 8001b42:	d10b      	bne.n	8001b5c <_free_r+0x78>
 8001b44:	6824      	ldr	r4, [r4, #0]
 8001b46:	4421      	add	r1, r4
 8001b48:	1854      	adds	r4, r2, r1
 8001b4a:	42a3      	cmp	r3, r4
 8001b4c:	6011      	str	r1, [r2, #0]
 8001b4e:	d1dd      	bne.n	8001b0c <_free_r+0x28>
 8001b50:	681c      	ldr	r4, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	6053      	str	r3, [r2, #4]
 8001b56:	4421      	add	r1, r4
 8001b58:	6011      	str	r1, [r2, #0]
 8001b5a:	e7d7      	b.n	8001b0c <_free_r+0x28>
 8001b5c:	d902      	bls.n	8001b64 <_free_r+0x80>
 8001b5e:	230c      	movs	r3, #12
 8001b60:	6003      	str	r3, [r0, #0]
 8001b62:	e7d3      	b.n	8001b0c <_free_r+0x28>
 8001b64:	6825      	ldr	r5, [r4, #0]
 8001b66:	1961      	adds	r1, r4, r5
 8001b68:	428b      	cmp	r3, r1
 8001b6a:	bf04      	itt	eq
 8001b6c:	6819      	ldreq	r1, [r3, #0]
 8001b6e:	685b      	ldreq	r3, [r3, #4]
 8001b70:	6063      	str	r3, [r4, #4]
 8001b72:	bf04      	itt	eq
 8001b74:	1949      	addeq	r1, r1, r5
 8001b76:	6021      	streq	r1, [r4, #0]
 8001b78:	6054      	str	r4, [r2, #4]
 8001b7a:	e7c7      	b.n	8001b0c <_free_r+0x28>
 8001b7c:	b003      	add	sp, #12
 8001b7e:	bd30      	pop	{r4, r5, pc}
 8001b80:	24000094 	.word	0x24000094

08001b84 <_malloc_r>:
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b86:	1ccd      	adds	r5, r1, #3
 8001b88:	f025 0503 	bic.w	r5, r5, #3
 8001b8c:	3508      	adds	r5, #8
 8001b8e:	2d0c      	cmp	r5, #12
 8001b90:	bf38      	it	cc
 8001b92:	250c      	movcc	r5, #12
 8001b94:	2d00      	cmp	r5, #0
 8001b96:	4606      	mov	r6, r0
 8001b98:	db01      	blt.n	8001b9e <_malloc_r+0x1a>
 8001b9a:	42a9      	cmp	r1, r5
 8001b9c:	d903      	bls.n	8001ba6 <_malloc_r+0x22>
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	6033      	str	r3, [r6, #0]
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ba6:	f000 f8f1 	bl	8001d8c <__malloc_lock>
 8001baa:	4921      	ldr	r1, [pc, #132]	; (8001c30 <_malloc_r+0xac>)
 8001bac:	680a      	ldr	r2, [r1, #0]
 8001bae:	4614      	mov	r4, r2
 8001bb0:	b99c      	cbnz	r4, 8001bda <_malloc_r+0x56>
 8001bb2:	4f20      	ldr	r7, [pc, #128]	; (8001c34 <_malloc_r+0xb0>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b923      	cbnz	r3, 8001bc2 <_malloc_r+0x3e>
 8001bb8:	4621      	mov	r1, r4
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f000 f83c 	bl	8001c38 <_sbrk_r>
 8001bc0:	6038      	str	r0, [r7, #0]
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	f000 f837 	bl	8001c38 <_sbrk_r>
 8001bca:	1c43      	adds	r3, r0, #1
 8001bcc:	d123      	bne.n	8001c16 <_malloc_r+0x92>
 8001bce:	230c      	movs	r3, #12
 8001bd0:	6033      	str	r3, [r6, #0]
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	f000 f8e0 	bl	8001d98 <__malloc_unlock>
 8001bd8:	e7e3      	b.n	8001ba2 <_malloc_r+0x1e>
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	1b5b      	subs	r3, r3, r5
 8001bde:	d417      	bmi.n	8001c10 <_malloc_r+0x8c>
 8001be0:	2b0b      	cmp	r3, #11
 8001be2:	d903      	bls.n	8001bec <_malloc_r+0x68>
 8001be4:	6023      	str	r3, [r4, #0]
 8001be6:	441c      	add	r4, r3
 8001be8:	6025      	str	r5, [r4, #0]
 8001bea:	e004      	b.n	8001bf6 <_malloc_r+0x72>
 8001bec:	6863      	ldr	r3, [r4, #4]
 8001bee:	42a2      	cmp	r2, r4
 8001bf0:	bf0c      	ite	eq
 8001bf2:	600b      	streq	r3, [r1, #0]
 8001bf4:	6053      	strne	r3, [r2, #4]
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	f000 f8ce 	bl	8001d98 <__malloc_unlock>
 8001bfc:	f104 000b 	add.w	r0, r4, #11
 8001c00:	1d23      	adds	r3, r4, #4
 8001c02:	f020 0007 	bic.w	r0, r0, #7
 8001c06:	1ac2      	subs	r2, r0, r3
 8001c08:	d0cc      	beq.n	8001ba4 <_malloc_r+0x20>
 8001c0a:	1a1b      	subs	r3, r3, r0
 8001c0c:	50a3      	str	r3, [r4, r2]
 8001c0e:	e7c9      	b.n	8001ba4 <_malloc_r+0x20>
 8001c10:	4622      	mov	r2, r4
 8001c12:	6864      	ldr	r4, [r4, #4]
 8001c14:	e7cc      	b.n	8001bb0 <_malloc_r+0x2c>
 8001c16:	1cc4      	adds	r4, r0, #3
 8001c18:	f024 0403 	bic.w	r4, r4, #3
 8001c1c:	42a0      	cmp	r0, r4
 8001c1e:	d0e3      	beq.n	8001be8 <_malloc_r+0x64>
 8001c20:	1a21      	subs	r1, r4, r0
 8001c22:	4630      	mov	r0, r6
 8001c24:	f000 f808 	bl	8001c38 <_sbrk_r>
 8001c28:	3001      	adds	r0, #1
 8001c2a:	d1dd      	bne.n	8001be8 <_malloc_r+0x64>
 8001c2c:	e7cf      	b.n	8001bce <_malloc_r+0x4a>
 8001c2e:	bf00      	nop
 8001c30:	24000094 	.word	0x24000094
 8001c34:	24000098 	.word	0x24000098

08001c38 <_sbrk_r>:
 8001c38:	b538      	push	{r3, r4, r5, lr}
 8001c3a:	4d06      	ldr	r5, [pc, #24]	; (8001c54 <_sbrk_r+0x1c>)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	4604      	mov	r4, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	602b      	str	r3, [r5, #0]
 8001c44:	f7fe fc24 	bl	8000490 <_sbrk>
 8001c48:	1c43      	adds	r3, r0, #1
 8001c4a:	d102      	bne.n	8001c52 <_sbrk_r+0x1a>
 8001c4c:	682b      	ldr	r3, [r5, #0]
 8001c4e:	b103      	cbz	r3, 8001c52 <_sbrk_r+0x1a>
 8001c50:	6023      	str	r3, [r4, #0]
 8001c52:	bd38      	pop	{r3, r4, r5, pc}
 8001c54:	240000ac 	.word	0x240000ac

08001c58 <__sread>:
 8001c58:	b510      	push	{r4, lr}
 8001c5a:	460c      	mov	r4, r1
 8001c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c60:	f000 f8a0 	bl	8001da4 <_read_r>
 8001c64:	2800      	cmp	r0, #0
 8001c66:	bfab      	itete	ge
 8001c68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8001c6c:	181b      	addge	r3, r3, r0
 8001c6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c72:	bfac      	ite	ge
 8001c74:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c76:	81a3      	strhlt	r3, [r4, #12]
 8001c78:	bd10      	pop	{r4, pc}

08001c7a <__swrite>:
 8001c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7e:	461f      	mov	r7, r3
 8001c80:	898b      	ldrh	r3, [r1, #12]
 8001c82:	05db      	lsls	r3, r3, #23
 8001c84:	4605      	mov	r5, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	4616      	mov	r6, r2
 8001c8a:	d505      	bpl.n	8001c98 <__swrite+0x1e>
 8001c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c90:	2302      	movs	r3, #2
 8001c92:	2200      	movs	r2, #0
 8001c94:	f000 f868 	bl	8001d68 <_lseek_r>
 8001c98:	89a3      	ldrh	r3, [r4, #12]
 8001c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ca2:	81a3      	strh	r3, [r4, #12]
 8001ca4:	4632      	mov	r2, r6
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	4628      	mov	r0, r5
 8001caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cae:	f000 b817 	b.w	8001ce0 <_write_r>

08001cb2 <__sseek>:
 8001cb2:	b510      	push	{r4, lr}
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cba:	f000 f855 	bl	8001d68 <_lseek_r>
 8001cbe:	1c43      	adds	r3, r0, #1
 8001cc0:	89a3      	ldrh	r3, [r4, #12]
 8001cc2:	bf15      	itete	ne
 8001cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001cce:	81a3      	strheq	r3, [r4, #12]
 8001cd0:	bf18      	it	ne
 8001cd2:	81a3      	strhne	r3, [r4, #12]
 8001cd4:	bd10      	pop	{r4, pc}

08001cd6 <__sclose>:
 8001cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cda:	f000 b813 	b.w	8001d04 <_close_r>
	...

08001ce0 <_write_r>:
 8001ce0:	b538      	push	{r3, r4, r5, lr}
 8001ce2:	4d07      	ldr	r5, [pc, #28]	; (8001d00 <_write_r+0x20>)
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	4608      	mov	r0, r1
 8001ce8:	4611      	mov	r1, r2
 8001cea:	2200      	movs	r2, #0
 8001cec:	602a      	str	r2, [r5, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f7fe fbb2 	bl	8000458 <_write>
 8001cf4:	1c43      	adds	r3, r0, #1
 8001cf6:	d102      	bne.n	8001cfe <_write_r+0x1e>
 8001cf8:	682b      	ldr	r3, [r5, #0]
 8001cfa:	b103      	cbz	r3, 8001cfe <_write_r+0x1e>
 8001cfc:	6023      	str	r3, [r4, #0]
 8001cfe:	bd38      	pop	{r3, r4, r5, pc}
 8001d00:	240000ac 	.word	0x240000ac

08001d04 <_close_r>:
 8001d04:	b538      	push	{r3, r4, r5, lr}
 8001d06:	4d06      	ldr	r5, [pc, #24]	; (8001d20 <_close_r+0x1c>)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	602b      	str	r3, [r5, #0]
 8001d10:	f7fe fbb0 	bl	8000474 <_close>
 8001d14:	1c43      	adds	r3, r0, #1
 8001d16:	d102      	bne.n	8001d1e <_close_r+0x1a>
 8001d18:	682b      	ldr	r3, [r5, #0]
 8001d1a:	b103      	cbz	r3, 8001d1e <_close_r+0x1a>
 8001d1c:	6023      	str	r3, [r4, #0]
 8001d1e:	bd38      	pop	{r3, r4, r5, pc}
 8001d20:	240000ac 	.word	0x240000ac

08001d24 <_fstat_r>:
 8001d24:	b538      	push	{r3, r4, r5, lr}
 8001d26:	4d07      	ldr	r5, [pc, #28]	; (8001d44 <_fstat_r+0x20>)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	602b      	str	r3, [r5, #0]
 8001d32:	f7fe fba3 	bl	800047c <_fstat>
 8001d36:	1c43      	adds	r3, r0, #1
 8001d38:	d102      	bne.n	8001d40 <_fstat_r+0x1c>
 8001d3a:	682b      	ldr	r3, [r5, #0]
 8001d3c:	b103      	cbz	r3, 8001d40 <_fstat_r+0x1c>
 8001d3e:	6023      	str	r3, [r4, #0]
 8001d40:	bd38      	pop	{r3, r4, r5, pc}
 8001d42:	bf00      	nop
 8001d44:	240000ac 	.word	0x240000ac

08001d48 <_isatty_r>:
 8001d48:	b538      	push	{r3, r4, r5, lr}
 8001d4a:	4d06      	ldr	r5, [pc, #24]	; (8001d64 <_isatty_r+0x1c>)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	4604      	mov	r4, r0
 8001d50:	4608      	mov	r0, r1
 8001d52:	602b      	str	r3, [r5, #0]
 8001d54:	f7fe fb98 	bl	8000488 <_isatty>
 8001d58:	1c43      	adds	r3, r0, #1
 8001d5a:	d102      	bne.n	8001d62 <_isatty_r+0x1a>
 8001d5c:	682b      	ldr	r3, [r5, #0]
 8001d5e:	b103      	cbz	r3, 8001d62 <_isatty_r+0x1a>
 8001d60:	6023      	str	r3, [r4, #0]
 8001d62:	bd38      	pop	{r3, r4, r5, pc}
 8001d64:	240000ac 	.word	0x240000ac

08001d68 <_lseek_r>:
 8001d68:	b538      	push	{r3, r4, r5, lr}
 8001d6a:	4d07      	ldr	r5, [pc, #28]	; (8001d88 <_lseek_r+0x20>)
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	4608      	mov	r0, r1
 8001d70:	4611      	mov	r1, r2
 8001d72:	2200      	movs	r2, #0
 8001d74:	602a      	str	r2, [r5, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	f7fe fb88 	bl	800048c <_lseek>
 8001d7c:	1c43      	adds	r3, r0, #1
 8001d7e:	d102      	bne.n	8001d86 <_lseek_r+0x1e>
 8001d80:	682b      	ldr	r3, [r5, #0]
 8001d82:	b103      	cbz	r3, 8001d86 <_lseek_r+0x1e>
 8001d84:	6023      	str	r3, [r4, #0]
 8001d86:	bd38      	pop	{r3, r4, r5, pc}
 8001d88:	240000ac 	.word	0x240000ac

08001d8c <__malloc_lock>:
 8001d8c:	4801      	ldr	r0, [pc, #4]	; (8001d94 <__malloc_lock+0x8>)
 8001d8e:	f7ff be43 	b.w	8001a18 <__retarget_lock_acquire_recursive>
 8001d92:	bf00      	nop
 8001d94:	240000a4 	.word	0x240000a4

08001d98 <__malloc_unlock>:
 8001d98:	4801      	ldr	r0, [pc, #4]	; (8001da0 <__malloc_unlock+0x8>)
 8001d9a:	f7ff be3e 	b.w	8001a1a <__retarget_lock_release_recursive>
 8001d9e:	bf00      	nop
 8001da0:	240000a4 	.word	0x240000a4

08001da4 <_read_r>:
 8001da4:	b538      	push	{r3, r4, r5, lr}
 8001da6:	4d07      	ldr	r5, [pc, #28]	; (8001dc4 <_read_r+0x20>)
 8001da8:	4604      	mov	r4, r0
 8001daa:	4608      	mov	r0, r1
 8001dac:	4611      	mov	r1, r2
 8001dae:	2200      	movs	r2, #0
 8001db0:	602a      	str	r2, [r5, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f7fe fb42 	bl	800043c <_read>
 8001db8:	1c43      	adds	r3, r0, #1
 8001dba:	d102      	bne.n	8001dc2 <_read_r+0x1e>
 8001dbc:	682b      	ldr	r3, [r5, #0]
 8001dbe:	b103      	cbz	r3, 8001dc2 <_read_r+0x1e>
 8001dc0:	6023      	str	r3, [r4, #0]
 8001dc2:	bd38      	pop	{r3, r4, r5, pc}
 8001dc4:	240000ac 	.word	0x240000ac

08001dc8 <_init>:
 8001dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dca:	bf00      	nop
 8001dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dce:	bc08      	pop	{r3}
 8001dd0:	469e      	mov	lr, r3
 8001dd2:	4770      	bx	lr

08001dd4 <_fini>:
 8001dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd6:	bf00      	nop
 8001dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dda:	bc08      	pop	{r3}
 8001ddc:	469e      	mov	lr, r3
 8001dde:	4770      	bx	lr
