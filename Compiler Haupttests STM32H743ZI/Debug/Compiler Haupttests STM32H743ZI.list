
Compiler Haupttests STM32H743ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08003074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000003c  24000074  080030e8  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000b0  080030e8  000200b0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f408  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001fe3  00000000  00000000  0002f4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000700  00000000  00000000  00031490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000638  00000000  00000000  00031b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003545d  00000000  00000000  000321c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00008072  00000000  00000000  00067625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014e190  00000000  00000000  0006f697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001bd827  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000023c0  00000000  00000000  001bd87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08002ef8 	.word	0x08002ef8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08002ef8 	.word	0x08002ef8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000386:	f000 faa3 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038a:	f000 f829 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038e:	f000 f891 	bl	80004b4 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 8000392:	2140      	movs	r1, #64	; 0x40
 8000394:	4810      	ldr	r0, [pc, #64]	; (80003d8 <main+0x58>)
 8000396:	f000 fde6 	bl	8000f66 <HAL_GPIO_TogglePin>
	for(int i = 0; i < 100; i++)
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	e013      	b.n	80003c8 <main+0x48>
//		Test_Matrix_Dot_Produkt();
//		Test_Switch_Case_Seq(i);
//		Test_Switch_Case_Nicht_Seq(i);
//		Test_Switch_Case_Seq(rand()%100);
//		Test_Switch_Case_Nicht_Seq(rand()%100);
		Test_Dividier_Zufaellige_Int(1 + (rand()%100));
 80003a0:	f001 fda8 	bl	8001ef4 <rand>
 80003a4:	4602      	mov	r2, r0
 80003a6:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <main+0x5c>)
 80003a8:	fb83 1302 	smull	r1, r3, r3, r2
 80003ac:	1159      	asrs	r1, r3, #5
 80003ae:	17d3      	asrs	r3, r2, #31
 80003b0:	1acb      	subs	r3, r1, r3
 80003b2:	2164      	movs	r1, #100	; 0x64
 80003b4:	fb01 f303 	mul.w	r3, r1, r3
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	3301      	adds	r3, #1
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fa49 	bl	8000854 <Test_Dividier_Zufaellige_Int>
	for(int i = 0; i < 100; i++)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3301      	adds	r3, #1
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b63      	cmp	r3, #99	; 0x63
 80003cc:	dde8      	ble.n	80003a0 <main+0x20>
//		Test_Dividier_Zufaellige_Float(1 + (rand()%100));
	}
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80003ce:	2140      	movs	r1, #64	; 0x40
 80003d0:	4801      	ldr	r0, [pc, #4]	; (80003d8 <main+0x58>)
 80003d2:	f000 fdc8 	bl	8000f66 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80003d6:	e7dc      	b.n	8000392 <main+0x12>
 80003d8:	58020800 	.word	0x58020800
 80003dc:	51eb851f 	.word	0x51eb851f

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b09c      	sub	sp, #112	; 0x70
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ea:	224c      	movs	r2, #76	; 0x4c
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fd78 	bl	8001ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2220      	movs	r2, #32
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 fd72 	bl	8001ee4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000400:	2002      	movs	r0, #2
 8000402:	f000 fdcb 	bl	8000f9c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000406:	2300      	movs	r3, #0
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	4b28      	ldr	r3, [pc, #160]	; (80004ac <SystemClock_Config+0xcc>)
 800040c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800040e:	4a27      	ldr	r2, [pc, #156]	; (80004ac <SystemClock_Config+0xcc>)
 8000410:	f023 0301 	bic.w	r3, r3, #1
 8000414:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000416:	4b25      	ldr	r3, [pc, #148]	; (80004ac <SystemClock_Config+0xcc>)
 8000418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <SystemClock_Config+0xd0>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000428:	4a21      	ldr	r2, [pc, #132]	; (80004b0 <SystemClock_Config+0xd0>)
 800042a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <SystemClock_Config+0xd0>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000438:	603b      	str	r3, [r7, #0]
 800043a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800043c:	bf00      	nop
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <SystemClock_Config+0xd0>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800044a:	d1f8      	bne.n	800043e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044c:	2302      	movs	r3, #2
 800044e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000450:	2301      	movs	r3, #1
 8000452:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000454:	2340      	movs	r3, #64	; 0x40
 8000456:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000458:	2300      	movs	r3, #0
 800045a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fdd5 	bl	8001010 <HAL_RCC_OscConfig>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800046c:	f000 f856 	bl	800051c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000470:	233f      	movs	r3, #63	; 0x3f
 8000472:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2101      	movs	r1, #1
 8000494:	4618      	mov	r0, r3
 8000496:	f001 f9cb 	bl	8001830 <HAL_RCC_ClockConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80004a0:	f000 f83c 	bl	800051c <Error_Handler>
  }
}
 80004a4:	bf00      	nop
 80004a6:	3770      	adds	r7, #112	; 0x70
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	58000400 	.word	0x58000400
 80004b0:	58024800 	.word	0x58024800

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <MX_GPIO_Init+0x60>)
 80004ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ce:	4a11      	ldr	r2, [pc, #68]	; (8000514 <MX_GPIO_Init+0x60>)
 80004d0:	f043 0304 	orr.w	r3, r3, #4
 80004d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_GPIO_Init+0x60>)
 80004da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004de:	f003 0304 	and.w	r3, r3, #4
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	480b      	ldr	r0, [pc, #44]	; (8000518 <MX_GPIO_Init+0x64>)
 80004ec:	f000 fd22 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXECUTE_PIN_Pin */
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 80004f0:	2340      	movs	r3, #64	; 0x40
 80004f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EXECUTE_PIN_GPIO_Port, &GPIO_InitStruct);
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	4619      	mov	r1, r3
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <MX_GPIO_Init+0x64>)
 8000506:	f000 fb65 	bl	8000bd4 <HAL_GPIO_Init>

}
 800050a:	bf00      	nop
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	58024400 	.word	0x58024400
 8000518:	58020800 	.word	0x58020800

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_MspInit+0x30>)
 8000530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <HAL_MspInit+0x30>)
 8000536:	f043 0302 	orr.w	r3, r3, #2
 800053a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_MspInit+0x30>)
 8000540:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000544:	f003 0302 	and.w	r3, r3, #2
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	58024400 	.word	0x58024400

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <NMI_Handler+0x4>

08000562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <HardFault_Handler+0x4>

08000568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <MemManage_Handler+0x4>

0800056e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <UsageFault_Handler+0x4>

0800057a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a8:	f000 fa04 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	return 1;
 80005b4:	2301      	movs	r3, #1
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <_kill>:

int _kill(int pid, int sig)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80005ca:	f001 fc61 	bl	8001e90 <__errno>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2216      	movs	r2, #22
 80005d2:	601a      	str	r2, [r3, #0]
	return -1;
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <_exit>:

void _exit (int status)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ffe7 	bl	80005c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80005f2:	e7fe      	b.n	80005f2 <_exit+0x12>

080005f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	e00a      	b.n	800061c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000606:	f3af 8000 	nop.w
 800060a:	4601      	mov	r1, r0
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	60ba      	str	r2, [r7, #8]
 8000612:	b2ca      	uxtb	r2, r1
 8000614:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf0      	blt.n	8000606 <_read+0x12>
	}

return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b086      	sub	sp, #24
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e009      	b.n	8000654 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60ba      	str	r2, [r7, #8]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf1      	blt.n	8000640 <_write+0x12>
	}
	return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <_close>:

int _close(int file)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
	return -1;
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
 8000686:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800068e:	605a      	str	r2, [r3, #4]
	return 0;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <_isatty>:

int _isatty(int file)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
	return 1;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
	return 0;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <_sbrk+0x5c>)
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <_sbrk+0x60>)
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <_sbrk+0x64>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <_sbrk+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <_sbrk+0x64>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	693a      	ldr	r2, [r7, #16]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d207      	bcs.n	8000710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000700:	f001 fbc6 	bl	8001e90 <__errno>
 8000704:	4603      	mov	r3, r0
 8000706:	220c      	movs	r2, #12
 8000708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	e009      	b.n	8000724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	4a05      	ldr	r2, [pc, #20]	; (8000734 <_sbrk+0x64>)
 8000720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000722:	68fb      	ldr	r3, [r7, #12]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	24080000 	.word	0x24080000
 8000730:	00000400 	.word	0x00000400
 8000734:	24000090 	.word	0x24000090
 8000738:	240000b0 	.word	0x240000b0

0800073c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000740:	4b39      	ldr	r3, [pc, #228]	; (8000828 <SystemInit+0xec>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000746:	4a38      	ldr	r2, [pc, #224]	; (8000828 <SystemInit+0xec>)
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000750:	4b36      	ldr	r3, [pc, #216]	; (800082c <SystemInit+0xf0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f003 030f 	and.w	r3, r3, #15
 8000758:	2b06      	cmp	r3, #6
 800075a:	d807      	bhi.n	800076c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800075c:	4b33      	ldr	r3, [pc, #204]	; (800082c <SystemInit+0xf0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f023 030f 	bic.w	r3, r3, #15
 8000764:	4a31      	ldr	r2, [pc, #196]	; (800082c <SystemInit+0xf0>)
 8000766:	f043 0307 	orr.w	r3, r3, #7
 800076a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800076c:	4b30      	ldr	r3, [pc, #192]	; (8000830 <SystemInit+0xf4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <SystemInit+0xf4>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000778:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <SystemInit+0xf4>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <SystemInit+0xf4>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	492b      	ldr	r1, [pc, #172]	; (8000830 <SystemInit+0xf4>)
 8000784:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <SystemInit+0xf8>)
 8000786:	4013      	ands	r3, r2
 8000788:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemInit+0xf0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	2b00      	cmp	r3, #0
 8000794:	d007      	beq.n	80007a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <SystemInit+0xf0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f023 030f 	bic.w	r3, r3, #15
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <SystemInit+0xf0>)
 80007a0:	f043 0307 	orr.w	r3, r3, #7
 80007a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SystemInit+0xf4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007ac:	4b20      	ldr	r3, [pc, #128]	; (8000830 <SystemInit+0xf4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemInit+0xf4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <SystemInit+0xf4>)
 80007ba:	4a1f      	ldr	r2, [pc, #124]	; (8000838 <SystemInit+0xfc>)
 80007bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <SystemInit+0xf4>)
 80007c0:	4a1e      	ldr	r2, [pc, #120]	; (800083c <SystemInit+0x100>)
 80007c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <SystemInit+0xf4>)
 80007c6:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <SystemInit+0x104>)
 80007c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <SystemInit+0xf4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <SystemInit+0xf4>)
 80007d2:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <SystemInit+0x104>)
 80007d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <SystemInit+0xf4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <SystemInit+0xf4>)
 80007de:	4a18      	ldr	r2, [pc, #96]	; (8000840 <SystemInit+0x104>)
 80007e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <SystemInit+0xf4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <SystemInit+0xf4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a10      	ldr	r2, [pc, #64]	; (8000830 <SystemInit+0xf4>)
 80007ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <SystemInit+0xf4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <SystemInit+0x108>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <SystemInit+0x10c>)
 8000800:	4013      	ands	r3, r2
 8000802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000806:	d202      	bcs.n	800080e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <SystemInit+0x110>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <SystemInit+0x114>)
 8000810:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000814:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <SystemInit+0xec>)
 8000818:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800081c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00
 800082c:	52002000 	.word	0x52002000
 8000830:	58024400 	.word	0x58024400
 8000834:	eaf6ed7f 	.word	0xeaf6ed7f
 8000838:	02020200 	.word	0x02020200
 800083c:	01ff0000 	.word	0x01ff0000
 8000840:	01010280 	.word	0x01010280
 8000844:	5c001000 	.word	0x5c001000
 8000848:	ffff0000 	.word	0xffff0000
 800084c:	51008108 	.word	0x51008108
 8000850:	52004000 	.word	0x52004000

08000854 <Test_Dividier_Zufaellige_Int>:
	
	return x;
}

int Test_Dividier_Zufaellige_Int(int i)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	int r = 100 + rand();
 800085c:	f001 fb4a 	bl	8001ef4 <rand>
 8000860:	4603      	mov	r3, r0
 8000862:	3364      	adds	r3, #100	; 0x64
 8000864:	60fb      	str	r3, [r7, #12]
	int x = r / i;
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	fb92 f3f3 	sdiv	r3, r2, r3
 800086e:	60bb      	str	r3, [r7, #8]
	return x;
 8000870:	68bb      	ldr	r3, [r7, #8]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800087c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000880:	f7ff ff5c 	bl	800073c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	; (80008c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f001 faf7 	bl	8001e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ae:	f7ff fd67 	bl	8000380 <main>
  bx  lr
 80008b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008bc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80008c0:	08003074 	.word	0x08003074
  ldr r2, =_sbss
 80008c4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80008c8:	240000b0 	.word	0x240000b0

080008cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC3_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d6:	2003      	movs	r0, #3
 80008d8:	f000 f94a 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008dc:	f001 f95e 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 80008e0:	4602      	mov	r2, r0
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_Init+0x68>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	f003 030f 	and.w	r3, r3, #15
 80008ec:	4913      	ldr	r1, [pc, #76]	; (800093c <HAL_Init+0x6c>)
 80008ee:	5ccb      	ldrb	r3, [r1, r3]
 80008f0:	f003 031f 	and.w	r3, r3, #31
 80008f4:	fa22 f303 	lsr.w	r3, r2, r3
 80008f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_Init+0x68>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <HAL_Init+0x6c>)
 8000904:	5cd3      	ldrb	r3, [r2, r3]
 8000906:	f003 031f 	and.w	r3, r3, #31
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	fa22 f303 	lsr.w	r3, r2, r3
 8000910:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <HAL_Init+0x70>)
 8000912:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000914:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <HAL_Init+0x74>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800091a:	200f      	movs	r0, #15
 800091c:	f000 f814 	bl	8000948 <HAL_InitTick>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e002      	b.n	8000930 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800092a:	f7ff fdfd 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	58024400 	.word	0x58024400
 800093c:	08002f10 	.word	0x08002f10
 8000940:	24000004 	.word	0x24000004
 8000944:	24000000 	.word	0x24000000

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_InitTick+0x60>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d101      	bne.n	800095c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	e021      	b.n	80009a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <HAL_InitTick+0x64>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_InitTick+0x60>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f921 	bl	8000bba <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e00e      	b.n	80009a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d80a      	bhi.n	800099e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f8f9 	bl	8000b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_InitTick+0x68>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2400000c 	.word	0x2400000c
 80009ac:	24000000 	.word	0x24000000
 80009b0:	24000008 	.word	0x24000008

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	2400000c 	.word	0x2400000c
 80009d8:	2400009c 	.word	0x2400009c

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	2400009c 	.word	0x2400009c

080009f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <HAL_GetREVID+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0c1b      	lsrs	r3, r3, #16
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	5c001000 	.word	0x5c001000

08000a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <__NVIC_SetPriorityGrouping+0x40>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	4313      	orrs	r3, r2
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <__NVIC_SetPriorityGrouping+0x40>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00
 8000a50:	05fa0000 	.word	0x05fa0000

08000a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f7ff ff8e 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff47 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff5e 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff90 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffb2 	bl	8000b2c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000be2:	4b89      	ldr	r3, [pc, #548]	; (8000e08 <HAL_GPIO_Init+0x234>)
 8000be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000be6:	e194      	b.n	8000f12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	2101      	movs	r1, #1
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 8186 	beq.w	8000f0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d00b      	beq.n	8000c20 <HAL_GPIO_Init+0x4c>
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d007      	beq.n	8000c20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c14:	2b11      	cmp	r3, #17
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b12      	cmp	r3, #18
 8000c1e:	d130      	bne.n	8000c82 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c56:	2201      	movs	r2, #1
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4013      	ands	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	f003 0201 	and.w	r2, r3, #1
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0xee>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b12      	cmp	r3, #18
 8000cc0:	d123      	bne.n	8000d0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	08da      	lsrs	r2, r3, #3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3208      	adds	r2, #8
 8000cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	220f      	movs	r2, #15
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	691a      	ldr	r2, [r3, #16]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	08da      	lsrs	r2, r3, #3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3208      	adds	r2, #8
 8000d04:	69b9      	ldr	r1, [r7, #24]
 8000d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0203 	and.w	r2, r3, #3
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 80e0 	beq.w	8000f0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <HAL_GPIO_Init+0x238>)
 8000d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d52:	4a2e      	ldr	r2, [pc, #184]	; (8000e0c <HAL_GPIO_Init+0x238>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d5c:	4b2b      	ldr	r3, [pc, #172]	; (8000e0c <HAL_GPIO_Init+0x238>)
 8000d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d6a:	4a29      	ldr	r2, [pc, #164]	; (8000e10 <HAL_GPIO_Init+0x23c>)
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	220f      	movs	r2, #15
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a20      	ldr	r2, [pc, #128]	; (8000e14 <HAL_GPIO_Init+0x240>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d052      	beq.n	8000e3c <HAL_GPIO_Init+0x268>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <HAL_GPIO_Init+0x244>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d031      	beq.n	8000e02 <HAL_GPIO_Init+0x22e>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <HAL_GPIO_Init+0x248>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d02b      	beq.n	8000dfe <HAL_GPIO_Init+0x22a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a1d      	ldr	r2, [pc, #116]	; (8000e20 <HAL_GPIO_Init+0x24c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d025      	beq.n	8000dfa <HAL_GPIO_Init+0x226>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <HAL_GPIO_Init+0x250>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d01f      	beq.n	8000df6 <HAL_GPIO_Init+0x222>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <HAL_GPIO_Init+0x254>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d019      	beq.n	8000df2 <HAL_GPIO_Init+0x21e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <HAL_GPIO_Init+0x258>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d013      	beq.n	8000dee <HAL_GPIO_Init+0x21a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <HAL_GPIO_Init+0x25c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d00d      	beq.n	8000dea <HAL_GPIO_Init+0x216>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <HAL_GPIO_Init+0x260>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d007      	beq.n	8000de6 <HAL_GPIO_Init+0x212>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_GPIO_Init+0x264>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d101      	bne.n	8000de2 <HAL_GPIO_Init+0x20e>
 8000dde:	2309      	movs	r3, #9
 8000de0:	e02d      	b.n	8000e3e <HAL_GPIO_Init+0x26a>
 8000de2:	230a      	movs	r3, #10
 8000de4:	e02b      	b.n	8000e3e <HAL_GPIO_Init+0x26a>
 8000de6:	2308      	movs	r3, #8
 8000de8:	e029      	b.n	8000e3e <HAL_GPIO_Init+0x26a>
 8000dea:	2307      	movs	r3, #7
 8000dec:	e027      	b.n	8000e3e <HAL_GPIO_Init+0x26a>
 8000dee:	2306      	movs	r3, #6
 8000df0:	e025      	b.n	8000e3e <HAL_GPIO_Init+0x26a>
 8000df2:	2305      	movs	r3, #5
 8000df4:	e023      	b.n	8000e3e <HAL_GPIO_Init+0x26a>
 8000df6:	2304      	movs	r3, #4
 8000df8:	e021      	b.n	8000e3e <HAL_GPIO_Init+0x26a>
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e01f      	b.n	8000e3e <HAL_GPIO_Init+0x26a>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e01d      	b.n	8000e3e <HAL_GPIO_Init+0x26a>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e01b      	b.n	8000e3e <HAL_GPIO_Init+0x26a>
 8000e06:	bf00      	nop
 8000e08:	58000080 	.word	0x58000080
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	58000400 	.word	0x58000400
 8000e14:	58020000 	.word	0x58020000
 8000e18:	58020400 	.word	0x58020400
 8000e1c:	58020800 	.word	0x58020800
 8000e20:	58020c00 	.word	0x58020c00
 8000e24:	58021000 	.word	0x58021000
 8000e28:	58021400 	.word	0x58021400
 8000e2c:	58021800 	.word	0x58021800
 8000e30:	58021c00 	.word	0x58021c00
 8000e34:	58022000 	.word	0x58022000
 8000e38:	58022400 	.word	0x58022400
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	f002 0203 	and.w	r2, r2, #3
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	4093      	lsls	r3, r2
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4e:	4938      	ldr	r1, [pc, #224]	; (8000f30 <HAL_GPIO_Init+0x35c>)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f47f ae63 	bne.w	8000be8 <HAL_GPIO_Init+0x14>
  }
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3724      	adds	r7, #36	; 0x24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	58000400 	.word	0x58000400

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	4613      	mov	r3, r2
 8000f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f44:	787b      	ldrb	r3, [r7, #1]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f50:	e003      	b.n	8000f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	041a      	lsls	r2, r3, #16
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	619a      	str	r2, [r3, #24]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b085      	sub	sp, #20
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f78:	887a      	ldrh	r2, [r7, #2]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	041a      	lsls	r2, r3, #16
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	887b      	ldrh	r3, [r7, #2]
 8000f86:	400b      	ands	r3, r1
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	619a      	str	r2, [r3, #24]
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HAL_PWREx_ConfigSupply+0x70>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d00a      	beq.n	8000fc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_PWREx_ConfigSupply+0x70>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d001      	beq.n	8000fc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e01f      	b.n	8001002 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e01d      	b.n	8001002 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_PWREx_ConfigSupply+0x70>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	f023 0207 	bic.w	r2, r3, #7
 8000fce:	490f      	ldr	r1, [pc, #60]	; (800100c <HAL_PWREx_ConfigSupply+0x70>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000fd6:	f7ff fd01 	bl	80009dc <HAL_GetTick>
 8000fda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fdc:	e009      	b.n	8000ff2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fde:	f7ff fcfd 	bl	80009dc <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fec:	d901      	bls.n	8000ff2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e007      	b.n	8001002 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_PWREx_ConfigSupply+0x70>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ffe:	d1ee      	bne.n	8000fde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	58024800 	.word	0x58024800

08001010 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	; 0x30
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e3ff      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8087 	beq.w	800113e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001030:	4b99      	ldr	r3, [pc, #612]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800103a:	4b97      	ldr	r3, [pc, #604]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001042:	2b10      	cmp	r3, #16
 8001044:	d007      	beq.n	8001056 <HAL_RCC_OscConfig+0x46>
 8001046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001048:	2b18      	cmp	r3, #24
 800104a:	d110      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
 800104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d10b      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001056:	4b90      	ldr	r3, [pc, #576]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d06c      	beq.n	800113c <HAL_RCC_OscConfig+0x12c>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d168      	bne.n	800113c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e3d9      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x76>
 8001078:	4b87      	ldr	r3, [pc, #540]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a86      	ldr	r2, [pc, #536]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 800107e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e02e      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x98>
 800108e:	4b82      	ldr	r3, [pc, #520]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a81      	ldr	r2, [pc, #516]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b7f      	ldr	r3, [pc, #508]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a7e      	ldr	r2, [pc, #504]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80010a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e01d      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0xbc>
 80010b2:	4b79      	ldr	r3, [pc, #484]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a78      	ldr	r2, [pc, #480]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80010b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b76      	ldr	r3, [pc, #472]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a75      	ldr	r2, [pc, #468]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 80010cc:	4b72      	ldr	r3, [pc, #456]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a71      	ldr	r2, [pc, #452]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80010d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b6f      	ldr	r3, [pc, #444]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a6e      	ldr	r2, [pc, #440]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80010de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d013      	beq.n	8001114 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ec:	f7ff fc76 	bl	80009dc <HAL_GetTick>
 80010f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fc72 	bl	80009dc <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e38d      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001106:	4b64      	ldr	r3, [pc, #400]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0xe4>
 8001112:	e014      	b.n	800113e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fc62 	bl	80009dc <HAL_GetTick>
 8001118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fc5e 	bl	80009dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	; 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e379      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800112e:	4b5a      	ldr	r3, [pc, #360]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x10c>
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 80ae 	beq.w	80012a8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800114c:	4b52      	ldr	r3, [pc, #328]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001154:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001156:	4b50      	ldr	r3, [pc, #320]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <HAL_RCC_OscConfig+0x162>
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	2b18      	cmp	r3, #24
 8001166:	d13a      	bne.n	80011de <HAL_RCC_OscConfig+0x1ce>
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d135      	bne.n	80011de <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001172:	4b49      	ldr	r3, [pc, #292]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x17a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e34b      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	f7ff fc33 	bl	80009f4 <HAL_GetREVID>
 800118e:	4603      	mov	r3, r0
 8001190:	f241 0203 	movw	r2, #4099	; 0x1003
 8001194:	4293      	cmp	r3, r2
 8001196:	d817      	bhi.n	80011c8 <HAL_RCC_OscConfig+0x1b8>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	2b40      	cmp	r3, #64	; 0x40
 800119e:	d108      	bne.n	80011b2 <HAL_RCC_OscConfig+0x1a2>
 80011a0:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80011a8:	4a3b      	ldr	r2, [pc, #236]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80011aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ae:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011b0:	e07a      	b.n	80012a8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b39      	ldr	r3, [pc, #228]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	031b      	lsls	r3, r3, #12
 80011c0:	4935      	ldr	r1, [pc, #212]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c6:	e06f      	b.n	80012a8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b33      	ldr	r3, [pc, #204]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	061b      	lsls	r3, r3, #24
 80011d6:	4930      	ldr	r1, [pc, #192]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011dc:	e064      	b.n	80012a8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d045      	beq.n	8001272 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 0219 	bic.w	r2, r3, #25
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	4929      	ldr	r1, [pc, #164]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fbf0 	bl	80009dc <HAL_GetTick>
 80011fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001200:	f7ff fbec 	bl	80009dc <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e307      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	f7ff fbe9 	bl	80009f4 <HAL_GetREVID>
 8001222:	4603      	mov	r3, r0
 8001224:	f241 0203 	movw	r2, #4099	; 0x1003
 8001228:	4293      	cmp	r3, r2
 800122a:	d817      	bhi.n	800125c <HAL_RCC_OscConfig+0x24c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b40      	cmp	r3, #64	; 0x40
 8001232:	d108      	bne.n	8001246 <HAL_RCC_OscConfig+0x236>
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800123c:	4a16      	ldr	r2, [pc, #88]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 800123e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001242:	6053      	str	r3, [r2, #4]
 8001244:	e030      	b.n	80012a8 <HAL_RCC_OscConfig+0x298>
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	031b      	lsls	r3, r3, #12
 8001254:	4910      	ldr	r1, [pc, #64]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001256:	4313      	orrs	r3, r2
 8001258:	604b      	str	r3, [r1, #4]
 800125a:	e025      	b.n	80012a8 <HAL_RCC_OscConfig+0x298>
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	061b      	lsls	r3, r3, #24
 800126a:	490b      	ldr	r1, [pc, #44]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
 8001270:	e01a      	b.n	80012a8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_RCC_OscConfig+0x288>)
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127e:	f7ff fbad 	bl	80009dc <HAL_GetTick>
 8001282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001284:	e00a      	b.n	800129c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff fba9 	bl	80009dc <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d903      	bls.n	800129c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e2c4      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
 8001298:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800129c:	4ba4      	ldr	r3, [pc, #656]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1ee      	bne.n	8001286 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0310 	and.w	r3, r3, #16
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80a9 	beq.w	8001408 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b6:	4b9e      	ldr	r3, [pc, #632]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012c0:	4b9b      	ldr	r3, [pc, #620]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d007      	beq.n	80012dc <HAL_RCC_OscConfig+0x2cc>
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2b18      	cmp	r3, #24
 80012d0:	d13a      	bne.n	8001348 <HAL_RCC_OscConfig+0x338>
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d135      	bne.n	8001348 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012dc:	4b94      	ldr	r3, [pc, #592]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_OscConfig+0x2e4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b80      	cmp	r3, #128	; 0x80
 80012ee:	d001      	beq.n	80012f4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e296      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012f4:	f7ff fb7e 	bl	80009f4 <HAL_GetREVID>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80012fe:	4293      	cmp	r3, r2
 8001300:	d817      	bhi.n	8001332 <HAL_RCC_OscConfig+0x322>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	2b20      	cmp	r3, #32
 8001308:	d108      	bne.n	800131c <HAL_RCC_OscConfig+0x30c>
 800130a:	4b89      	ldr	r3, [pc, #548]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001312:	4a87      	ldr	r2, [pc, #540]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001318:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800131a:	e075      	b.n	8001408 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800131c:	4b84      	ldr	r3, [pc, #528]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	069b      	lsls	r3, r3, #26
 800132a:	4981      	ldr	r1, [pc, #516]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001330:	e06a      	b.n	8001408 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001332:	4b7f      	ldr	r3, [pc, #508]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	061b      	lsls	r3, r3, #24
 8001340:	497b      	ldr	r1, [pc, #492]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001342:	4313      	orrs	r3, r2
 8001344:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001346:	e05f      	b.n	8001408 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d042      	beq.n	80013d6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001350:	4b77      	ldr	r3, [pc, #476]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a76      	ldr	r2, [pc, #472]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fb3e 	bl	80009dc <HAL_GetTick>
 8001360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001364:	f7ff fb3a 	bl	80009dc <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e255      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001376:	4b6e      	ldr	r3, [pc, #440]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001382:	f7ff fb37 	bl	80009f4 <HAL_GetREVID>
 8001386:	4603      	mov	r3, r0
 8001388:	f241 0203 	movw	r2, #4099	; 0x1003
 800138c:	4293      	cmp	r3, r2
 800138e:	d817      	bhi.n	80013c0 <HAL_RCC_OscConfig+0x3b0>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	2b20      	cmp	r3, #32
 8001396:	d108      	bne.n	80013aa <HAL_RCC_OscConfig+0x39a>
 8001398:	4b65      	ldr	r3, [pc, #404]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80013a0:	4a63      	ldr	r2, [pc, #396]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80013a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80013a6:	6053      	str	r3, [r2, #4]
 80013a8:	e02e      	b.n	8001408 <HAL_RCC_OscConfig+0x3f8>
 80013aa:	4b61      	ldr	r3, [pc, #388]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	069b      	lsls	r3, r3, #26
 80013b8:	495d      	ldr	r1, [pc, #372]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
 80013be:	e023      	b.n	8001408 <HAL_RCC_OscConfig+0x3f8>
 80013c0:	4b5b      	ldr	r3, [pc, #364]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	061b      	lsls	r3, r3, #24
 80013ce:	4958      	ldr	r1, [pc, #352]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	60cb      	str	r3, [r1, #12]
 80013d4:	e018      	b.n	8001408 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80013d6:	4b56      	ldr	r3, [pc, #344]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a55      	ldr	r2, [pc, #340]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80013dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fafb 	bl	80009dc <HAL_GetTick>
 80013e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013ea:	f7ff faf7 	bl	80009dc <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e212      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80013fc:	4b4c      	ldr	r3, [pc, #304]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d036      	beq.n	8001482 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d019      	beq.n	8001450 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141c:	4b44      	ldr	r3, [pc, #272]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001420:	4a43      	ldr	r2, [pc, #268]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff fad8 	bl	80009dc <HAL_GetTick>
 800142c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fad4 	bl	80009dc <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e1ef      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x420>
 800144e:	e018      	b.n	8001482 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001450:	4b37      	ldr	r3, [pc, #220]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001454:	4a36      	ldr	r2, [pc, #216]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7ff fabe 	bl	80009dc <HAL_GetTick>
 8001460:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff faba 	bl	80009dc <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1d5      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	2b00      	cmp	r3, #0
 800148c:	d036      	beq.n	80014fc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d019      	beq.n	80014ca <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a25      	ldr	r2, [pc, #148]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 800149c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fa9b 	bl	80009dc <HAL_GetTick>
 80014a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014aa:	f7ff fa97 	bl	80009dc <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e1b2      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x49a>
 80014c8:	e018      	b.n	80014fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80014d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fa81 	bl	80009dc <HAL_GetTick>
 80014da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014de:	f7ff fa7d 	bl	80009dc <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e198      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_RCC_OscConfig+0x520>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f0      	bne.n	80014de <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8085 	beq.w	8001614 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_RCC_OscConfig+0x524>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <HAL_RCC_OscConfig+0x524>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001516:	f7ff fa61 	bl	80009dc <HAL_GetTick>
 800151a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800151c:	e00c      	b.n	8001538 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800151e:	f7ff fa5d 	bl	80009dc <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b64      	cmp	r3, #100	; 0x64
 800152a:	d905      	bls.n	8001538 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e178      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
 8001530:	58024400 	.word	0x58024400
 8001534:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001538:	4b96      	ldr	r3, [pc, #600]	; (8001794 <HAL_RCC_OscConfig+0x784>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0ec      	beq.n	800151e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x54a>
 800154c:	4b92      	ldr	r3, [pc, #584]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a91      	ldr	r2, [pc, #580]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
 8001558:	e02d      	b.n	80015b6 <HAL_RCC_OscConfig+0x5a6>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x56c>
 8001562:	4b8d      	ldr	r3, [pc, #564]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a8c      	ldr	r2, [pc, #560]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
 800156e:	4b8a      	ldr	r3, [pc, #552]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a89      	ldr	r2, [pc, #548]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	e01c      	b.n	80015b6 <HAL_RCC_OscConfig+0x5a6>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b05      	cmp	r3, #5
 8001582:	d10c      	bne.n	800159e <HAL_RCC_OscConfig+0x58e>
 8001584:	4b84      	ldr	r3, [pc, #528]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	4a83      	ldr	r2, [pc, #524]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6713      	str	r3, [r2, #112]	; 0x70
 8001590:	4b81      	ldr	r3, [pc, #516]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a80      	ldr	r2, [pc, #512]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	e00b      	b.n	80015b6 <HAL_RCC_OscConfig+0x5a6>
 800159e:	4b7e      	ldr	r3, [pc, #504]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a7d      	ldr	r2, [pc, #500]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	4b7b      	ldr	r3, [pc, #492]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a7a      	ldr	r2, [pc, #488]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d015      	beq.n	80015ea <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fa0d 	bl	80009dc <HAL_GetTick>
 80015c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff fa09 	bl	80009dc <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e122      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015dc:	4b6e      	ldr	r3, [pc, #440]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0ee      	beq.n	80015c6 <HAL_RCC_OscConfig+0x5b6>
 80015e8:	e014      	b.n	8001614 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ea:	f7ff f9f7 	bl	80009dc <HAL_GetTick>
 80015ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff f9f3 	bl	80009dc <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e10c      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001608:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1ee      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8101 	beq.w	8001820 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800161e:	4b5e      	ldr	r3, [pc, #376]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001626:	2b18      	cmp	r3, #24
 8001628:	f000 80bc 	beq.w	80017a4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	2b02      	cmp	r3, #2
 8001632:	f040 8095 	bne.w	8001760 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b58      	ldr	r3, [pc, #352]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a57      	ldr	r2, [pc, #348]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 800163c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff f9cb 	bl	80009dc <HAL_GetTick>
 8001646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff f9c7 	bl	80009dc <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0e2      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800165c:	4b4e      	ldr	r3, [pc, #312]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001668:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 800166a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800166c:	4b4b      	ldr	r3, [pc, #300]	; (800179c <HAL_RCC_OscConfig+0x78c>)
 800166e:	4013      	ands	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	430a      	orrs	r2, r1
 800167c:	4946      	ldr	r1, [pc, #280]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 800167e:	4313      	orrs	r3, r2
 8001680:	628b      	str	r3, [r1, #40]	; 0x28
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	3b01      	subs	r3, #1
 8001688:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001690:	3b01      	subs	r3, #1
 8001692:	025b      	lsls	r3, r3, #9
 8001694:	b29b      	uxth	r3, r3
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169c:	3b01      	subs	r3, #1
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016aa:	3b01      	subs	r3, #1
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80016b2:	4939      	ldr	r1, [pc, #228]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80016b8:	4b37      	ldr	r3, [pc, #220]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	4a36      	ldr	r2, [pc, #216]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80016c4:	4b34      	ldr	r3, [pc, #208]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80016c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c8:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_RCC_OscConfig+0x790>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016d0:	00d2      	lsls	r2, r2, #3
 80016d2:	4931      	ldr	r1, [pc, #196]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	f023 020c 	bic.w	r2, r3, #12
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	492c      	ldr	r1, [pc, #176]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80016ea:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	f023 0202 	bic.w	r2, r3, #2
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	4928      	ldr	r1, [pc, #160]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	4a25      	ldr	r2, [pc, #148]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 800170e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 800171a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff f950 	bl	80009dc <HAL_GetTick>
 800173c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff f94c 	bl	80009dc <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e067      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x730>
 800175e:	e05f      	b.n	8001820 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800176a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff f936 	bl	80009dc <HAL_GetTick>
 8001770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff f932 	bl	80009dc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e04d      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <HAL_RCC_OscConfig+0x788>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x764>
 8001792:	e045      	b.n	8001820 <HAL_RCC_OscConfig+0x810>
 8001794:	58024800 	.word	0x58024800
 8001798:	58024400 	.word	0x58024400
 800179c:	fffffc0c 	.word	0xfffffc0c
 80017a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <HAL_RCC_OscConfig+0x81c>)
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_RCC_OscConfig+0x81c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d031      	beq.n	800181c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0203 	and.w	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d12a      	bne.n	800181c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d122      	bne.n	800181c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d11a      	bne.n	800181c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	0a5b      	lsrs	r3, r3, #9
 80017ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d111      	bne.n	800181c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001804:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d108      	bne.n	800181c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	0e1b      	lsrs	r3, r3, #24
 800180e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001816:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3730      	adds	r7, #48	; 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	58024400 	.word	0x58024400

08001830 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e19c      	b.n	8001b7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001844:	4b8a      	ldr	r3, [pc, #552]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d910      	bls.n	8001874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b87      	ldr	r3, [pc, #540]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 020f 	bic.w	r2, r3, #15
 800185a:	4985      	ldr	r1, [pc, #532]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b83      	ldr	r3, [pc, #524]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e184      	b.n	8001b7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d010      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	4b7b      	ldr	r3, [pc, #492]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800188c:	429a      	cmp	r2, r3
 800188e:	d908      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001890:	4b78      	ldr	r3, [pc, #480]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	4975      	ldr	r1, [pc, #468]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d010      	beq.n	80018d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	4b70      	ldr	r3, [pc, #448]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d908      	bls.n	80018d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80018be:	4b6d      	ldr	r3, [pc, #436]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	496a      	ldr	r1, [pc, #424]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d010      	beq.n	80018fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699a      	ldr	r2, [r3, #24]
 80018e0:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d908      	bls.n	80018fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80018ec:	4b61      	ldr	r3, [pc, #388]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	495e      	ldr	r1, [pc, #376]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b00      	cmp	r3, #0
 8001908:	d010      	beq.n	800192c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69da      	ldr	r2, [r3, #28]
 800190e:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001916:	429a      	cmp	r2, r3
 8001918:	d908      	bls.n	800192c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4953      	ldr	r1, [pc, #332]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001928:	4313      	orrs	r3, r2
 800192a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d010      	beq.n	800195a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	429a      	cmp	r2, r3
 8001946:	d908      	bls.n	800195a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001948:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f023 020f 	bic.w	r2, r3, #15
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4947      	ldr	r1, [pc, #284]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001956:	4313      	orrs	r3, r2
 8001958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d055      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001966:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4940      	ldr	r1, [pc, #256]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001974:	4313      	orrs	r3, r2
 8001976:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d107      	bne.n	8001990 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d121      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0f6      	b.n	8001b7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d115      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0ea      	b.n	8001b7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d109      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0de      	b.n	8001b7e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c0:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0d6      	b.n	8001b7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f023 0207 	bic.w	r2, r3, #7
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4925      	ldr	r1, [pc, #148]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7fe fffb 	bl	80009dc <HAL_GetTick>
 80019e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ea:	f7fe fff7 	bl	80009dc <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0be      	b.n	8001b7e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d1eb      	bne.n	80019ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d010      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d208      	bcs.n	8001a40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f023 020f 	bic.w	r2, r3, #15
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	490e      	ldr	r1, [pc, #56]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d214      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 020f 	bic.w	r2, r3, #15
 8001a56:	4906      	ldr	r1, [pc, #24]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e086      	b.n	8001b7e <HAL_RCC_ClockConfig+0x34e>
 8001a70:	52002000 	.word	0x52002000
 8001a74:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d010      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d208      	bcs.n	8001aa6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a94:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	4939      	ldr	r1, [pc, #228]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d010      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d208      	bcs.n	8001ad4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ac2:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	492e      	ldr	r1, [pc, #184]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d208      	bcs.n	8001b02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4922      	ldr	r1, [pc, #136]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d010      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69da      	ldr	r2, [r3, #28]
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d208      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4917      	ldr	r1, [pc, #92]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b30:	f000 f834 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	4912      	ldr	r1, [pc, #72]	; (8001b8c <HAL_RCC_ClockConfig+0x35c>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_RCC_ClockConfig+0x358>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <HAL_RCC_ClockConfig+0x35c>)
 8001b58:	5cd3      	ldrb	r3, [r2, r3]
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_RCC_ClockConfig+0x360>)
 8001b66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_RCC_ClockConfig+0x364>)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_RCC_ClockConfig+0x368>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fee8 	bl	8000948 <HAL_InitTick>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	08002f10 	.word	0x08002f10
 8001b90:	24000004 	.word	0x24000004
 8001b94:	24000000 	.word	0x24000000
 8001b98:	24000008 	.word	0x24000008

08001b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba2:	4bb3      	ldr	r3, [pc, #716]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001baa:	2b18      	cmp	r3, #24
 8001bac:	f200 8155 	bhi.w	8001e5a <HAL_RCC_GetSysClockFreq+0x2be>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001c1d 	.word	0x08001c1d
 8001bbc:	08001e5b 	.word	0x08001e5b
 8001bc0:	08001e5b 	.word	0x08001e5b
 8001bc4:	08001e5b 	.word	0x08001e5b
 8001bc8:	08001e5b 	.word	0x08001e5b
 8001bcc:	08001e5b 	.word	0x08001e5b
 8001bd0:	08001e5b 	.word	0x08001e5b
 8001bd4:	08001e5b 	.word	0x08001e5b
 8001bd8:	08001c43 	.word	0x08001c43
 8001bdc:	08001e5b 	.word	0x08001e5b
 8001be0:	08001e5b 	.word	0x08001e5b
 8001be4:	08001e5b 	.word	0x08001e5b
 8001be8:	08001e5b 	.word	0x08001e5b
 8001bec:	08001e5b 	.word	0x08001e5b
 8001bf0:	08001e5b 	.word	0x08001e5b
 8001bf4:	08001e5b 	.word	0x08001e5b
 8001bf8:	08001c49 	.word	0x08001c49
 8001bfc:	08001e5b 	.word	0x08001e5b
 8001c00:	08001e5b 	.word	0x08001e5b
 8001c04:	08001e5b 	.word	0x08001e5b
 8001c08:	08001e5b 	.word	0x08001e5b
 8001c0c:	08001e5b 	.word	0x08001e5b
 8001c10:	08001e5b 	.word	0x08001e5b
 8001c14:	08001e5b 	.word	0x08001e5b
 8001c18:	08001c4f 	.word	0x08001c4f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c1c:	4b94      	ldr	r3, [pc, #592]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d009      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c28:	4b91      	ldr	r3, [pc, #580]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	08db      	lsrs	r3, r3, #3
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	4a90      	ldr	r2, [pc, #576]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
 8001c38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001c3a:	e111      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c3c:	4b8d      	ldr	r3, [pc, #564]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c3e:	61bb      	str	r3, [r7, #24]
    break;
 8001c40:	e10e      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001c42:	4b8d      	ldr	r3, [pc, #564]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c44:	61bb      	str	r3, [r7, #24]
    break;
 8001c46:	e10b      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001c48:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001c4a:	61bb      	str	r3, [r7, #24]
    break;
 8001c4c:	e108      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c4e:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001c58:	4b85      	ldr	r3, [pc, #532]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001c64:	4b82      	ldr	r3, [pc, #520]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001c6e:	4b80      	ldr	r3, [pc, #512]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c72:	08db      	lsrs	r3, r3, #3
 8001c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c86:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80e1 	beq.w	8001e54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	f000 8083 	beq.w	8001da0 <HAL_RCC_GetSysClockFreq+0x204>
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	f200 80a1 	bhi.w	8001de4 <HAL_RCC_GetSysClockFreq+0x248>
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x114>
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d056      	beq.n	8001d5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001cae:	e099      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cb0:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d02d      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001cbc:	4b6c      	ldr	r3, [pc, #432]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	4a6b      	ldr	r2, [pc, #428]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ccc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce6:	4b62      	ldr	r3, [pc, #392]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cfa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001d16:	e087      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d22:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001e84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d2a:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d5a:	e065      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d66:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001e88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d6e:	4b40      	ldr	r3, [pc, #256]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d9e:	e043      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001daa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001e8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001db2:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dc6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001de2:	e021      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001e88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001e80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e26:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	0a5b      	lsrs	r3, r3, #9
 8001e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e32:	3301      	adds	r3, #1
 8001e34:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4c:	ee17 3a90 	vmov	r3, s15
 8001e50:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001e52:	e005      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61bb      	str	r3, [r7, #24]
    break;
 8001e58:	e002      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e5c:	61bb      	str	r3, [r7, #24]
    break;
 8001e5e:	bf00      	nop
  }

  return sysclockfreq;
 8001e60:	69bb      	ldr	r3, [r7, #24]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	58024400 	.word	0x58024400
 8001e74:	03d09000 	.word	0x03d09000
 8001e78:	003d0900 	.word	0x003d0900
 8001e7c:	017d7840 	.word	0x017d7840
 8001e80:	46000000 	.word	0x46000000
 8001e84:	4c742400 	.word	0x4c742400
 8001e88:	4a742400 	.word	0x4a742400
 8001e8c:	4bbebc20 	.word	0x4bbebc20

08001e90 <__errno>:
 8001e90:	4b01      	ldr	r3, [pc, #4]	; (8001e98 <__errno+0x8>)
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	24000010 	.word	0x24000010

08001e9c <__libc_init_array>:
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	4d0d      	ldr	r5, [pc, #52]	; (8001ed4 <__libc_init_array+0x38>)
 8001ea0:	4c0d      	ldr	r4, [pc, #52]	; (8001ed8 <__libc_init_array+0x3c>)
 8001ea2:	1b64      	subs	r4, r4, r5
 8001ea4:	10a4      	asrs	r4, r4, #2
 8001ea6:	2600      	movs	r6, #0
 8001ea8:	42a6      	cmp	r6, r4
 8001eaa:	d109      	bne.n	8001ec0 <__libc_init_array+0x24>
 8001eac:	4d0b      	ldr	r5, [pc, #44]	; (8001edc <__libc_init_array+0x40>)
 8001eae:	4c0c      	ldr	r4, [pc, #48]	; (8001ee0 <__libc_init_array+0x44>)
 8001eb0:	f001 f822 	bl	8002ef8 <_init>
 8001eb4:	1b64      	subs	r4, r4, r5
 8001eb6:	10a4      	asrs	r4, r4, #2
 8001eb8:	2600      	movs	r6, #0
 8001eba:	42a6      	cmp	r6, r4
 8001ebc:	d105      	bne.n	8001eca <__libc_init_array+0x2e>
 8001ebe:	bd70      	pop	{r4, r5, r6, pc}
 8001ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ec4:	4798      	blx	r3
 8001ec6:	3601      	adds	r6, #1
 8001ec8:	e7ee      	b.n	8001ea8 <__libc_init_array+0xc>
 8001eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ece:	4798      	blx	r3
 8001ed0:	3601      	adds	r6, #1
 8001ed2:	e7f2      	b.n	8001eba <__libc_init_array+0x1e>
 8001ed4:	0800306c 	.word	0x0800306c
 8001ed8:	0800306c 	.word	0x0800306c
 8001edc:	0800306c 	.word	0x0800306c
 8001ee0:	08003070 	.word	0x08003070

08001ee4 <memset>:
 8001ee4:	4402      	add	r2, r0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d100      	bne.n	8001eee <memset+0xa>
 8001eec:	4770      	bx	lr
 8001eee:	f803 1b01 	strb.w	r1, [r3], #1
 8001ef2:	e7f9      	b.n	8001ee8 <memset+0x4>

08001ef4 <rand>:
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <rand+0x60>)
 8001ef6:	b510      	push	{r4, lr}
 8001ef8:	681c      	ldr	r4, [r3, #0]
 8001efa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001efc:	b9b3      	cbnz	r3, 8001f2c <rand+0x38>
 8001efe:	2018      	movs	r0, #24
 8001f00:	f000 f868 	bl	8001fd4 <malloc>
 8001f04:	63a0      	str	r0, [r4, #56]	; 0x38
 8001f06:	b928      	cbnz	r0, 8001f14 <rand+0x20>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <rand+0x64>)
 8001f0c:	4813      	ldr	r0, [pc, #76]	; (8001f5c <rand+0x68>)
 8001f0e:	214e      	movs	r1, #78	; 0x4e
 8001f10:	f000 f830 	bl	8001f74 <__assert_func>
 8001f14:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <rand+0x6c>)
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <rand+0x70>)
 8001f18:	e9c0 2300 	strd	r2, r3, [r0]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <rand+0x74>)
 8001f1e:	6083      	str	r3, [r0, #8]
 8001f20:	230b      	movs	r3, #11
 8001f22:	8183      	strh	r3, [r0, #12]
 8001f24:	2201      	movs	r2, #1
 8001f26:	2300      	movs	r3, #0
 8001f28:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001f2c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001f2e:	480f      	ldr	r0, [pc, #60]	; (8001f6c <rand+0x78>)
 8001f30:	690a      	ldr	r2, [r1, #16]
 8001f32:	694b      	ldr	r3, [r1, #20]
 8001f34:	4c0e      	ldr	r4, [pc, #56]	; (8001f70 <rand+0x7c>)
 8001f36:	4350      	muls	r0, r2
 8001f38:	fb04 0003 	mla	r0, r4, r3, r0
 8001f3c:	fba2 3404 	umull	r3, r4, r2, r4
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	4404      	add	r4, r0
 8001f44:	f144 0000 	adc.w	r0, r4, #0
 8001f48:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8001f4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001f50:	bd10      	pop	{r4, pc}
 8001f52:	bf00      	nop
 8001f54:	24000010 	.word	0x24000010
 8001f58:	08002f24 	.word	0x08002f24
 8001f5c:	08002f3b 	.word	0x08002f3b
 8001f60:	abcd330e 	.word	0xabcd330e
 8001f64:	e66d1234 	.word	0xe66d1234
 8001f68:	0005deec 	.word	0x0005deec
 8001f6c:	5851f42d 	.word	0x5851f42d
 8001f70:	4c957f2d 	.word	0x4c957f2d

08001f74 <__assert_func>:
 8001f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001f76:	4614      	mov	r4, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <__assert_func+0x2c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4605      	mov	r5, r0
 8001f80:	68d8      	ldr	r0, [r3, #12]
 8001f82:	b14c      	cbz	r4, 8001f98 <__assert_func+0x24>
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <__assert_func+0x30>)
 8001f86:	9100      	str	r1, [sp, #0]
 8001f88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001f8c:	4906      	ldr	r1, [pc, #24]	; (8001fa8 <__assert_func+0x34>)
 8001f8e:	462b      	mov	r3, r5
 8001f90:	f000 f80e 	bl	8001fb0 <fiprintf>
 8001f94:	f000 fc8e 	bl	80028b4 <abort>
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <__assert_func+0x38>)
 8001f9a:	461c      	mov	r4, r3
 8001f9c:	e7f3      	b.n	8001f86 <__assert_func+0x12>
 8001f9e:	bf00      	nop
 8001fa0:	24000010 	.word	0x24000010
 8001fa4:	08002f9a 	.word	0x08002f9a
 8001fa8:	08002fa7 	.word	0x08002fa7
 8001fac:	08002fd5 	.word	0x08002fd5

08001fb0 <fiprintf>:
 8001fb0:	b40e      	push	{r1, r2, r3}
 8001fb2:	b503      	push	{r0, r1, lr}
 8001fb4:	4601      	mov	r1, r0
 8001fb6:	ab03      	add	r3, sp, #12
 8001fb8:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <fiprintf+0x20>)
 8001fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fbe:	6800      	ldr	r0, [r0, #0]
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	f000 f8e3 	bl	800218c <_vfiprintf_r>
 8001fc6:	b002      	add	sp, #8
 8001fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001fcc:	b003      	add	sp, #12
 8001fce:	4770      	bx	lr
 8001fd0:	24000010 	.word	0x24000010

08001fd4 <malloc>:
 8001fd4:	4b02      	ldr	r3, [pc, #8]	; (8001fe0 <malloc+0xc>)
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	f000 b853 	b.w	8002084 <_malloc_r>
 8001fde:	bf00      	nop
 8001fe0:	24000010 	.word	0x24000010

08001fe4 <_free_r>:
 8001fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fe6:	2900      	cmp	r1, #0
 8001fe8:	d048      	beq.n	800207c <_free_r+0x98>
 8001fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fee:	9001      	str	r0, [sp, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8001ff6:	bfb8      	it	lt
 8001ff8:	18e4      	addlt	r4, r4, r3
 8001ffa:	f000 fe81 	bl	8002d00 <__malloc_lock>
 8001ffe:	4a20      	ldr	r2, [pc, #128]	; (8002080 <_free_r+0x9c>)
 8002000:	9801      	ldr	r0, [sp, #4]
 8002002:	6813      	ldr	r3, [r2, #0]
 8002004:	4615      	mov	r5, r2
 8002006:	b933      	cbnz	r3, 8002016 <_free_r+0x32>
 8002008:	6063      	str	r3, [r4, #4]
 800200a:	6014      	str	r4, [r2, #0]
 800200c:	b003      	add	sp, #12
 800200e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002012:	f000 be7b 	b.w	8002d0c <__malloc_unlock>
 8002016:	42a3      	cmp	r3, r4
 8002018:	d90b      	bls.n	8002032 <_free_r+0x4e>
 800201a:	6821      	ldr	r1, [r4, #0]
 800201c:	1862      	adds	r2, r4, r1
 800201e:	4293      	cmp	r3, r2
 8002020:	bf04      	itt	eq
 8002022:	681a      	ldreq	r2, [r3, #0]
 8002024:	685b      	ldreq	r3, [r3, #4]
 8002026:	6063      	str	r3, [r4, #4]
 8002028:	bf04      	itt	eq
 800202a:	1852      	addeq	r2, r2, r1
 800202c:	6022      	streq	r2, [r4, #0]
 800202e:	602c      	str	r4, [r5, #0]
 8002030:	e7ec      	b.n	800200c <_free_r+0x28>
 8002032:	461a      	mov	r2, r3
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	b10b      	cbz	r3, 800203c <_free_r+0x58>
 8002038:	42a3      	cmp	r3, r4
 800203a:	d9fa      	bls.n	8002032 <_free_r+0x4e>
 800203c:	6811      	ldr	r1, [r2, #0]
 800203e:	1855      	adds	r5, r2, r1
 8002040:	42a5      	cmp	r5, r4
 8002042:	d10b      	bne.n	800205c <_free_r+0x78>
 8002044:	6824      	ldr	r4, [r4, #0]
 8002046:	4421      	add	r1, r4
 8002048:	1854      	adds	r4, r2, r1
 800204a:	42a3      	cmp	r3, r4
 800204c:	6011      	str	r1, [r2, #0]
 800204e:	d1dd      	bne.n	800200c <_free_r+0x28>
 8002050:	681c      	ldr	r4, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	6053      	str	r3, [r2, #4]
 8002056:	4421      	add	r1, r4
 8002058:	6011      	str	r1, [r2, #0]
 800205a:	e7d7      	b.n	800200c <_free_r+0x28>
 800205c:	d902      	bls.n	8002064 <_free_r+0x80>
 800205e:	230c      	movs	r3, #12
 8002060:	6003      	str	r3, [r0, #0]
 8002062:	e7d3      	b.n	800200c <_free_r+0x28>
 8002064:	6825      	ldr	r5, [r4, #0]
 8002066:	1961      	adds	r1, r4, r5
 8002068:	428b      	cmp	r3, r1
 800206a:	bf04      	itt	eq
 800206c:	6819      	ldreq	r1, [r3, #0]
 800206e:	685b      	ldreq	r3, [r3, #4]
 8002070:	6063      	str	r3, [r4, #4]
 8002072:	bf04      	itt	eq
 8002074:	1949      	addeq	r1, r1, r5
 8002076:	6021      	streq	r1, [r4, #0]
 8002078:	6054      	str	r4, [r2, #4]
 800207a:	e7c7      	b.n	800200c <_free_r+0x28>
 800207c:	b003      	add	sp, #12
 800207e:	bd30      	pop	{r4, r5, pc}
 8002080:	24000094 	.word	0x24000094

08002084 <_malloc_r>:
 8002084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002086:	1ccd      	adds	r5, r1, #3
 8002088:	f025 0503 	bic.w	r5, r5, #3
 800208c:	3508      	adds	r5, #8
 800208e:	2d0c      	cmp	r5, #12
 8002090:	bf38      	it	cc
 8002092:	250c      	movcc	r5, #12
 8002094:	2d00      	cmp	r5, #0
 8002096:	4606      	mov	r6, r0
 8002098:	db01      	blt.n	800209e <_malloc_r+0x1a>
 800209a:	42a9      	cmp	r1, r5
 800209c:	d903      	bls.n	80020a6 <_malloc_r+0x22>
 800209e:	230c      	movs	r3, #12
 80020a0:	6033      	str	r3, [r6, #0]
 80020a2:	2000      	movs	r0, #0
 80020a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020a6:	f000 fe2b 	bl	8002d00 <__malloc_lock>
 80020aa:	4921      	ldr	r1, [pc, #132]	; (8002130 <_malloc_r+0xac>)
 80020ac:	680a      	ldr	r2, [r1, #0]
 80020ae:	4614      	mov	r4, r2
 80020b0:	b99c      	cbnz	r4, 80020da <_malloc_r+0x56>
 80020b2:	4f20      	ldr	r7, [pc, #128]	; (8002134 <_malloc_r+0xb0>)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b923      	cbnz	r3, 80020c2 <_malloc_r+0x3e>
 80020b8:	4621      	mov	r1, r4
 80020ba:	4630      	mov	r0, r6
 80020bc:	f000 fb2a 	bl	8002714 <_sbrk_r>
 80020c0:	6038      	str	r0, [r7, #0]
 80020c2:	4629      	mov	r1, r5
 80020c4:	4630      	mov	r0, r6
 80020c6:	f000 fb25 	bl	8002714 <_sbrk_r>
 80020ca:	1c43      	adds	r3, r0, #1
 80020cc:	d123      	bne.n	8002116 <_malloc_r+0x92>
 80020ce:	230c      	movs	r3, #12
 80020d0:	6033      	str	r3, [r6, #0]
 80020d2:	4630      	mov	r0, r6
 80020d4:	f000 fe1a 	bl	8002d0c <__malloc_unlock>
 80020d8:	e7e3      	b.n	80020a2 <_malloc_r+0x1e>
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	1b5b      	subs	r3, r3, r5
 80020de:	d417      	bmi.n	8002110 <_malloc_r+0x8c>
 80020e0:	2b0b      	cmp	r3, #11
 80020e2:	d903      	bls.n	80020ec <_malloc_r+0x68>
 80020e4:	6023      	str	r3, [r4, #0]
 80020e6:	441c      	add	r4, r3
 80020e8:	6025      	str	r5, [r4, #0]
 80020ea:	e004      	b.n	80020f6 <_malloc_r+0x72>
 80020ec:	6863      	ldr	r3, [r4, #4]
 80020ee:	42a2      	cmp	r2, r4
 80020f0:	bf0c      	ite	eq
 80020f2:	600b      	streq	r3, [r1, #0]
 80020f4:	6053      	strne	r3, [r2, #4]
 80020f6:	4630      	mov	r0, r6
 80020f8:	f000 fe08 	bl	8002d0c <__malloc_unlock>
 80020fc:	f104 000b 	add.w	r0, r4, #11
 8002100:	1d23      	adds	r3, r4, #4
 8002102:	f020 0007 	bic.w	r0, r0, #7
 8002106:	1ac2      	subs	r2, r0, r3
 8002108:	d0cc      	beq.n	80020a4 <_malloc_r+0x20>
 800210a:	1a1b      	subs	r3, r3, r0
 800210c:	50a3      	str	r3, [r4, r2]
 800210e:	e7c9      	b.n	80020a4 <_malloc_r+0x20>
 8002110:	4622      	mov	r2, r4
 8002112:	6864      	ldr	r4, [r4, #4]
 8002114:	e7cc      	b.n	80020b0 <_malloc_r+0x2c>
 8002116:	1cc4      	adds	r4, r0, #3
 8002118:	f024 0403 	bic.w	r4, r4, #3
 800211c:	42a0      	cmp	r0, r4
 800211e:	d0e3      	beq.n	80020e8 <_malloc_r+0x64>
 8002120:	1a21      	subs	r1, r4, r0
 8002122:	4630      	mov	r0, r6
 8002124:	f000 faf6 	bl	8002714 <_sbrk_r>
 8002128:	3001      	adds	r0, #1
 800212a:	d1dd      	bne.n	80020e8 <_malloc_r+0x64>
 800212c:	e7cf      	b.n	80020ce <_malloc_r+0x4a>
 800212e:	bf00      	nop
 8002130:	24000094 	.word	0x24000094
 8002134:	24000098 	.word	0x24000098

08002138 <__sfputc_r>:
 8002138:	6893      	ldr	r3, [r2, #8]
 800213a:	3b01      	subs	r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	b410      	push	{r4}
 8002140:	6093      	str	r3, [r2, #8]
 8002142:	da08      	bge.n	8002156 <__sfputc_r+0x1e>
 8002144:	6994      	ldr	r4, [r2, #24]
 8002146:	42a3      	cmp	r3, r4
 8002148:	db01      	blt.n	800214e <__sfputc_r+0x16>
 800214a:	290a      	cmp	r1, #10
 800214c:	d103      	bne.n	8002156 <__sfputc_r+0x1e>
 800214e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002152:	f000 baef 	b.w	8002734 <__swbuf_r>
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	1c58      	adds	r0, r3, #1
 800215a:	6010      	str	r0, [r2, #0]
 800215c:	7019      	strb	r1, [r3, #0]
 800215e:	4608      	mov	r0, r1
 8002160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002164:	4770      	bx	lr

08002166 <__sfputs_r>:
 8002166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002168:	4606      	mov	r6, r0
 800216a:	460f      	mov	r7, r1
 800216c:	4614      	mov	r4, r2
 800216e:	18d5      	adds	r5, r2, r3
 8002170:	42ac      	cmp	r4, r5
 8002172:	d101      	bne.n	8002178 <__sfputs_r+0x12>
 8002174:	2000      	movs	r0, #0
 8002176:	e007      	b.n	8002188 <__sfputs_r+0x22>
 8002178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800217c:	463a      	mov	r2, r7
 800217e:	4630      	mov	r0, r6
 8002180:	f7ff ffda 	bl	8002138 <__sfputc_r>
 8002184:	1c43      	adds	r3, r0, #1
 8002186:	d1f3      	bne.n	8002170 <__sfputs_r+0xa>
 8002188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800218c <_vfiprintf_r>:
 800218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002190:	460d      	mov	r5, r1
 8002192:	b09d      	sub	sp, #116	; 0x74
 8002194:	4614      	mov	r4, r2
 8002196:	4698      	mov	r8, r3
 8002198:	4606      	mov	r6, r0
 800219a:	b118      	cbz	r0, 80021a4 <_vfiprintf_r+0x18>
 800219c:	6983      	ldr	r3, [r0, #24]
 800219e:	b90b      	cbnz	r3, 80021a4 <_vfiprintf_r+0x18>
 80021a0:	f000 fcaa 	bl	8002af8 <__sinit>
 80021a4:	4b89      	ldr	r3, [pc, #548]	; (80023cc <_vfiprintf_r+0x240>)
 80021a6:	429d      	cmp	r5, r3
 80021a8:	d11b      	bne.n	80021e2 <_vfiprintf_r+0x56>
 80021aa:	6875      	ldr	r5, [r6, #4]
 80021ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021ae:	07d9      	lsls	r1, r3, #31
 80021b0:	d405      	bmi.n	80021be <_vfiprintf_r+0x32>
 80021b2:	89ab      	ldrh	r3, [r5, #12]
 80021b4:	059a      	lsls	r2, r3, #22
 80021b6:	d402      	bmi.n	80021be <_vfiprintf_r+0x32>
 80021b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021ba:	f000 fd3b 	bl	8002c34 <__retarget_lock_acquire_recursive>
 80021be:	89ab      	ldrh	r3, [r5, #12]
 80021c0:	071b      	lsls	r3, r3, #28
 80021c2:	d501      	bpl.n	80021c8 <_vfiprintf_r+0x3c>
 80021c4:	692b      	ldr	r3, [r5, #16]
 80021c6:	b9eb      	cbnz	r3, 8002204 <_vfiprintf_r+0x78>
 80021c8:	4629      	mov	r1, r5
 80021ca:	4630      	mov	r0, r6
 80021cc:	f000 fb04 	bl	80027d8 <__swsetup_r>
 80021d0:	b1c0      	cbz	r0, 8002204 <_vfiprintf_r+0x78>
 80021d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021d4:	07dc      	lsls	r4, r3, #31
 80021d6:	d50e      	bpl.n	80021f6 <_vfiprintf_r+0x6a>
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	b01d      	add	sp, #116	; 0x74
 80021de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e2:	4b7b      	ldr	r3, [pc, #492]	; (80023d0 <_vfiprintf_r+0x244>)
 80021e4:	429d      	cmp	r5, r3
 80021e6:	d101      	bne.n	80021ec <_vfiprintf_r+0x60>
 80021e8:	68b5      	ldr	r5, [r6, #8]
 80021ea:	e7df      	b.n	80021ac <_vfiprintf_r+0x20>
 80021ec:	4b79      	ldr	r3, [pc, #484]	; (80023d4 <_vfiprintf_r+0x248>)
 80021ee:	429d      	cmp	r5, r3
 80021f0:	bf08      	it	eq
 80021f2:	68f5      	ldreq	r5, [r6, #12]
 80021f4:	e7da      	b.n	80021ac <_vfiprintf_r+0x20>
 80021f6:	89ab      	ldrh	r3, [r5, #12]
 80021f8:	0598      	lsls	r0, r3, #22
 80021fa:	d4ed      	bmi.n	80021d8 <_vfiprintf_r+0x4c>
 80021fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021fe:	f000 fd1a 	bl	8002c36 <__retarget_lock_release_recursive>
 8002202:	e7e9      	b.n	80021d8 <_vfiprintf_r+0x4c>
 8002204:	2300      	movs	r3, #0
 8002206:	9309      	str	r3, [sp, #36]	; 0x24
 8002208:	2320      	movs	r3, #32
 800220a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800220e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002212:	2330      	movs	r3, #48	; 0x30
 8002214:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80023d8 <_vfiprintf_r+0x24c>
 8002218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800221c:	f04f 0901 	mov.w	r9, #1
 8002220:	4623      	mov	r3, r4
 8002222:	469a      	mov	sl, r3
 8002224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002228:	b10a      	cbz	r2, 800222e <_vfiprintf_r+0xa2>
 800222a:	2a25      	cmp	r2, #37	; 0x25
 800222c:	d1f9      	bne.n	8002222 <_vfiprintf_r+0x96>
 800222e:	ebba 0b04 	subs.w	fp, sl, r4
 8002232:	d00b      	beq.n	800224c <_vfiprintf_r+0xc0>
 8002234:	465b      	mov	r3, fp
 8002236:	4622      	mov	r2, r4
 8002238:	4629      	mov	r1, r5
 800223a:	4630      	mov	r0, r6
 800223c:	f7ff ff93 	bl	8002166 <__sfputs_r>
 8002240:	3001      	adds	r0, #1
 8002242:	f000 80aa 	beq.w	800239a <_vfiprintf_r+0x20e>
 8002246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002248:	445a      	add	r2, fp
 800224a:	9209      	str	r2, [sp, #36]	; 0x24
 800224c:	f89a 3000 	ldrb.w	r3, [sl]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a2 	beq.w	800239a <_vfiprintf_r+0x20e>
 8002256:	2300      	movs	r3, #0
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002260:	f10a 0a01 	add.w	sl, sl, #1
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	9307      	str	r3, [sp, #28]
 8002268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800226c:	931a      	str	r3, [sp, #104]	; 0x68
 800226e:	4654      	mov	r4, sl
 8002270:	2205      	movs	r2, #5
 8002272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002276:	4858      	ldr	r0, [pc, #352]	; (80023d8 <_vfiprintf_r+0x24c>)
 8002278:	f7fe f832 	bl	80002e0 <memchr>
 800227c:	9a04      	ldr	r2, [sp, #16]
 800227e:	b9d8      	cbnz	r0, 80022b8 <_vfiprintf_r+0x12c>
 8002280:	06d1      	lsls	r1, r2, #27
 8002282:	bf44      	itt	mi
 8002284:	2320      	movmi	r3, #32
 8002286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800228a:	0713      	lsls	r3, r2, #28
 800228c:	bf44      	itt	mi
 800228e:	232b      	movmi	r3, #43	; 0x2b
 8002290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002294:	f89a 3000 	ldrb.w	r3, [sl]
 8002298:	2b2a      	cmp	r3, #42	; 0x2a
 800229a:	d015      	beq.n	80022c8 <_vfiprintf_r+0x13c>
 800229c:	9a07      	ldr	r2, [sp, #28]
 800229e:	4654      	mov	r4, sl
 80022a0:	2000      	movs	r0, #0
 80022a2:	f04f 0c0a 	mov.w	ip, #10
 80022a6:	4621      	mov	r1, r4
 80022a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022ac:	3b30      	subs	r3, #48	; 0x30
 80022ae:	2b09      	cmp	r3, #9
 80022b0:	d94e      	bls.n	8002350 <_vfiprintf_r+0x1c4>
 80022b2:	b1b0      	cbz	r0, 80022e2 <_vfiprintf_r+0x156>
 80022b4:	9207      	str	r2, [sp, #28]
 80022b6:	e014      	b.n	80022e2 <_vfiprintf_r+0x156>
 80022b8:	eba0 0308 	sub.w	r3, r0, r8
 80022bc:	fa09 f303 	lsl.w	r3, r9, r3
 80022c0:	4313      	orrs	r3, r2
 80022c2:	9304      	str	r3, [sp, #16]
 80022c4:	46a2      	mov	sl, r4
 80022c6:	e7d2      	b.n	800226e <_vfiprintf_r+0xe2>
 80022c8:	9b03      	ldr	r3, [sp, #12]
 80022ca:	1d19      	adds	r1, r3, #4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	9103      	str	r1, [sp, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bfbb      	ittet	lt
 80022d4:	425b      	neglt	r3, r3
 80022d6:	f042 0202 	orrlt.w	r2, r2, #2
 80022da:	9307      	strge	r3, [sp, #28]
 80022dc:	9307      	strlt	r3, [sp, #28]
 80022de:	bfb8      	it	lt
 80022e0:	9204      	strlt	r2, [sp, #16]
 80022e2:	7823      	ldrb	r3, [r4, #0]
 80022e4:	2b2e      	cmp	r3, #46	; 0x2e
 80022e6:	d10c      	bne.n	8002302 <_vfiprintf_r+0x176>
 80022e8:	7863      	ldrb	r3, [r4, #1]
 80022ea:	2b2a      	cmp	r3, #42	; 0x2a
 80022ec:	d135      	bne.n	800235a <_vfiprintf_r+0x1ce>
 80022ee:	9b03      	ldr	r3, [sp, #12]
 80022f0:	1d1a      	adds	r2, r3, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	9203      	str	r2, [sp, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bfb8      	it	lt
 80022fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80022fe:	3402      	adds	r4, #2
 8002300:	9305      	str	r3, [sp, #20]
 8002302:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80023e8 <_vfiprintf_r+0x25c>
 8002306:	7821      	ldrb	r1, [r4, #0]
 8002308:	2203      	movs	r2, #3
 800230a:	4650      	mov	r0, sl
 800230c:	f7fd ffe8 	bl	80002e0 <memchr>
 8002310:	b140      	cbz	r0, 8002324 <_vfiprintf_r+0x198>
 8002312:	2340      	movs	r3, #64	; 0x40
 8002314:	eba0 000a 	sub.w	r0, r0, sl
 8002318:	fa03 f000 	lsl.w	r0, r3, r0
 800231c:	9b04      	ldr	r3, [sp, #16]
 800231e:	4303      	orrs	r3, r0
 8002320:	3401      	adds	r4, #1
 8002322:	9304      	str	r3, [sp, #16]
 8002324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002328:	482c      	ldr	r0, [pc, #176]	; (80023dc <_vfiprintf_r+0x250>)
 800232a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800232e:	2206      	movs	r2, #6
 8002330:	f7fd ffd6 	bl	80002e0 <memchr>
 8002334:	2800      	cmp	r0, #0
 8002336:	d03f      	beq.n	80023b8 <_vfiprintf_r+0x22c>
 8002338:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <_vfiprintf_r+0x254>)
 800233a:	bb1b      	cbnz	r3, 8002384 <_vfiprintf_r+0x1f8>
 800233c:	9b03      	ldr	r3, [sp, #12]
 800233e:	3307      	adds	r3, #7
 8002340:	f023 0307 	bic.w	r3, r3, #7
 8002344:	3308      	adds	r3, #8
 8002346:	9303      	str	r3, [sp, #12]
 8002348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800234a:	443b      	add	r3, r7
 800234c:	9309      	str	r3, [sp, #36]	; 0x24
 800234e:	e767      	b.n	8002220 <_vfiprintf_r+0x94>
 8002350:	fb0c 3202 	mla	r2, ip, r2, r3
 8002354:	460c      	mov	r4, r1
 8002356:	2001      	movs	r0, #1
 8002358:	e7a5      	b.n	80022a6 <_vfiprintf_r+0x11a>
 800235a:	2300      	movs	r3, #0
 800235c:	3401      	adds	r4, #1
 800235e:	9305      	str	r3, [sp, #20]
 8002360:	4619      	mov	r1, r3
 8002362:	f04f 0c0a 	mov.w	ip, #10
 8002366:	4620      	mov	r0, r4
 8002368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800236c:	3a30      	subs	r2, #48	; 0x30
 800236e:	2a09      	cmp	r2, #9
 8002370:	d903      	bls.n	800237a <_vfiprintf_r+0x1ee>
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0c5      	beq.n	8002302 <_vfiprintf_r+0x176>
 8002376:	9105      	str	r1, [sp, #20]
 8002378:	e7c3      	b.n	8002302 <_vfiprintf_r+0x176>
 800237a:	fb0c 2101 	mla	r1, ip, r1, r2
 800237e:	4604      	mov	r4, r0
 8002380:	2301      	movs	r3, #1
 8002382:	e7f0      	b.n	8002366 <_vfiprintf_r+0x1da>
 8002384:	ab03      	add	r3, sp, #12
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	462a      	mov	r2, r5
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <_vfiprintf_r+0x258>)
 800238c:	a904      	add	r1, sp, #16
 800238e:	4630      	mov	r0, r6
 8002390:	f3af 8000 	nop.w
 8002394:	4607      	mov	r7, r0
 8002396:	1c78      	adds	r0, r7, #1
 8002398:	d1d6      	bne.n	8002348 <_vfiprintf_r+0x1bc>
 800239a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800239c:	07d9      	lsls	r1, r3, #31
 800239e:	d405      	bmi.n	80023ac <_vfiprintf_r+0x220>
 80023a0:	89ab      	ldrh	r3, [r5, #12]
 80023a2:	059a      	lsls	r2, r3, #22
 80023a4:	d402      	bmi.n	80023ac <_vfiprintf_r+0x220>
 80023a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023a8:	f000 fc45 	bl	8002c36 <__retarget_lock_release_recursive>
 80023ac:	89ab      	ldrh	r3, [r5, #12]
 80023ae:	065b      	lsls	r3, r3, #25
 80023b0:	f53f af12 	bmi.w	80021d8 <_vfiprintf_r+0x4c>
 80023b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023b6:	e711      	b.n	80021dc <_vfiprintf_r+0x50>
 80023b8:	ab03      	add	r3, sp, #12
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	462a      	mov	r2, r5
 80023be:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <_vfiprintf_r+0x258>)
 80023c0:	a904      	add	r1, sp, #16
 80023c2:	4630      	mov	r0, r6
 80023c4:	f000 f880 	bl	80024c8 <_printf_i>
 80023c8:	e7e4      	b.n	8002394 <_vfiprintf_r+0x208>
 80023ca:	bf00      	nop
 80023cc:	0800302c 	.word	0x0800302c
 80023d0:	0800304c 	.word	0x0800304c
 80023d4:	0800300c 	.word	0x0800300c
 80023d8:	08002fd6 	.word	0x08002fd6
 80023dc:	08002fe0 	.word	0x08002fe0
 80023e0:	00000000 	.word	0x00000000
 80023e4:	08002167 	.word	0x08002167
 80023e8:	08002fdc 	.word	0x08002fdc

080023ec <_printf_common>:
 80023ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023f0:	4616      	mov	r6, r2
 80023f2:	4699      	mov	r9, r3
 80023f4:	688a      	ldr	r2, [r1, #8]
 80023f6:	690b      	ldr	r3, [r1, #16]
 80023f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bfb8      	it	lt
 8002400:	4613      	movlt	r3, r2
 8002402:	6033      	str	r3, [r6, #0]
 8002404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002408:	4607      	mov	r7, r0
 800240a:	460c      	mov	r4, r1
 800240c:	b10a      	cbz	r2, 8002412 <_printf_common+0x26>
 800240e:	3301      	adds	r3, #1
 8002410:	6033      	str	r3, [r6, #0]
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	0699      	lsls	r1, r3, #26
 8002416:	bf42      	ittt	mi
 8002418:	6833      	ldrmi	r3, [r6, #0]
 800241a:	3302      	addmi	r3, #2
 800241c:	6033      	strmi	r3, [r6, #0]
 800241e:	6825      	ldr	r5, [r4, #0]
 8002420:	f015 0506 	ands.w	r5, r5, #6
 8002424:	d106      	bne.n	8002434 <_printf_common+0x48>
 8002426:	f104 0a19 	add.w	sl, r4, #25
 800242a:	68e3      	ldr	r3, [r4, #12]
 800242c:	6832      	ldr	r2, [r6, #0]
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	42ab      	cmp	r3, r5
 8002432:	dc26      	bgt.n	8002482 <_printf_common+0x96>
 8002434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002438:	1e13      	subs	r3, r2, #0
 800243a:	6822      	ldr	r2, [r4, #0]
 800243c:	bf18      	it	ne
 800243e:	2301      	movne	r3, #1
 8002440:	0692      	lsls	r2, r2, #26
 8002442:	d42b      	bmi.n	800249c <_printf_common+0xb0>
 8002444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002448:	4649      	mov	r1, r9
 800244a:	4638      	mov	r0, r7
 800244c:	47c0      	blx	r8
 800244e:	3001      	adds	r0, #1
 8002450:	d01e      	beq.n	8002490 <_printf_common+0xa4>
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	68e5      	ldr	r5, [r4, #12]
 8002456:	6832      	ldr	r2, [r6, #0]
 8002458:	f003 0306 	and.w	r3, r3, #6
 800245c:	2b04      	cmp	r3, #4
 800245e:	bf08      	it	eq
 8002460:	1aad      	subeq	r5, r5, r2
 8002462:	68a3      	ldr	r3, [r4, #8]
 8002464:	6922      	ldr	r2, [r4, #16]
 8002466:	bf0c      	ite	eq
 8002468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800246c:	2500      	movne	r5, #0
 800246e:	4293      	cmp	r3, r2
 8002470:	bfc4      	itt	gt
 8002472:	1a9b      	subgt	r3, r3, r2
 8002474:	18ed      	addgt	r5, r5, r3
 8002476:	2600      	movs	r6, #0
 8002478:	341a      	adds	r4, #26
 800247a:	42b5      	cmp	r5, r6
 800247c:	d11a      	bne.n	80024b4 <_printf_common+0xc8>
 800247e:	2000      	movs	r0, #0
 8002480:	e008      	b.n	8002494 <_printf_common+0xa8>
 8002482:	2301      	movs	r3, #1
 8002484:	4652      	mov	r2, sl
 8002486:	4649      	mov	r1, r9
 8002488:	4638      	mov	r0, r7
 800248a:	47c0      	blx	r8
 800248c:	3001      	adds	r0, #1
 800248e:	d103      	bne.n	8002498 <_printf_common+0xac>
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002498:	3501      	adds	r5, #1
 800249a:	e7c6      	b.n	800242a <_printf_common+0x3e>
 800249c:	18e1      	adds	r1, r4, r3
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	2030      	movs	r0, #48	; 0x30
 80024a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024a6:	4422      	add	r2, r4
 80024a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024b0:	3302      	adds	r3, #2
 80024b2:	e7c7      	b.n	8002444 <_printf_common+0x58>
 80024b4:	2301      	movs	r3, #1
 80024b6:	4622      	mov	r2, r4
 80024b8:	4649      	mov	r1, r9
 80024ba:	4638      	mov	r0, r7
 80024bc:	47c0      	blx	r8
 80024be:	3001      	adds	r0, #1
 80024c0:	d0e6      	beq.n	8002490 <_printf_common+0xa4>
 80024c2:	3601      	adds	r6, #1
 80024c4:	e7d9      	b.n	800247a <_printf_common+0x8e>
	...

080024c8 <_printf_i>:
 80024c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024cc:	460c      	mov	r4, r1
 80024ce:	4691      	mov	r9, r2
 80024d0:	7e27      	ldrb	r7, [r4, #24]
 80024d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80024d4:	2f78      	cmp	r7, #120	; 0x78
 80024d6:	4680      	mov	r8, r0
 80024d8:	469a      	mov	sl, r3
 80024da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024de:	d807      	bhi.n	80024f0 <_printf_i+0x28>
 80024e0:	2f62      	cmp	r7, #98	; 0x62
 80024e2:	d80a      	bhi.n	80024fa <_printf_i+0x32>
 80024e4:	2f00      	cmp	r7, #0
 80024e6:	f000 80d8 	beq.w	800269a <_printf_i+0x1d2>
 80024ea:	2f58      	cmp	r7, #88	; 0x58
 80024ec:	f000 80a3 	beq.w	8002636 <_printf_i+0x16e>
 80024f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80024f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024f8:	e03a      	b.n	8002570 <_printf_i+0xa8>
 80024fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024fe:	2b15      	cmp	r3, #21
 8002500:	d8f6      	bhi.n	80024f0 <_printf_i+0x28>
 8002502:	a001      	add	r0, pc, #4	; (adr r0, 8002508 <_printf_i+0x40>)
 8002504:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002508:	08002561 	.word	0x08002561
 800250c:	08002575 	.word	0x08002575
 8002510:	080024f1 	.word	0x080024f1
 8002514:	080024f1 	.word	0x080024f1
 8002518:	080024f1 	.word	0x080024f1
 800251c:	080024f1 	.word	0x080024f1
 8002520:	08002575 	.word	0x08002575
 8002524:	080024f1 	.word	0x080024f1
 8002528:	080024f1 	.word	0x080024f1
 800252c:	080024f1 	.word	0x080024f1
 8002530:	080024f1 	.word	0x080024f1
 8002534:	08002681 	.word	0x08002681
 8002538:	080025a5 	.word	0x080025a5
 800253c:	08002663 	.word	0x08002663
 8002540:	080024f1 	.word	0x080024f1
 8002544:	080024f1 	.word	0x080024f1
 8002548:	080026a3 	.word	0x080026a3
 800254c:	080024f1 	.word	0x080024f1
 8002550:	080025a5 	.word	0x080025a5
 8002554:	080024f1 	.word	0x080024f1
 8002558:	080024f1 	.word	0x080024f1
 800255c:	0800266b 	.word	0x0800266b
 8002560:	680b      	ldr	r3, [r1, #0]
 8002562:	1d1a      	adds	r2, r3, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	600a      	str	r2, [r1, #0]
 8002568:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800256c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002570:	2301      	movs	r3, #1
 8002572:	e0a3      	b.n	80026bc <_printf_i+0x1f4>
 8002574:	6825      	ldr	r5, [r4, #0]
 8002576:	6808      	ldr	r0, [r1, #0]
 8002578:	062e      	lsls	r6, r5, #24
 800257a:	f100 0304 	add.w	r3, r0, #4
 800257e:	d50a      	bpl.n	8002596 <_printf_i+0xce>
 8002580:	6805      	ldr	r5, [r0, #0]
 8002582:	600b      	str	r3, [r1, #0]
 8002584:	2d00      	cmp	r5, #0
 8002586:	da03      	bge.n	8002590 <_printf_i+0xc8>
 8002588:	232d      	movs	r3, #45	; 0x2d
 800258a:	426d      	negs	r5, r5
 800258c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002590:	485e      	ldr	r0, [pc, #376]	; (800270c <_printf_i+0x244>)
 8002592:	230a      	movs	r3, #10
 8002594:	e019      	b.n	80025ca <_printf_i+0x102>
 8002596:	f015 0f40 	tst.w	r5, #64	; 0x40
 800259a:	6805      	ldr	r5, [r0, #0]
 800259c:	600b      	str	r3, [r1, #0]
 800259e:	bf18      	it	ne
 80025a0:	b22d      	sxthne	r5, r5
 80025a2:	e7ef      	b.n	8002584 <_printf_i+0xbc>
 80025a4:	680b      	ldr	r3, [r1, #0]
 80025a6:	6825      	ldr	r5, [r4, #0]
 80025a8:	1d18      	adds	r0, r3, #4
 80025aa:	6008      	str	r0, [r1, #0]
 80025ac:	0628      	lsls	r0, r5, #24
 80025ae:	d501      	bpl.n	80025b4 <_printf_i+0xec>
 80025b0:	681d      	ldr	r5, [r3, #0]
 80025b2:	e002      	b.n	80025ba <_printf_i+0xf2>
 80025b4:	0669      	lsls	r1, r5, #25
 80025b6:	d5fb      	bpl.n	80025b0 <_printf_i+0xe8>
 80025b8:	881d      	ldrh	r5, [r3, #0]
 80025ba:	4854      	ldr	r0, [pc, #336]	; (800270c <_printf_i+0x244>)
 80025bc:	2f6f      	cmp	r7, #111	; 0x6f
 80025be:	bf0c      	ite	eq
 80025c0:	2308      	moveq	r3, #8
 80025c2:	230a      	movne	r3, #10
 80025c4:	2100      	movs	r1, #0
 80025c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025ca:	6866      	ldr	r6, [r4, #4]
 80025cc:	60a6      	str	r6, [r4, #8]
 80025ce:	2e00      	cmp	r6, #0
 80025d0:	bfa2      	ittt	ge
 80025d2:	6821      	ldrge	r1, [r4, #0]
 80025d4:	f021 0104 	bicge.w	r1, r1, #4
 80025d8:	6021      	strge	r1, [r4, #0]
 80025da:	b90d      	cbnz	r5, 80025e0 <_printf_i+0x118>
 80025dc:	2e00      	cmp	r6, #0
 80025de:	d04d      	beq.n	800267c <_printf_i+0x1b4>
 80025e0:	4616      	mov	r6, r2
 80025e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80025e6:	fb03 5711 	mls	r7, r3, r1, r5
 80025ea:	5dc7      	ldrb	r7, [r0, r7]
 80025ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025f0:	462f      	mov	r7, r5
 80025f2:	42bb      	cmp	r3, r7
 80025f4:	460d      	mov	r5, r1
 80025f6:	d9f4      	bls.n	80025e2 <_printf_i+0x11a>
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d10b      	bne.n	8002614 <_printf_i+0x14c>
 80025fc:	6823      	ldr	r3, [r4, #0]
 80025fe:	07df      	lsls	r7, r3, #31
 8002600:	d508      	bpl.n	8002614 <_printf_i+0x14c>
 8002602:	6923      	ldr	r3, [r4, #16]
 8002604:	6861      	ldr	r1, [r4, #4]
 8002606:	4299      	cmp	r1, r3
 8002608:	bfde      	ittt	le
 800260a:	2330      	movle	r3, #48	; 0x30
 800260c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002610:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002614:	1b92      	subs	r2, r2, r6
 8002616:	6122      	str	r2, [r4, #16]
 8002618:	f8cd a000 	str.w	sl, [sp]
 800261c:	464b      	mov	r3, r9
 800261e:	aa03      	add	r2, sp, #12
 8002620:	4621      	mov	r1, r4
 8002622:	4640      	mov	r0, r8
 8002624:	f7ff fee2 	bl	80023ec <_printf_common>
 8002628:	3001      	adds	r0, #1
 800262a:	d14c      	bne.n	80026c6 <_printf_i+0x1fe>
 800262c:	f04f 30ff 	mov.w	r0, #4294967295
 8002630:	b004      	add	sp, #16
 8002632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002636:	4835      	ldr	r0, [pc, #212]	; (800270c <_printf_i+0x244>)
 8002638:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	680e      	ldr	r6, [r1, #0]
 8002640:	061f      	lsls	r7, r3, #24
 8002642:	f856 5b04 	ldr.w	r5, [r6], #4
 8002646:	600e      	str	r6, [r1, #0]
 8002648:	d514      	bpl.n	8002674 <_printf_i+0x1ac>
 800264a:	07d9      	lsls	r1, r3, #31
 800264c:	bf44      	itt	mi
 800264e:	f043 0320 	orrmi.w	r3, r3, #32
 8002652:	6023      	strmi	r3, [r4, #0]
 8002654:	b91d      	cbnz	r5, 800265e <_printf_i+0x196>
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	f023 0320 	bic.w	r3, r3, #32
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	2310      	movs	r3, #16
 8002660:	e7b0      	b.n	80025c4 <_printf_i+0xfc>
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	f043 0320 	orr.w	r3, r3, #32
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	2378      	movs	r3, #120	; 0x78
 800266c:	4828      	ldr	r0, [pc, #160]	; (8002710 <_printf_i+0x248>)
 800266e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002672:	e7e3      	b.n	800263c <_printf_i+0x174>
 8002674:	065e      	lsls	r6, r3, #25
 8002676:	bf48      	it	mi
 8002678:	b2ad      	uxthmi	r5, r5
 800267a:	e7e6      	b.n	800264a <_printf_i+0x182>
 800267c:	4616      	mov	r6, r2
 800267e:	e7bb      	b.n	80025f8 <_printf_i+0x130>
 8002680:	680b      	ldr	r3, [r1, #0]
 8002682:	6826      	ldr	r6, [r4, #0]
 8002684:	6960      	ldr	r0, [r4, #20]
 8002686:	1d1d      	adds	r5, r3, #4
 8002688:	600d      	str	r5, [r1, #0]
 800268a:	0635      	lsls	r5, r6, #24
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	d501      	bpl.n	8002694 <_printf_i+0x1cc>
 8002690:	6018      	str	r0, [r3, #0]
 8002692:	e002      	b.n	800269a <_printf_i+0x1d2>
 8002694:	0671      	lsls	r1, r6, #25
 8002696:	d5fb      	bpl.n	8002690 <_printf_i+0x1c8>
 8002698:	8018      	strh	r0, [r3, #0]
 800269a:	2300      	movs	r3, #0
 800269c:	6123      	str	r3, [r4, #16]
 800269e:	4616      	mov	r6, r2
 80026a0:	e7ba      	b.n	8002618 <_printf_i+0x150>
 80026a2:	680b      	ldr	r3, [r1, #0]
 80026a4:	1d1a      	adds	r2, r3, #4
 80026a6:	600a      	str	r2, [r1, #0]
 80026a8:	681e      	ldr	r6, [r3, #0]
 80026aa:	6862      	ldr	r2, [r4, #4]
 80026ac:	2100      	movs	r1, #0
 80026ae:	4630      	mov	r0, r6
 80026b0:	f7fd fe16 	bl	80002e0 <memchr>
 80026b4:	b108      	cbz	r0, 80026ba <_printf_i+0x1f2>
 80026b6:	1b80      	subs	r0, r0, r6
 80026b8:	6060      	str	r0, [r4, #4]
 80026ba:	6863      	ldr	r3, [r4, #4]
 80026bc:	6123      	str	r3, [r4, #16]
 80026be:	2300      	movs	r3, #0
 80026c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026c4:	e7a8      	b.n	8002618 <_printf_i+0x150>
 80026c6:	6923      	ldr	r3, [r4, #16]
 80026c8:	4632      	mov	r2, r6
 80026ca:	4649      	mov	r1, r9
 80026cc:	4640      	mov	r0, r8
 80026ce:	47d0      	blx	sl
 80026d0:	3001      	adds	r0, #1
 80026d2:	d0ab      	beq.n	800262c <_printf_i+0x164>
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	079b      	lsls	r3, r3, #30
 80026d8:	d413      	bmi.n	8002702 <_printf_i+0x23a>
 80026da:	68e0      	ldr	r0, [r4, #12]
 80026dc:	9b03      	ldr	r3, [sp, #12]
 80026de:	4298      	cmp	r0, r3
 80026e0:	bfb8      	it	lt
 80026e2:	4618      	movlt	r0, r3
 80026e4:	e7a4      	b.n	8002630 <_printf_i+0x168>
 80026e6:	2301      	movs	r3, #1
 80026e8:	4632      	mov	r2, r6
 80026ea:	4649      	mov	r1, r9
 80026ec:	4640      	mov	r0, r8
 80026ee:	47d0      	blx	sl
 80026f0:	3001      	adds	r0, #1
 80026f2:	d09b      	beq.n	800262c <_printf_i+0x164>
 80026f4:	3501      	adds	r5, #1
 80026f6:	68e3      	ldr	r3, [r4, #12]
 80026f8:	9903      	ldr	r1, [sp, #12]
 80026fa:	1a5b      	subs	r3, r3, r1
 80026fc:	42ab      	cmp	r3, r5
 80026fe:	dcf2      	bgt.n	80026e6 <_printf_i+0x21e>
 8002700:	e7eb      	b.n	80026da <_printf_i+0x212>
 8002702:	2500      	movs	r5, #0
 8002704:	f104 0619 	add.w	r6, r4, #25
 8002708:	e7f5      	b.n	80026f6 <_printf_i+0x22e>
 800270a:	bf00      	nop
 800270c:	08002fe7 	.word	0x08002fe7
 8002710:	08002ff8 	.word	0x08002ff8

08002714 <_sbrk_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4d06      	ldr	r5, [pc, #24]	; (8002730 <_sbrk_r+0x1c>)
 8002718:	2300      	movs	r3, #0
 800271a:	4604      	mov	r4, r0
 800271c:	4608      	mov	r0, r1
 800271e:	602b      	str	r3, [r5, #0]
 8002720:	f7fd ffd6 	bl	80006d0 <_sbrk>
 8002724:	1c43      	adds	r3, r0, #1
 8002726:	d102      	bne.n	800272e <_sbrk_r+0x1a>
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	b103      	cbz	r3, 800272e <_sbrk_r+0x1a>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	240000ac 	.word	0x240000ac

08002734 <__swbuf_r>:
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002736:	460e      	mov	r6, r1
 8002738:	4614      	mov	r4, r2
 800273a:	4605      	mov	r5, r0
 800273c:	b118      	cbz	r0, 8002746 <__swbuf_r+0x12>
 800273e:	6983      	ldr	r3, [r0, #24]
 8002740:	b90b      	cbnz	r3, 8002746 <__swbuf_r+0x12>
 8002742:	f000 f9d9 	bl	8002af8 <__sinit>
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <__swbuf_r+0x98>)
 8002748:	429c      	cmp	r4, r3
 800274a:	d12b      	bne.n	80027a4 <__swbuf_r+0x70>
 800274c:	686c      	ldr	r4, [r5, #4]
 800274e:	69a3      	ldr	r3, [r4, #24]
 8002750:	60a3      	str	r3, [r4, #8]
 8002752:	89a3      	ldrh	r3, [r4, #12]
 8002754:	071a      	lsls	r2, r3, #28
 8002756:	d52f      	bpl.n	80027b8 <__swbuf_r+0x84>
 8002758:	6923      	ldr	r3, [r4, #16]
 800275a:	b36b      	cbz	r3, 80027b8 <__swbuf_r+0x84>
 800275c:	6923      	ldr	r3, [r4, #16]
 800275e:	6820      	ldr	r0, [r4, #0]
 8002760:	1ac0      	subs	r0, r0, r3
 8002762:	6963      	ldr	r3, [r4, #20]
 8002764:	b2f6      	uxtb	r6, r6
 8002766:	4283      	cmp	r3, r0
 8002768:	4637      	mov	r7, r6
 800276a:	dc04      	bgt.n	8002776 <__swbuf_r+0x42>
 800276c:	4621      	mov	r1, r4
 800276e:	4628      	mov	r0, r5
 8002770:	f000 f92e 	bl	80029d0 <_fflush_r>
 8002774:	bb30      	cbnz	r0, 80027c4 <__swbuf_r+0x90>
 8002776:	68a3      	ldr	r3, [r4, #8]
 8002778:	3b01      	subs	r3, #1
 800277a:	60a3      	str	r3, [r4, #8]
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	6022      	str	r2, [r4, #0]
 8002782:	701e      	strb	r6, [r3, #0]
 8002784:	6963      	ldr	r3, [r4, #20]
 8002786:	3001      	adds	r0, #1
 8002788:	4283      	cmp	r3, r0
 800278a:	d004      	beq.n	8002796 <__swbuf_r+0x62>
 800278c:	89a3      	ldrh	r3, [r4, #12]
 800278e:	07db      	lsls	r3, r3, #31
 8002790:	d506      	bpl.n	80027a0 <__swbuf_r+0x6c>
 8002792:	2e0a      	cmp	r6, #10
 8002794:	d104      	bne.n	80027a0 <__swbuf_r+0x6c>
 8002796:	4621      	mov	r1, r4
 8002798:	4628      	mov	r0, r5
 800279a:	f000 f919 	bl	80029d0 <_fflush_r>
 800279e:	b988      	cbnz	r0, 80027c4 <__swbuf_r+0x90>
 80027a0:	4638      	mov	r0, r7
 80027a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <__swbuf_r+0x9c>)
 80027a6:	429c      	cmp	r4, r3
 80027a8:	d101      	bne.n	80027ae <__swbuf_r+0x7a>
 80027aa:	68ac      	ldr	r4, [r5, #8]
 80027ac:	e7cf      	b.n	800274e <__swbuf_r+0x1a>
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <__swbuf_r+0xa0>)
 80027b0:	429c      	cmp	r4, r3
 80027b2:	bf08      	it	eq
 80027b4:	68ec      	ldreq	r4, [r5, #12]
 80027b6:	e7ca      	b.n	800274e <__swbuf_r+0x1a>
 80027b8:	4621      	mov	r1, r4
 80027ba:	4628      	mov	r0, r5
 80027bc:	f000 f80c 	bl	80027d8 <__swsetup_r>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d0cb      	beq.n	800275c <__swbuf_r+0x28>
 80027c4:	f04f 37ff 	mov.w	r7, #4294967295
 80027c8:	e7ea      	b.n	80027a0 <__swbuf_r+0x6c>
 80027ca:	bf00      	nop
 80027cc:	0800302c 	.word	0x0800302c
 80027d0:	0800304c 	.word	0x0800304c
 80027d4:	0800300c 	.word	0x0800300c

080027d8 <__swsetup_r>:
 80027d8:	4b32      	ldr	r3, [pc, #200]	; (80028a4 <__swsetup_r+0xcc>)
 80027da:	b570      	push	{r4, r5, r6, lr}
 80027dc:	681d      	ldr	r5, [r3, #0]
 80027de:	4606      	mov	r6, r0
 80027e0:	460c      	mov	r4, r1
 80027e2:	b125      	cbz	r5, 80027ee <__swsetup_r+0x16>
 80027e4:	69ab      	ldr	r3, [r5, #24]
 80027e6:	b913      	cbnz	r3, 80027ee <__swsetup_r+0x16>
 80027e8:	4628      	mov	r0, r5
 80027ea:	f000 f985 	bl	8002af8 <__sinit>
 80027ee:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <__swsetup_r+0xd0>)
 80027f0:	429c      	cmp	r4, r3
 80027f2:	d10f      	bne.n	8002814 <__swsetup_r+0x3c>
 80027f4:	686c      	ldr	r4, [r5, #4]
 80027f6:	89a3      	ldrh	r3, [r4, #12]
 80027f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027fc:	0719      	lsls	r1, r3, #28
 80027fe:	d42c      	bmi.n	800285a <__swsetup_r+0x82>
 8002800:	06dd      	lsls	r5, r3, #27
 8002802:	d411      	bmi.n	8002828 <__swsetup_r+0x50>
 8002804:	2309      	movs	r3, #9
 8002806:	6033      	str	r3, [r6, #0]
 8002808:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800280c:	81a3      	strh	r3, [r4, #12]
 800280e:	f04f 30ff 	mov.w	r0, #4294967295
 8002812:	e03e      	b.n	8002892 <__swsetup_r+0xba>
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <__swsetup_r+0xd4>)
 8002816:	429c      	cmp	r4, r3
 8002818:	d101      	bne.n	800281e <__swsetup_r+0x46>
 800281a:	68ac      	ldr	r4, [r5, #8]
 800281c:	e7eb      	b.n	80027f6 <__swsetup_r+0x1e>
 800281e:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <__swsetup_r+0xd8>)
 8002820:	429c      	cmp	r4, r3
 8002822:	bf08      	it	eq
 8002824:	68ec      	ldreq	r4, [r5, #12]
 8002826:	e7e6      	b.n	80027f6 <__swsetup_r+0x1e>
 8002828:	0758      	lsls	r0, r3, #29
 800282a:	d512      	bpl.n	8002852 <__swsetup_r+0x7a>
 800282c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800282e:	b141      	cbz	r1, 8002842 <__swsetup_r+0x6a>
 8002830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002834:	4299      	cmp	r1, r3
 8002836:	d002      	beq.n	800283e <__swsetup_r+0x66>
 8002838:	4630      	mov	r0, r6
 800283a:	f7ff fbd3 	bl	8001fe4 <_free_r>
 800283e:	2300      	movs	r3, #0
 8002840:	6363      	str	r3, [r4, #52]	; 0x34
 8002842:	89a3      	ldrh	r3, [r4, #12]
 8002844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002848:	81a3      	strh	r3, [r4, #12]
 800284a:	2300      	movs	r3, #0
 800284c:	6063      	str	r3, [r4, #4]
 800284e:	6923      	ldr	r3, [r4, #16]
 8002850:	6023      	str	r3, [r4, #0]
 8002852:	89a3      	ldrh	r3, [r4, #12]
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	81a3      	strh	r3, [r4, #12]
 800285a:	6923      	ldr	r3, [r4, #16]
 800285c:	b94b      	cbnz	r3, 8002872 <__swsetup_r+0x9a>
 800285e:	89a3      	ldrh	r3, [r4, #12]
 8002860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002868:	d003      	beq.n	8002872 <__swsetup_r+0x9a>
 800286a:	4621      	mov	r1, r4
 800286c:	4630      	mov	r0, r6
 800286e:	f000 fa07 	bl	8002c80 <__smakebuf_r>
 8002872:	89a0      	ldrh	r0, [r4, #12]
 8002874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002878:	f010 0301 	ands.w	r3, r0, #1
 800287c:	d00a      	beq.n	8002894 <__swsetup_r+0xbc>
 800287e:	2300      	movs	r3, #0
 8002880:	60a3      	str	r3, [r4, #8]
 8002882:	6963      	ldr	r3, [r4, #20]
 8002884:	425b      	negs	r3, r3
 8002886:	61a3      	str	r3, [r4, #24]
 8002888:	6923      	ldr	r3, [r4, #16]
 800288a:	b943      	cbnz	r3, 800289e <__swsetup_r+0xc6>
 800288c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002890:	d1ba      	bne.n	8002808 <__swsetup_r+0x30>
 8002892:	bd70      	pop	{r4, r5, r6, pc}
 8002894:	0781      	lsls	r1, r0, #30
 8002896:	bf58      	it	pl
 8002898:	6963      	ldrpl	r3, [r4, #20]
 800289a:	60a3      	str	r3, [r4, #8]
 800289c:	e7f4      	b.n	8002888 <__swsetup_r+0xb0>
 800289e:	2000      	movs	r0, #0
 80028a0:	e7f7      	b.n	8002892 <__swsetup_r+0xba>
 80028a2:	bf00      	nop
 80028a4:	24000010 	.word	0x24000010
 80028a8:	0800302c 	.word	0x0800302c
 80028ac:	0800304c 	.word	0x0800304c
 80028b0:	0800300c 	.word	0x0800300c

080028b4 <abort>:
 80028b4:	b508      	push	{r3, lr}
 80028b6:	2006      	movs	r0, #6
 80028b8:	f000 fa56 	bl	8002d68 <raise>
 80028bc:	2001      	movs	r0, #1
 80028be:	f7fd fe8f 	bl	80005e0 <_exit>
	...

080028c4 <__sflush_r>:
 80028c4:	898a      	ldrh	r2, [r1, #12]
 80028c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ca:	4605      	mov	r5, r0
 80028cc:	0710      	lsls	r0, r2, #28
 80028ce:	460c      	mov	r4, r1
 80028d0:	d458      	bmi.n	8002984 <__sflush_r+0xc0>
 80028d2:	684b      	ldr	r3, [r1, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	dc05      	bgt.n	80028e4 <__sflush_r+0x20>
 80028d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	dc02      	bgt.n	80028e4 <__sflush_r+0x20>
 80028de:	2000      	movs	r0, #0
 80028e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028e6:	2e00      	cmp	r6, #0
 80028e8:	d0f9      	beq.n	80028de <__sflush_r+0x1a>
 80028ea:	2300      	movs	r3, #0
 80028ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028f0:	682f      	ldr	r7, [r5, #0]
 80028f2:	602b      	str	r3, [r5, #0]
 80028f4:	d032      	beq.n	800295c <__sflush_r+0x98>
 80028f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	075a      	lsls	r2, r3, #29
 80028fc:	d505      	bpl.n	800290a <__sflush_r+0x46>
 80028fe:	6863      	ldr	r3, [r4, #4]
 8002900:	1ac0      	subs	r0, r0, r3
 8002902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002904:	b10b      	cbz	r3, 800290a <__sflush_r+0x46>
 8002906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002908:	1ac0      	subs	r0, r0, r3
 800290a:	2300      	movs	r3, #0
 800290c:	4602      	mov	r2, r0
 800290e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002910:	6a21      	ldr	r1, [r4, #32]
 8002912:	4628      	mov	r0, r5
 8002914:	47b0      	blx	r6
 8002916:	1c43      	adds	r3, r0, #1
 8002918:	89a3      	ldrh	r3, [r4, #12]
 800291a:	d106      	bne.n	800292a <__sflush_r+0x66>
 800291c:	6829      	ldr	r1, [r5, #0]
 800291e:	291d      	cmp	r1, #29
 8002920:	d82c      	bhi.n	800297c <__sflush_r+0xb8>
 8002922:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <__sflush_r+0x108>)
 8002924:	40ca      	lsrs	r2, r1
 8002926:	07d6      	lsls	r6, r2, #31
 8002928:	d528      	bpl.n	800297c <__sflush_r+0xb8>
 800292a:	2200      	movs	r2, #0
 800292c:	6062      	str	r2, [r4, #4]
 800292e:	04d9      	lsls	r1, r3, #19
 8002930:	6922      	ldr	r2, [r4, #16]
 8002932:	6022      	str	r2, [r4, #0]
 8002934:	d504      	bpl.n	8002940 <__sflush_r+0x7c>
 8002936:	1c42      	adds	r2, r0, #1
 8002938:	d101      	bne.n	800293e <__sflush_r+0x7a>
 800293a:	682b      	ldr	r3, [r5, #0]
 800293c:	b903      	cbnz	r3, 8002940 <__sflush_r+0x7c>
 800293e:	6560      	str	r0, [r4, #84]	; 0x54
 8002940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002942:	602f      	str	r7, [r5, #0]
 8002944:	2900      	cmp	r1, #0
 8002946:	d0ca      	beq.n	80028de <__sflush_r+0x1a>
 8002948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800294c:	4299      	cmp	r1, r3
 800294e:	d002      	beq.n	8002956 <__sflush_r+0x92>
 8002950:	4628      	mov	r0, r5
 8002952:	f7ff fb47 	bl	8001fe4 <_free_r>
 8002956:	2000      	movs	r0, #0
 8002958:	6360      	str	r0, [r4, #52]	; 0x34
 800295a:	e7c1      	b.n	80028e0 <__sflush_r+0x1c>
 800295c:	6a21      	ldr	r1, [r4, #32]
 800295e:	2301      	movs	r3, #1
 8002960:	4628      	mov	r0, r5
 8002962:	47b0      	blx	r6
 8002964:	1c41      	adds	r1, r0, #1
 8002966:	d1c7      	bne.n	80028f8 <__sflush_r+0x34>
 8002968:	682b      	ldr	r3, [r5, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0c4      	beq.n	80028f8 <__sflush_r+0x34>
 800296e:	2b1d      	cmp	r3, #29
 8002970:	d001      	beq.n	8002976 <__sflush_r+0xb2>
 8002972:	2b16      	cmp	r3, #22
 8002974:	d101      	bne.n	800297a <__sflush_r+0xb6>
 8002976:	602f      	str	r7, [r5, #0]
 8002978:	e7b1      	b.n	80028de <__sflush_r+0x1a>
 800297a:	89a3      	ldrh	r3, [r4, #12]
 800297c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002980:	81a3      	strh	r3, [r4, #12]
 8002982:	e7ad      	b.n	80028e0 <__sflush_r+0x1c>
 8002984:	690f      	ldr	r7, [r1, #16]
 8002986:	2f00      	cmp	r7, #0
 8002988:	d0a9      	beq.n	80028de <__sflush_r+0x1a>
 800298a:	0793      	lsls	r3, r2, #30
 800298c:	680e      	ldr	r6, [r1, #0]
 800298e:	bf08      	it	eq
 8002990:	694b      	ldreq	r3, [r1, #20]
 8002992:	600f      	str	r7, [r1, #0]
 8002994:	bf18      	it	ne
 8002996:	2300      	movne	r3, #0
 8002998:	eba6 0807 	sub.w	r8, r6, r7
 800299c:	608b      	str	r3, [r1, #8]
 800299e:	f1b8 0f00 	cmp.w	r8, #0
 80029a2:	dd9c      	ble.n	80028de <__sflush_r+0x1a>
 80029a4:	6a21      	ldr	r1, [r4, #32]
 80029a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80029a8:	4643      	mov	r3, r8
 80029aa:	463a      	mov	r2, r7
 80029ac:	4628      	mov	r0, r5
 80029ae:	47b0      	blx	r6
 80029b0:	2800      	cmp	r0, #0
 80029b2:	dc06      	bgt.n	80029c2 <__sflush_r+0xfe>
 80029b4:	89a3      	ldrh	r3, [r4, #12]
 80029b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ba:	81a3      	strh	r3, [r4, #12]
 80029bc:	f04f 30ff 	mov.w	r0, #4294967295
 80029c0:	e78e      	b.n	80028e0 <__sflush_r+0x1c>
 80029c2:	4407      	add	r7, r0
 80029c4:	eba8 0800 	sub.w	r8, r8, r0
 80029c8:	e7e9      	b.n	800299e <__sflush_r+0xda>
 80029ca:	bf00      	nop
 80029cc:	20400001 	.word	0x20400001

080029d0 <_fflush_r>:
 80029d0:	b538      	push	{r3, r4, r5, lr}
 80029d2:	690b      	ldr	r3, [r1, #16]
 80029d4:	4605      	mov	r5, r0
 80029d6:	460c      	mov	r4, r1
 80029d8:	b913      	cbnz	r3, 80029e0 <_fflush_r+0x10>
 80029da:	2500      	movs	r5, #0
 80029dc:	4628      	mov	r0, r5
 80029de:	bd38      	pop	{r3, r4, r5, pc}
 80029e0:	b118      	cbz	r0, 80029ea <_fflush_r+0x1a>
 80029e2:	6983      	ldr	r3, [r0, #24]
 80029e4:	b90b      	cbnz	r3, 80029ea <_fflush_r+0x1a>
 80029e6:	f000 f887 	bl	8002af8 <__sinit>
 80029ea:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <_fflush_r+0x6c>)
 80029ec:	429c      	cmp	r4, r3
 80029ee:	d11b      	bne.n	8002a28 <_fflush_r+0x58>
 80029f0:	686c      	ldr	r4, [r5, #4]
 80029f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0ef      	beq.n	80029da <_fflush_r+0xa>
 80029fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029fc:	07d0      	lsls	r0, r2, #31
 80029fe:	d404      	bmi.n	8002a0a <_fflush_r+0x3a>
 8002a00:	0599      	lsls	r1, r3, #22
 8002a02:	d402      	bmi.n	8002a0a <_fflush_r+0x3a>
 8002a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a06:	f000 f915 	bl	8002c34 <__retarget_lock_acquire_recursive>
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	f7ff ff59 	bl	80028c4 <__sflush_r>
 8002a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a14:	07da      	lsls	r2, r3, #31
 8002a16:	4605      	mov	r5, r0
 8002a18:	d4e0      	bmi.n	80029dc <_fflush_r+0xc>
 8002a1a:	89a3      	ldrh	r3, [r4, #12]
 8002a1c:	059b      	lsls	r3, r3, #22
 8002a1e:	d4dd      	bmi.n	80029dc <_fflush_r+0xc>
 8002a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a22:	f000 f908 	bl	8002c36 <__retarget_lock_release_recursive>
 8002a26:	e7d9      	b.n	80029dc <_fflush_r+0xc>
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <_fflush_r+0x70>)
 8002a2a:	429c      	cmp	r4, r3
 8002a2c:	d101      	bne.n	8002a32 <_fflush_r+0x62>
 8002a2e:	68ac      	ldr	r4, [r5, #8]
 8002a30:	e7df      	b.n	80029f2 <_fflush_r+0x22>
 8002a32:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <_fflush_r+0x74>)
 8002a34:	429c      	cmp	r4, r3
 8002a36:	bf08      	it	eq
 8002a38:	68ec      	ldreq	r4, [r5, #12]
 8002a3a:	e7da      	b.n	80029f2 <_fflush_r+0x22>
 8002a3c:	0800302c 	.word	0x0800302c
 8002a40:	0800304c 	.word	0x0800304c
 8002a44:	0800300c 	.word	0x0800300c

08002a48 <std>:
 8002a48:	2300      	movs	r3, #0
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8002a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a56:	6083      	str	r3, [r0, #8]
 8002a58:	8181      	strh	r1, [r0, #12]
 8002a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8002a5c:	81c2      	strh	r2, [r0, #14]
 8002a5e:	6183      	str	r3, [r0, #24]
 8002a60:	4619      	mov	r1, r3
 8002a62:	2208      	movs	r2, #8
 8002a64:	305c      	adds	r0, #92	; 0x5c
 8002a66:	f7ff fa3d 	bl	8001ee4 <memset>
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <std+0x38>)
 8002a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <std+0x3c>)
 8002a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <std+0x40>)
 8002a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <std+0x44>)
 8002a78:	6224      	str	r4, [r4, #32]
 8002a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8002a7c:	bd10      	pop	{r4, pc}
 8002a7e:	bf00      	nop
 8002a80:	08002da1 	.word	0x08002da1
 8002a84:	08002dc3 	.word	0x08002dc3
 8002a88:	08002dfb 	.word	0x08002dfb
 8002a8c:	08002e1f 	.word	0x08002e1f

08002a90 <_cleanup_r>:
 8002a90:	4901      	ldr	r1, [pc, #4]	; (8002a98 <_cleanup_r+0x8>)
 8002a92:	f000 b8af 	b.w	8002bf4 <_fwalk_reent>
 8002a96:	bf00      	nop
 8002a98:	080029d1 	.word	0x080029d1

08002a9c <__sfmoreglue>:
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	1e4a      	subs	r2, r1, #1
 8002aa0:	2568      	movs	r5, #104	; 0x68
 8002aa2:	4355      	muls	r5, r2
 8002aa4:	460e      	mov	r6, r1
 8002aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002aaa:	f7ff faeb 	bl	8002084 <_malloc_r>
 8002aae:	4604      	mov	r4, r0
 8002ab0:	b140      	cbz	r0, 8002ac4 <__sfmoreglue+0x28>
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8002ab8:	300c      	adds	r0, #12
 8002aba:	60a0      	str	r0, [r4, #8]
 8002abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ac0:	f7ff fa10 	bl	8001ee4 <memset>
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}

08002ac8 <__sfp_lock_acquire>:
 8002ac8:	4801      	ldr	r0, [pc, #4]	; (8002ad0 <__sfp_lock_acquire+0x8>)
 8002aca:	f000 b8b3 	b.w	8002c34 <__retarget_lock_acquire_recursive>
 8002ace:	bf00      	nop
 8002ad0:	240000a8 	.word	0x240000a8

08002ad4 <__sfp_lock_release>:
 8002ad4:	4801      	ldr	r0, [pc, #4]	; (8002adc <__sfp_lock_release+0x8>)
 8002ad6:	f000 b8ae 	b.w	8002c36 <__retarget_lock_release_recursive>
 8002ada:	bf00      	nop
 8002adc:	240000a8 	.word	0x240000a8

08002ae0 <__sinit_lock_acquire>:
 8002ae0:	4801      	ldr	r0, [pc, #4]	; (8002ae8 <__sinit_lock_acquire+0x8>)
 8002ae2:	f000 b8a7 	b.w	8002c34 <__retarget_lock_acquire_recursive>
 8002ae6:	bf00      	nop
 8002ae8:	240000a3 	.word	0x240000a3

08002aec <__sinit_lock_release>:
 8002aec:	4801      	ldr	r0, [pc, #4]	; (8002af4 <__sinit_lock_release+0x8>)
 8002aee:	f000 b8a2 	b.w	8002c36 <__retarget_lock_release_recursive>
 8002af2:	bf00      	nop
 8002af4:	240000a3 	.word	0x240000a3

08002af8 <__sinit>:
 8002af8:	b510      	push	{r4, lr}
 8002afa:	4604      	mov	r4, r0
 8002afc:	f7ff fff0 	bl	8002ae0 <__sinit_lock_acquire>
 8002b00:	69a3      	ldr	r3, [r4, #24]
 8002b02:	b11b      	cbz	r3, 8002b0c <__sinit+0x14>
 8002b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b08:	f7ff bff0 	b.w	8002aec <__sinit_lock_release>
 8002b0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b10:	6523      	str	r3, [r4, #80]	; 0x50
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <__sinit+0x68>)
 8002b14:	4a13      	ldr	r2, [pc, #76]	; (8002b64 <__sinit+0x6c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b1a:	42a3      	cmp	r3, r4
 8002b1c:	bf04      	itt	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	61a3      	streq	r3, [r4, #24]
 8002b22:	4620      	mov	r0, r4
 8002b24:	f000 f820 	bl	8002b68 <__sfp>
 8002b28:	6060      	str	r0, [r4, #4]
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f000 f81c 	bl	8002b68 <__sfp>
 8002b30:	60a0      	str	r0, [r4, #8]
 8002b32:	4620      	mov	r0, r4
 8002b34:	f000 f818 	bl	8002b68 <__sfp>
 8002b38:	2200      	movs	r2, #0
 8002b3a:	60e0      	str	r0, [r4, #12]
 8002b3c:	2104      	movs	r1, #4
 8002b3e:	6860      	ldr	r0, [r4, #4]
 8002b40:	f7ff ff82 	bl	8002a48 <std>
 8002b44:	68a0      	ldr	r0, [r4, #8]
 8002b46:	2201      	movs	r2, #1
 8002b48:	2109      	movs	r1, #9
 8002b4a:	f7ff ff7d 	bl	8002a48 <std>
 8002b4e:	68e0      	ldr	r0, [r4, #12]
 8002b50:	2202      	movs	r2, #2
 8002b52:	2112      	movs	r1, #18
 8002b54:	f7ff ff78 	bl	8002a48 <std>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	61a3      	str	r3, [r4, #24]
 8002b5c:	e7d2      	b.n	8002b04 <__sinit+0xc>
 8002b5e:	bf00      	nop
 8002b60:	08002f20 	.word	0x08002f20
 8002b64:	08002a91 	.word	0x08002a91

08002b68 <__sfp>:
 8002b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6a:	4607      	mov	r7, r0
 8002b6c:	f7ff ffac 	bl	8002ac8 <__sfp_lock_acquire>
 8002b70:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <__sfp+0x84>)
 8002b72:	681e      	ldr	r6, [r3, #0]
 8002b74:	69b3      	ldr	r3, [r6, #24]
 8002b76:	b913      	cbnz	r3, 8002b7e <__sfp+0x16>
 8002b78:	4630      	mov	r0, r6
 8002b7a:	f7ff ffbd 	bl	8002af8 <__sinit>
 8002b7e:	3648      	adds	r6, #72	; 0x48
 8002b80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	d503      	bpl.n	8002b90 <__sfp+0x28>
 8002b88:	6833      	ldr	r3, [r6, #0]
 8002b8a:	b30b      	cbz	r3, 8002bd0 <__sfp+0x68>
 8002b8c:	6836      	ldr	r6, [r6, #0]
 8002b8e:	e7f7      	b.n	8002b80 <__sfp+0x18>
 8002b90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b94:	b9d5      	cbnz	r5, 8002bcc <__sfp+0x64>
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <__sfp+0x88>)
 8002b98:	60e3      	str	r3, [r4, #12]
 8002b9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b9e:	6665      	str	r5, [r4, #100]	; 0x64
 8002ba0:	f000 f847 	bl	8002c32 <__retarget_lock_init_recursive>
 8002ba4:	f7ff ff96 	bl	8002ad4 <__sfp_lock_release>
 8002ba8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002bac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002bb0:	6025      	str	r5, [r4, #0]
 8002bb2:	61a5      	str	r5, [r4, #24]
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002bbc:	f7ff f992 	bl	8001ee4 <memset>
 8002bc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002bc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002bc8:	4620      	mov	r0, r4
 8002bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bcc:	3468      	adds	r4, #104	; 0x68
 8002bce:	e7d9      	b.n	8002b84 <__sfp+0x1c>
 8002bd0:	2104      	movs	r1, #4
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	f7ff ff62 	bl	8002a9c <__sfmoreglue>
 8002bd8:	4604      	mov	r4, r0
 8002bda:	6030      	str	r0, [r6, #0]
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d1d5      	bne.n	8002b8c <__sfp+0x24>
 8002be0:	f7ff ff78 	bl	8002ad4 <__sfp_lock_release>
 8002be4:	230c      	movs	r3, #12
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	e7ee      	b.n	8002bc8 <__sfp+0x60>
 8002bea:	bf00      	nop
 8002bec:	08002f20 	.word	0x08002f20
 8002bf0:	ffff0001 	.word	0xffff0001

08002bf4 <_fwalk_reent>:
 8002bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bf8:	4606      	mov	r6, r0
 8002bfa:	4688      	mov	r8, r1
 8002bfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c00:	2700      	movs	r7, #0
 8002c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c06:	f1b9 0901 	subs.w	r9, r9, #1
 8002c0a:	d505      	bpl.n	8002c18 <_fwalk_reent+0x24>
 8002c0c:	6824      	ldr	r4, [r4, #0]
 8002c0e:	2c00      	cmp	r4, #0
 8002c10:	d1f7      	bne.n	8002c02 <_fwalk_reent+0xe>
 8002c12:	4638      	mov	r0, r7
 8002c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c18:	89ab      	ldrh	r3, [r5, #12]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d907      	bls.n	8002c2e <_fwalk_reent+0x3a>
 8002c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c22:	3301      	adds	r3, #1
 8002c24:	d003      	beq.n	8002c2e <_fwalk_reent+0x3a>
 8002c26:	4629      	mov	r1, r5
 8002c28:	4630      	mov	r0, r6
 8002c2a:	47c0      	blx	r8
 8002c2c:	4307      	orrs	r7, r0
 8002c2e:	3568      	adds	r5, #104	; 0x68
 8002c30:	e7e9      	b.n	8002c06 <_fwalk_reent+0x12>

08002c32 <__retarget_lock_init_recursive>:
 8002c32:	4770      	bx	lr

08002c34 <__retarget_lock_acquire_recursive>:
 8002c34:	4770      	bx	lr

08002c36 <__retarget_lock_release_recursive>:
 8002c36:	4770      	bx	lr

08002c38 <__swhatbuf_r>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	460e      	mov	r6, r1
 8002c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c40:	2900      	cmp	r1, #0
 8002c42:	b096      	sub	sp, #88	; 0x58
 8002c44:	4614      	mov	r4, r2
 8002c46:	461d      	mov	r5, r3
 8002c48:	da07      	bge.n	8002c5a <__swhatbuf_r+0x22>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	602b      	str	r3, [r5, #0]
 8002c4e:	89b3      	ldrh	r3, [r6, #12]
 8002c50:	061a      	lsls	r2, r3, #24
 8002c52:	d410      	bmi.n	8002c76 <__swhatbuf_r+0x3e>
 8002c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c58:	e00e      	b.n	8002c78 <__swhatbuf_r+0x40>
 8002c5a:	466a      	mov	r2, sp
 8002c5c:	f000 f906 	bl	8002e6c <_fstat_r>
 8002c60:	2800      	cmp	r0, #0
 8002c62:	dbf2      	blt.n	8002c4a <__swhatbuf_r+0x12>
 8002c64:	9a01      	ldr	r2, [sp, #4]
 8002c66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c6e:	425a      	negs	r2, r3
 8002c70:	415a      	adcs	r2, r3
 8002c72:	602a      	str	r2, [r5, #0]
 8002c74:	e7ee      	b.n	8002c54 <__swhatbuf_r+0x1c>
 8002c76:	2340      	movs	r3, #64	; 0x40
 8002c78:	2000      	movs	r0, #0
 8002c7a:	6023      	str	r3, [r4, #0]
 8002c7c:	b016      	add	sp, #88	; 0x58
 8002c7e:	bd70      	pop	{r4, r5, r6, pc}

08002c80 <__smakebuf_r>:
 8002c80:	898b      	ldrh	r3, [r1, #12]
 8002c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c84:	079d      	lsls	r5, r3, #30
 8002c86:	4606      	mov	r6, r0
 8002c88:	460c      	mov	r4, r1
 8002c8a:	d507      	bpl.n	8002c9c <__smakebuf_r+0x1c>
 8002c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c90:	6023      	str	r3, [r4, #0]
 8002c92:	6123      	str	r3, [r4, #16]
 8002c94:	2301      	movs	r3, #1
 8002c96:	6163      	str	r3, [r4, #20]
 8002c98:	b002      	add	sp, #8
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	ab01      	add	r3, sp, #4
 8002c9e:	466a      	mov	r2, sp
 8002ca0:	f7ff ffca 	bl	8002c38 <__swhatbuf_r>
 8002ca4:	9900      	ldr	r1, [sp, #0]
 8002ca6:	4605      	mov	r5, r0
 8002ca8:	4630      	mov	r0, r6
 8002caa:	f7ff f9eb 	bl	8002084 <_malloc_r>
 8002cae:	b948      	cbnz	r0, 8002cc4 <__smakebuf_r+0x44>
 8002cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cb4:	059a      	lsls	r2, r3, #22
 8002cb6:	d4ef      	bmi.n	8002c98 <__smakebuf_r+0x18>
 8002cb8:	f023 0303 	bic.w	r3, r3, #3
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	81a3      	strh	r3, [r4, #12]
 8002cc2:	e7e3      	b.n	8002c8c <__smakebuf_r+0xc>
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <__smakebuf_r+0x7c>)
 8002cc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002cc8:	89a3      	ldrh	r3, [r4, #12]
 8002cca:	6020      	str	r0, [r4, #0]
 8002ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd0:	81a3      	strh	r3, [r4, #12]
 8002cd2:	9b00      	ldr	r3, [sp, #0]
 8002cd4:	6163      	str	r3, [r4, #20]
 8002cd6:	9b01      	ldr	r3, [sp, #4]
 8002cd8:	6120      	str	r0, [r4, #16]
 8002cda:	b15b      	cbz	r3, 8002cf4 <__smakebuf_r+0x74>
 8002cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f000 f8d5 	bl	8002e90 <_isatty_r>
 8002ce6:	b128      	cbz	r0, 8002cf4 <__smakebuf_r+0x74>
 8002ce8:	89a3      	ldrh	r3, [r4, #12]
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	81a3      	strh	r3, [r4, #12]
 8002cf4:	89a0      	ldrh	r0, [r4, #12]
 8002cf6:	4305      	orrs	r5, r0
 8002cf8:	81a5      	strh	r5, [r4, #12]
 8002cfa:	e7cd      	b.n	8002c98 <__smakebuf_r+0x18>
 8002cfc:	08002a91 	.word	0x08002a91

08002d00 <__malloc_lock>:
 8002d00:	4801      	ldr	r0, [pc, #4]	; (8002d08 <__malloc_lock+0x8>)
 8002d02:	f7ff bf97 	b.w	8002c34 <__retarget_lock_acquire_recursive>
 8002d06:	bf00      	nop
 8002d08:	240000a4 	.word	0x240000a4

08002d0c <__malloc_unlock>:
 8002d0c:	4801      	ldr	r0, [pc, #4]	; (8002d14 <__malloc_unlock+0x8>)
 8002d0e:	f7ff bf92 	b.w	8002c36 <__retarget_lock_release_recursive>
 8002d12:	bf00      	nop
 8002d14:	240000a4 	.word	0x240000a4

08002d18 <_raise_r>:
 8002d18:	291f      	cmp	r1, #31
 8002d1a:	b538      	push	{r3, r4, r5, lr}
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	460d      	mov	r5, r1
 8002d20:	d904      	bls.n	8002d2c <_raise_r+0x14>
 8002d22:	2316      	movs	r3, #22
 8002d24:	6003      	str	r3, [r0, #0]
 8002d26:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2a:	bd38      	pop	{r3, r4, r5, pc}
 8002d2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d2e:	b112      	cbz	r2, 8002d36 <_raise_r+0x1e>
 8002d30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002d34:	b94b      	cbnz	r3, 8002d4a <_raise_r+0x32>
 8002d36:	4620      	mov	r0, r4
 8002d38:	f000 f830 	bl	8002d9c <_getpid_r>
 8002d3c:	462a      	mov	r2, r5
 8002d3e:	4601      	mov	r1, r0
 8002d40:	4620      	mov	r0, r4
 8002d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d46:	f000 b817 	b.w	8002d78 <_kill_r>
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d00a      	beq.n	8002d64 <_raise_r+0x4c>
 8002d4e:	1c59      	adds	r1, r3, #1
 8002d50:	d103      	bne.n	8002d5a <_raise_r+0x42>
 8002d52:	2316      	movs	r3, #22
 8002d54:	6003      	str	r3, [r0, #0]
 8002d56:	2001      	movs	r0, #1
 8002d58:	e7e7      	b.n	8002d2a <_raise_r+0x12>
 8002d5a:	2400      	movs	r4, #0
 8002d5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002d60:	4628      	mov	r0, r5
 8002d62:	4798      	blx	r3
 8002d64:	2000      	movs	r0, #0
 8002d66:	e7e0      	b.n	8002d2a <_raise_r+0x12>

08002d68 <raise>:
 8002d68:	4b02      	ldr	r3, [pc, #8]	; (8002d74 <raise+0xc>)
 8002d6a:	4601      	mov	r1, r0
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	f7ff bfd3 	b.w	8002d18 <_raise_r>
 8002d72:	bf00      	nop
 8002d74:	24000010 	.word	0x24000010

08002d78 <_kill_r>:
 8002d78:	b538      	push	{r3, r4, r5, lr}
 8002d7a:	4d07      	ldr	r5, [pc, #28]	; (8002d98 <_kill_r+0x20>)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	4604      	mov	r4, r0
 8002d80:	4608      	mov	r0, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	602b      	str	r3, [r5, #0]
 8002d86:	f7fd fc1b 	bl	80005c0 <_kill>
 8002d8a:	1c43      	adds	r3, r0, #1
 8002d8c:	d102      	bne.n	8002d94 <_kill_r+0x1c>
 8002d8e:	682b      	ldr	r3, [r5, #0]
 8002d90:	b103      	cbz	r3, 8002d94 <_kill_r+0x1c>
 8002d92:	6023      	str	r3, [r4, #0]
 8002d94:	bd38      	pop	{r3, r4, r5, pc}
 8002d96:	bf00      	nop
 8002d98:	240000ac 	.word	0x240000ac

08002d9c <_getpid_r>:
 8002d9c:	f7fd bc08 	b.w	80005b0 <_getpid>

08002da0 <__sread>:
 8002da0:	b510      	push	{r4, lr}
 8002da2:	460c      	mov	r4, r1
 8002da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002da8:	f000 f894 	bl	8002ed4 <_read_r>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	bfab      	itete	ge
 8002db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002db2:	89a3      	ldrhlt	r3, [r4, #12]
 8002db4:	181b      	addge	r3, r3, r0
 8002db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002dba:	bfac      	ite	ge
 8002dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8002dbe:	81a3      	strhlt	r3, [r4, #12]
 8002dc0:	bd10      	pop	{r4, pc}

08002dc2 <__swrite>:
 8002dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dc6:	461f      	mov	r7, r3
 8002dc8:	898b      	ldrh	r3, [r1, #12]
 8002dca:	05db      	lsls	r3, r3, #23
 8002dcc:	4605      	mov	r5, r0
 8002dce:	460c      	mov	r4, r1
 8002dd0:	4616      	mov	r6, r2
 8002dd2:	d505      	bpl.n	8002de0 <__swrite+0x1e>
 8002dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd8:	2302      	movs	r3, #2
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f000 f868 	bl	8002eb0 <_lseek_r>
 8002de0:	89a3      	ldrh	r3, [r4, #12]
 8002de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dea:	81a3      	strh	r3, [r4, #12]
 8002dec:	4632      	mov	r2, r6
 8002dee:	463b      	mov	r3, r7
 8002df0:	4628      	mov	r0, r5
 8002df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002df6:	f000 b817 	b.w	8002e28 <_write_r>

08002dfa <__sseek>:
 8002dfa:	b510      	push	{r4, lr}
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e02:	f000 f855 	bl	8002eb0 <_lseek_r>
 8002e06:	1c43      	adds	r3, r0, #1
 8002e08:	89a3      	ldrh	r3, [r4, #12]
 8002e0a:	bf15      	itete	ne
 8002e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e16:	81a3      	strheq	r3, [r4, #12]
 8002e18:	bf18      	it	ne
 8002e1a:	81a3      	strhne	r3, [r4, #12]
 8002e1c:	bd10      	pop	{r4, pc}

08002e1e <__sclose>:
 8002e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e22:	f000 b813 	b.w	8002e4c <_close_r>
	...

08002e28 <_write_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	4d07      	ldr	r5, [pc, #28]	; (8002e48 <_write_r+0x20>)
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	4608      	mov	r0, r1
 8002e30:	4611      	mov	r1, r2
 8002e32:	2200      	movs	r2, #0
 8002e34:	602a      	str	r2, [r5, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f7fd fbf9 	bl	800062e <_write>
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	d102      	bne.n	8002e46 <_write_r+0x1e>
 8002e40:	682b      	ldr	r3, [r5, #0]
 8002e42:	b103      	cbz	r3, 8002e46 <_write_r+0x1e>
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	bd38      	pop	{r3, r4, r5, pc}
 8002e48:	240000ac 	.word	0x240000ac

08002e4c <_close_r>:
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4d06      	ldr	r5, [pc, #24]	; (8002e68 <_close_r+0x1c>)
 8002e50:	2300      	movs	r3, #0
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	602b      	str	r3, [r5, #0]
 8002e58:	f7fd fc05 	bl	8000666 <_close>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	d102      	bne.n	8002e66 <_close_r+0x1a>
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	b103      	cbz	r3, 8002e66 <_close_r+0x1a>
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	bd38      	pop	{r3, r4, r5, pc}
 8002e68:	240000ac 	.word	0x240000ac

08002e6c <_fstat_r>:
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	4d07      	ldr	r5, [pc, #28]	; (8002e8c <_fstat_r+0x20>)
 8002e70:	2300      	movs	r3, #0
 8002e72:	4604      	mov	r4, r0
 8002e74:	4608      	mov	r0, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	602b      	str	r3, [r5, #0]
 8002e7a:	f7fd fc00 	bl	800067e <_fstat>
 8002e7e:	1c43      	adds	r3, r0, #1
 8002e80:	d102      	bne.n	8002e88 <_fstat_r+0x1c>
 8002e82:	682b      	ldr	r3, [r5, #0]
 8002e84:	b103      	cbz	r3, 8002e88 <_fstat_r+0x1c>
 8002e86:	6023      	str	r3, [r4, #0]
 8002e88:	bd38      	pop	{r3, r4, r5, pc}
 8002e8a:	bf00      	nop
 8002e8c:	240000ac 	.word	0x240000ac

08002e90 <_isatty_r>:
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	4d06      	ldr	r5, [pc, #24]	; (8002eac <_isatty_r+0x1c>)
 8002e94:	2300      	movs	r3, #0
 8002e96:	4604      	mov	r4, r0
 8002e98:	4608      	mov	r0, r1
 8002e9a:	602b      	str	r3, [r5, #0]
 8002e9c:	f7fd fbff 	bl	800069e <_isatty>
 8002ea0:	1c43      	adds	r3, r0, #1
 8002ea2:	d102      	bne.n	8002eaa <_isatty_r+0x1a>
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	b103      	cbz	r3, 8002eaa <_isatty_r+0x1a>
 8002ea8:	6023      	str	r3, [r4, #0]
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	240000ac 	.word	0x240000ac

08002eb0 <_lseek_r>:
 8002eb0:	b538      	push	{r3, r4, r5, lr}
 8002eb2:	4d07      	ldr	r5, [pc, #28]	; (8002ed0 <_lseek_r+0x20>)
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	4608      	mov	r0, r1
 8002eb8:	4611      	mov	r1, r2
 8002eba:	2200      	movs	r2, #0
 8002ebc:	602a      	str	r2, [r5, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f7fd fbf8 	bl	80006b4 <_lseek>
 8002ec4:	1c43      	adds	r3, r0, #1
 8002ec6:	d102      	bne.n	8002ece <_lseek_r+0x1e>
 8002ec8:	682b      	ldr	r3, [r5, #0]
 8002eca:	b103      	cbz	r3, 8002ece <_lseek_r+0x1e>
 8002ecc:	6023      	str	r3, [r4, #0]
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
 8002ed0:	240000ac 	.word	0x240000ac

08002ed4 <_read_r>:
 8002ed4:	b538      	push	{r3, r4, r5, lr}
 8002ed6:	4d07      	ldr	r5, [pc, #28]	; (8002ef4 <_read_r+0x20>)
 8002ed8:	4604      	mov	r4, r0
 8002eda:	4608      	mov	r0, r1
 8002edc:	4611      	mov	r1, r2
 8002ede:	2200      	movs	r2, #0
 8002ee0:	602a      	str	r2, [r5, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f7fd fb86 	bl	80005f4 <_read>
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	d102      	bne.n	8002ef2 <_read_r+0x1e>
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	b103      	cbz	r3, 8002ef2 <_read_r+0x1e>
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
 8002ef4:	240000ac 	.word	0x240000ac

08002ef8 <_init>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	bf00      	nop
 8002efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efe:	bc08      	pop	{r3}
 8002f00:	469e      	mov	lr, r3
 8002f02:	4770      	bx	lr

08002f04 <_fini>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	bf00      	nop
 8002f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0a:	bc08      	pop	{r3}
 8002f0c:	469e      	mov	lr, r3
 8002f0e:	4770      	bx	lr
