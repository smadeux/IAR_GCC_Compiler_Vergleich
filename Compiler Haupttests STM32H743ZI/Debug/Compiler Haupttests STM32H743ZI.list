
Compiler Haupttests STM32H743ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  080026d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000003c  24000074  08002744  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000b0  08002744  000200b0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001042e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002451  00000000  00000000  000304d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00002bf5  00000000  00000000  00032921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000658  00000000  00000000  00035518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a18  00000000  00000000  00035b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003549c  00000000  00000000  00036588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000940d  00000000  00000000  0006ba24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e2ad  00000000  00000000  00074e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c30de  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001918  00000000  00000000  001c3134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08002554 	.word	0x08002554

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08002554 	.word	0x08002554

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b5d0      	push	{r4, r6, r7, lr}
 8000382:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000384:	224c      	movs	r2, #76	; 0x4c
 8000386:	2100      	movs	r1, #0
 8000388:	a80b      	add	r0, sp, #44	; 0x2c
 800038a:	f001 f8d9 	bl	8001540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038e:	2220      	movs	r2, #32
 8000390:	2100      	movs	r1, #0
 8000392:	a802      	add	r0, sp, #8
 8000394:	f001 f8d4 	bl	8001540 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000398:	2002      	movs	r0, #2
 800039a:	f000 fbc1 	bl	8000b20 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800039e:	4b1f      	ldr	r3, [pc, #124]	; (800041c <SystemClock_Config+0x9c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	9201      	str	r2, [sp, #4]
 80003a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80003a6:	4a1e      	ldr	r2, [pc, #120]	; (8000420 <SystemClock_Config+0xa0>)
 80003a8:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ac:	4610      	mov	r0, r2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003ae:	62d9      	str	r1, [r3, #44]	; 0x2c
 80003b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	9301      	str	r3, [sp, #4]
 80003b8:	6993      	ldr	r3, [r2, #24]
 80003ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	6993      	ldr	r3, [r2, #24]
 80003c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003ca:	9301      	str	r3, [sp, #4]
 80003cc:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ce:	6983      	ldr	r3, [r0, #24]
 80003d0:	049b      	lsls	r3, r3, #18
 80003d2:	d5fc      	bpl.n	80003ce <SystemClock_Config+0x4e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d4:	2102      	movs	r1, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003d6:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d8:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003da:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003dc:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003de:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003e0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e2:	e9cd 420e 	strd	r4, r2, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e6:	f000 fbc1 	bl	8000b6c <HAL_RCC_OscConfig>
 80003ea:	b108      	cbz	r0, 80003f0 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ee:	e7fe      	b.n	80003ee <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	2200      	movs	r2, #0
 80003f2:	2300      	movs	r3, #0
 80003f4:	263f      	movs	r6, #63	; 0x3f
 80003f6:	2700      	movs	r7, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003f8:	4621      	mov	r1, r4
 80003fa:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000400:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000404:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000408:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800040c:	f000 ff44 	bl	8001298 <HAL_RCC_ClockConfig>
 8000410:	b108      	cbz	r0, 8000416 <SystemClock_Config+0x96>
 8000412:	b672      	cpsid	i
  while (1)
 8000414:	e7fe      	b.n	8000414 <SystemClock_Config+0x94>
}
 8000416:	b01e      	add	sp, #120	; 0x78
 8000418:	bdd0      	pop	{r4, r6, r7, pc}
 800041a:	bf00      	nop
 800041c:	58000400 	.word	0x58000400
 8000420:	58024800 	.word	0x58024800

08000424 <main>:
{
 8000424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000428:	b089      	sub	sp, #36	; 0x24
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 800042a:	f04f 0840 	mov.w	r8, #64	; 0x40
  HAL_Init();
 800042e:	f000 f99d 	bl	800076c <HAL_Init>
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 8000432:	f04f 0901 	mov.w	r9, #1
  SystemClock_Config();
 8000436:	f7ff ffa3 	bl	8000380 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <main+0x90>)
  HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 800043e:	2140      	movs	r1, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000440:	9206      	str	r2, [sp, #24]
  HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 8000442:	481d      	ldr	r0, [pc, #116]	; (80004b8 <main+0x94>)
		Test_Dividier_Zufaellige_Float(1 + (rand()%100));
 8000444:	4d1d      	ldr	r5, [pc, #116]	; (80004bc <main+0x98>)
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 8000446:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	e9cd 2202 	strd	r2, r2, [sp, #8]
 800044c:	e9cd 2204 	strd	r2, r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000450:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
 8000454:	f044 0404 	orr.w	r4, r4, #4
 8000458:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800045c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	9301      	str	r3, [sp, #4]
 8000466:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 8000468:	f000 fb4c 	bl	8000b04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 800046c:	2200      	movs	r2, #0
 800046e:	2300      	movs	r3, #0
  HAL_GPIO_Init(EXECUTE_PIN_GPIO_Port, &GPIO_InitStruct);
 8000470:	a902      	add	r1, sp, #8
 8000472:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 8000474:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000478:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(EXECUTE_PIN_GPIO_Port, &GPIO_InitStruct);
 800047c:	f000 fa24 	bl	80008c8 <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 8000480:	2764      	movs	r7, #100	; 0x64
 8000482:	2140      	movs	r1, #64	; 0x40
 8000484:	4630      	mov	r0, r6
		Test_Dividier_Zufaellige_Float(1 + (rand()%100));
 8000486:	463c      	mov	r4, r7
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 8000488:	f000 fb40 	bl	8000b0c <HAL_GPIO_TogglePin>
		Test_Dividier_Zufaellige_Float(1 + (rand()%100));
 800048c:	f001 f860 	bl	8001550 <rand>
 8000490:	fb85 3200 	smull	r3, r2, r5, r0
 8000494:	17c3      	asrs	r3, r0, #31
 8000496:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800049a:	fb04 0013 	mls	r0, r4, r3, r0
 800049e:	3001      	adds	r0, #1
 80004a0:	f000 f8fc 	bl	800069c <Test_Dividier_Zufaellige_Float>
	for(int i = 0; i < 100; i++)
 80004a4:	3f01      	subs	r7, #1
 80004a6:	d1f1      	bne.n	800048c <main+0x68>
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80004a8:	2140      	movs	r1, #64	; 0x40
 80004aa:	4630      	mov	r0, r6
 80004ac:	f000 fb2e 	bl	8000b0c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80004b0:	e7e6      	b.n	8000480 <main+0x5c>
 80004b2:	bf00      	nop
 80004b4:	58024400 	.word	0x58024400
 80004b8:	58020800 	.word	0x58020800
 80004bc:	51eb851f 	.word	0x51eb851f

080004c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <HAL_MspInit+0x20>)
{
 80004c2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80004c8:	f042 0202 	orr.w	r2, r2, #2
 80004cc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80004d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004d4:	f003 0302 	and.w	r3, r3, #2
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004dc:	b002      	add	sp, #8
 80004de:	4770      	bx	lr
 80004e0:	58024400 	.word	0x58024400

080004e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler>
 80004e6:	bf00      	nop

080004e8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <HardFault_Handler>
 80004ea:	bf00      	nop

080004ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <MemManage_Handler>
 80004ee:	bf00      	nop

080004f0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <BusFault_Handler>
 80004f2:	bf00      	nop

080004f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <UsageFault_Handler>
 80004f6:	bf00      	nop

080004f8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <DebugMon_Handler>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <PendSV_Handler>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 b962 	b.w	80007cc <HAL_IncTick>

08000508 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000508:	2001      	movs	r0, #1
 800050a:	4770      	bx	lr

0800050c <_kill>:

int _kill(int pid, int sig)
{
 800050c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800050e:	f000 ffed 	bl	80014ec <__errno>
 8000512:	2216      	movs	r2, #22
 8000514:	4603      	mov	r3, r0
	return -1;
}
 8000516:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bd08      	pop	{r3, pc}
 800051e:	bf00      	nop

08000520 <_exit>:

void _exit (int status)
{
 8000520:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000522:	f000 ffe3 	bl	80014ec <__errno>
 8000526:	2316      	movs	r3, #22
 8000528:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800052a:	e7fe      	b.n	800052a <_exit+0xa>

0800052c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800052c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	1e16      	subs	r6, r2, #0
 8000530:	dd07      	ble.n	8000542 <_read+0x16>
 8000532:	460c      	mov	r4, r1
 8000534:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000536:	f3af 8000 	nop.w
 800053a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	42a5      	cmp	r5, r4
 8000540:	d1f9      	bne.n	8000536 <_read+0xa>
	}

return len;
}
 8000542:	4630      	mov	r0, r6
 8000544:	bd70      	pop	{r4, r5, r6, pc}
 8000546:	bf00      	nop

08000548 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000548:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054a:	1e16      	subs	r6, r2, #0
 800054c:	dd07      	ble.n	800055e <_write+0x16>
 800054e:	460c      	mov	r4, r1
 8000550:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000552:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000556:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055a:	42ac      	cmp	r4, r5
 800055c:	d1f9      	bne.n	8000552 <_write+0xa>
	}
	return len;
}
 800055e:	4630      	mov	r0, r6
 8000560:	bd70      	pop	{r4, r5, r6, pc}
 8000562:	bf00      	nop

08000564 <_close>:

int _close(int file)
{
	return -1;
}
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800056c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000570:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000572:	604b      	str	r3, [r1, #4]
}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000578:	2001      	movs	r0, #1
 800057a:	4770      	bx	lr

0800057c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800057c:	2000      	movs	r0, #0
 800057e:	4770      	bx	lr

08000580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000580:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000582:	4c0d      	ldr	r4, [pc, #52]	; (80005b8 <_sbrk+0x38>)
{
 8000584:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000586:	490d      	ldr	r1, [pc, #52]	; (80005bc <_sbrk+0x3c>)
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800058a:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800058c:	1a09      	subs	r1, r1, r0
  if (NULL == __sbrk_heap_end)
 800058e:	b12a      	cbz	r2, 800059c <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000590:	4413      	add	r3, r2
 8000592:	428b      	cmp	r3, r1
 8000594:	d808      	bhi.n	80005a8 <_sbrk+0x28>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000596:	4610      	mov	r0, r2
  __sbrk_heap_end += incr;
 8000598:	6023      	str	r3, [r4, #0]
}
 800059a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <_sbrk+0x44>)
 800059e:	4602      	mov	r2, r0
 80005a0:	6020      	str	r0, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80005a2:	4413      	add	r3, r2
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d9f6      	bls.n	8000596 <_sbrk+0x16>
    errno = ENOMEM;
 80005a8:	f000 ffa0 	bl	80014ec <__errno>
 80005ac:	230c      	movs	r3, #12
    return (void *)-1;
 80005ae:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80005b2:	6003      	str	r3, [r0, #0]
}
 80005b4:	4610      	mov	r0, r2
 80005b6:	bd10      	pop	{r4, pc}
 80005b8:	24000090 	.word	0x24000090
 80005bc:	24080000 	.word	0x24080000
 80005c0:	00000400 	.word	0x00000400
 80005c4:	240000b0 	.word	0x240000b0

080005c8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005c8:	4929      	ldr	r1, [pc, #164]	; (8000670 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005ca:	4a2a      	ldr	r2, [pc, #168]	; (8000674 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80005d4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005da:	6813      	ldr	r3, [r2, #0]
 80005dc:	f003 030f 	and.w	r3, r3, #15
 80005e0:	2b06      	cmp	r3, #6
 80005e2:	d805      	bhi.n	80005f0 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005e4:	6813      	ldr	r3, [r2, #0]
 80005e6:	f023 030f 	bic.w	r3, r3, #15
 80005ea:	f043 0307 	orr.w	r3, r3, #7
 80005ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005f2:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 80005f6:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	481e      	ldr	r0, [pc, #120]	; (8000674 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 80005fa:	f041 0101 	orr.w	r1, r1, #1
 80005fe:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000600:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000602:	6819      	ldr	r1, [r3, #0]
 8000604:	400a      	ands	r2, r1
 8000606:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000608:	6803      	ldr	r3, [r0, #0]
 800060a:	071b      	lsls	r3, r3, #28
 800060c:	d505      	bpl.n	800061a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800060e:	6803      	ldr	r3, [r0, #0]
 8000610:	f023 030f 	bic.w	r3, r3, #15
 8000614:	f043 0307 	orr.w	r3, r3, #7
 8000618:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <SystemInit+0xb0>)
 800061c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800061e:	4918      	ldr	r1, [pc, #96]	; (8000680 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8000620:	4c18      	ldr	r4, [pc, #96]	; (8000684 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8000622:	4819      	ldr	r0, [pc, #100]	; (8000688 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8000624:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000626:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000628:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800062a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800062c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800062e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000632:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000634:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000636:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000638:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800063a:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800063c:	4c13      	ldr	r4, [pc, #76]	; (800068c <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 800063e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000642:	4913      	ldr	r1, [pc, #76]	; (8000690 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 8000644:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8000646:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000648:	6823      	ldr	r3, [r4, #0]
 800064a:	4019      	ands	r1, r3
 800064c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000650:	d202      	bcs.n	8000658 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <SystemInit+0xcc>)
 8000654:	2201      	movs	r2, #1
 8000656:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000658:	490f      	ldr	r1, [pc, #60]	; (8000698 <SystemInit+0xd0>)
 800065a:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <SystemInit+0xa8>)
 8000660:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000664:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000666:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800066a:	609a      	str	r2, [r3, #8]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	52002000 	.word	0x52002000
 8000678:	58024400 	.word	0x58024400
 800067c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000680:	01010280 	.word	0x01010280
 8000684:	02020200 	.word	0x02020200
 8000688:	01ff0000 	.word	0x01ff0000
 800068c:	5c001000 	.word	0x5c001000
 8000690:	ffff0000 	.word	0xffff0000
 8000694:	51008108 	.word	0x51008108
 8000698:	52004000 	.word	0x52004000

0800069c <Test_Dividier_Zufaellige_Float>:
	int x = r / i;
	return x;
}

float Test_Dividier_Zufaellige_Float(int i)
{
 800069c:	b508      	push	{r3, lr}
 800069e:	ed2d 8b02 	vpush	{d8}
 80006a2:	ee08 0a10 	vmov	s16, r0
	float r = ((float)rand()/RAND_MAX)*(float)(100.0);
 80006a6:	f000 ff53 	bl	8001550 <rand>
 80006aa:	ee07 0a10 	vmov	s14, r0
 80006ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 80006c8 <Test_Dividier_Zufaellige_Float+0x2c>
	float x = r / i;
 80006b2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	float r = ((float)rand()/RAND_MAX)*(float)(100.0);
 80006b6:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80006ba:	ee20 0a27 	vmul.f32	s0, s0, s15
	return x;
}
 80006be:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80006c2:	ecbd 8b02 	vpop	{d8}
 80006c6:	bd08      	pop	{r3, pc}
 80006c8:	33480000 	.word	0x33480000

080006cc <Reset_Handler>:
 80006cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000704 <LoopFillZerobss+0xe>
 80006d0:	f7ff ff7a 	bl	80005c8 <SystemInit>
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <LoopFillZerobss+0x12>)
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <LoopFillZerobss+0x16>)
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <LoopFillZerobss+0x1a>)
 80006da:	2300      	movs	r3, #0
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:
 80006de:	58d4      	ldr	r4, [r2, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:
 80006e4:	18c4      	adds	r4, r0, r3
 80006e6:	428c      	cmp	r4, r1
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <LoopFillZerobss+0x1e>)
 80006ec:	4c0a      	ldr	r4, [pc, #40]	; (8000718 <LoopFillZerobss+0x22>)
 80006ee:	2300      	movs	r3, #0
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:
 80006f6:	42a2      	cmp	r2, r4
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>
 80006fa:	f000 fefd 	bl	80014f8 <__libc_init_array>
 80006fe:	f7ff fe91 	bl	8000424 <main>
 8000702:	4770      	bx	lr
 8000704:	24080000 	.word	0x24080000
 8000708:	24000000 	.word	0x24000000
 800070c:	24000074 	.word	0x24000074
 8000710:	080026d0 	.word	0x080026d0
 8000714:	24000074 	.word	0x24000074
 8000718:	240000b0 	.word	0x240000b0

0800071c <ADC3_IRQHandler>:
 800071c:	e7fe      	b.n	800071c <ADC3_IRQHandler>
	...

08000720 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_InitTick+0x40>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b90b      	cbnz	r3, 800072a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000726:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000728:	4770      	bx	lr
{
 800072a:	b510      	push	{r4, lr}
 800072c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800072e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000732:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <HAL_InitTick+0x44>)
 8000734:	fbb0 f3f3 	udiv	r3, r0, r3
 8000738:	6810      	ldr	r0, [r2, #0]
 800073a:	fbb0 f0f3 	udiv	r0, r0, r3
 800073e:	f000 f8ab 	bl	8000898 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	2c0f      	cmp	r4, #15
 8000744:	d800      	bhi.n	8000748 <HAL_InitTick+0x28>
 8000746:	b108      	cbz	r0, 800074c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000748:	2001      	movs	r0, #1
}
 800074a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074c:	2200      	movs	r2, #0
 800074e:	4621      	mov	r1, r4
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f000 f866 	bl	8000824 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <HAL_InitTick+0x48>)
 800075a:	2000      	movs	r0, #0
 800075c:	601c      	str	r4, [r3, #0]
}
 800075e:	bd10      	pop	{r4, pc}
 8000760:	24000008 	.word	0x24000008
 8000764:	24000000 	.word	0x24000000
 8000768:	2400000c 	.word	0x2400000c

0800076c <HAL_Init>:
{
 800076c:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076e:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000770:	4c12      	ldr	r4, [pc, #72]	; (80007bc <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000772:	f000 f843 	bl	80007fc <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000776:	4d12      	ldr	r5, [pc, #72]	; (80007c0 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000778:	f000 fcee 	bl	8001158 <HAL_RCC_GetSysClockFreq>
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_Init+0x58>)
 800077e:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000780:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000782:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000784:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000786:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800078a:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800078c:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800078e:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000790:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 8000794:	4c0c      	ldr	r4, [pc, #48]	; (80007c8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000796:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800079a:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800079c:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80007a0:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007a2:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a4:	f7ff ffbc 	bl	8000720 <HAL_InitTick>
 80007a8:	b110      	cbz	r0, 80007b0 <HAL_Init+0x44>
    return HAL_ERROR;
 80007aa:	2401      	movs	r4, #1
}
 80007ac:	4620      	mov	r0, r4
 80007ae:	bd38      	pop	{r3, r4, r5, pc}
 80007b0:	4604      	mov	r4, r0
  HAL_MspInit();
 80007b2:	f7ff fe85 	bl	80004c0 <HAL_MspInit>
}
 80007b6:	4620      	mov	r0, r4
 80007b8:	bd38      	pop	{r3, r4, r5, pc}
 80007ba:	bf00      	nop
 80007bc:	0800256c 	.word	0x0800256c
 80007c0:	24000004 	.word	0x24000004
 80007c4:	58024400 	.word	0x58024400
 80007c8:	24000000 	.word	0x24000000

080007cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80007cc:	4a03      	ldr	r2, [pc, #12]	; (80007dc <HAL_IncTick+0x10>)
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <HAL_IncTick+0x14>)
 80007d0:	6811      	ldr	r1, [r2, #0]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	440b      	add	r3, r1
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	2400009c 	.word	0x2400009c
 80007e0:	24000008 	.word	0x24000008

080007e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007e4:	4b01      	ldr	r3, [pc, #4]	; (80007ec <HAL_GetTick+0x8>)
 80007e6:	6818      	ldr	r0, [r3, #0]
}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	2400009c 	.word	0x2400009c

080007f0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80007f0:	4b01      	ldr	r3, [pc, #4]	; (80007f8 <HAL_GetREVID+0x8>)
 80007f2:	6818      	ldr	r0, [r3, #0]
}
 80007f4:	0c00      	lsrs	r0, r0, #16
 80007f6:	4770      	bx	lr
 80007f8:	5c001000 	.word	0x5c001000

080007fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007fc:	4907      	ldr	r1, [pc, #28]	; (800081c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007fe:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000802:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000804:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800080e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000810:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000814:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000816:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000818:	60cb      	str	r3, [r1, #12]
 800081a:	4770      	bx	lr
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	05fa0000 	.word	0x05fa0000

08000824 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_NVIC_SetPriority+0x68>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	2d04      	cmp	r5, #4
 8000836:	bf28      	it	cs
 8000838:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	2c06      	cmp	r4, #6
 800083c:	d919      	bls.n	8000872 <HAL_NVIC_SetPriority+0x4e>
 800083e:	3b03      	subs	r3, #3
 8000840:	f04f 34ff 	mov.w	r4, #4294967295
 8000844:	409c      	lsls	r4, r3
 8000846:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084a:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800084e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	fa04 f405 	lsl.w	r4, r4, r5
 8000854:	ea21 0104 	bic.w	r1, r1, r4
 8000858:	fa01 f103 	lsl.w	r1, r1, r3
 800085c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000860:	db0a      	blt.n	8000878 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	0109      	lsls	r1, r1, #4
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_NVIC_SetPriority+0x6c>)
 8000866:	b2c9      	uxtb	r1, r1
 8000868:	4403      	add	r3, r0
 800086a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800086e:	bc30      	pop	{r4, r5}
 8000870:	4770      	bx	lr
 8000872:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000874:	4613      	mov	r3, r2
 8000876:	e7e8      	b.n	800084a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	f000 000f 	and.w	r0, r0, #15
 800087c:	0109      	lsls	r1, r1, #4
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_NVIC_SetPriority+0x70>)
 8000880:	b2c9      	uxtb	r1, r1
 8000882:	4403      	add	r3, r0
 8000884:	7619      	strb	r1, [r3, #24]
 8000886:	bc30      	pop	{r4, r5}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000ecfc 	.word	0xe000ecfc

08000898 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	3801      	subs	r0, #1
 800089a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800089e:	d20d      	bcs.n	80008bc <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a4:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	25f0      	movs	r5, #240	; 0xf0
 80008aa:	4c06      	ldr	r4, [pc, #24]	; (80008c4 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ac:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ae:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80008b8:	bc30      	pop	{r4, r5}
 80008ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008bc:	2001      	movs	r0, #1
 80008be:	4770      	bx	lr
 80008c0:	e000e010 	.word	0xe000e010
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80008cc:	680e      	ldr	r6, [r1, #0]
{
 80008ce:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	f000 80d3 	beq.w	8000a7c <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 80008d6:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d8:	f8df a220 	ldr.w	sl, [pc, #544]	; 8000afc <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80008dc:	f8df b220 	ldr.w	fp, [pc, #544]	; 8000b00 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008e0:	46b1      	mov	r9, r6
 80008e2:	e020      	b.n	8000926 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 80008e4:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80008e6:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ea:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80008ee:	f04f 0e0f 	mov.w	lr, #15
 80008f2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80008f6:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80008f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008fc:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8000900:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000902:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000906:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800090a:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800090e:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000912:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8000914:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000916:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000918:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 800091a:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 800091c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800091e:	fa39 f203 	lsrs.w	r2, r9, r3
 8000922:	f000 80ab 	beq.w	8000a7c <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000926:	2201      	movs	r2, #1
 8000928:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800092a:	ea12 0809 	ands.w	r8, r2, r9
 800092e:	d0f5      	beq.n	800091c <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000930:	684c      	ldr	r4, [r1, #4]
 8000932:	005f      	lsls	r7, r3, #1
 8000934:	f024 0c10 	bic.w	ip, r4, #16
 8000938:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093c:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800093e:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000942:	f200 809e 	bhi.w	8000a82 <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000946:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 800094a:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800094e:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000950:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000952:	ea2e 0e05 	bic.w	lr, lr, r5
 8000956:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000958:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800095a:	68ce      	ldr	r6, [r1, #12]
 800095c:	40be      	lsls	r6, r7
 800095e:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000962:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 8000964:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000968:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800096c:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000970:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8000972:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000974:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000976:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097a:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800097c:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000980:	fa02 f207 	lsl.w	r2, r2, r7
 8000984:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 8000988:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098a:	d0ab      	beq.n	80008e4 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 800098c:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800098e:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000992:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000994:	fa02 f707 	lsl.w	r7, r2, r7
 8000998:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800099a:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099c:	00e6      	lsls	r6, r4, #3
 800099e:	d5bd      	bpl.n	800091c <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a0:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 80009a4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009a8:	f003 0203 	and.w	r2, r3, #3
 80009ac:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	f046 0602 	orr.w	r6, r6, #2
 80009b2:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009b6:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b8:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 80009bc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80009c0:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009c4:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c8:	f006 0602 	and.w	r6, r6, #2
 80009cc:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009ce:	4e42      	ldr	r6, [pc, #264]	; (8000ad8 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d0:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009d2:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80009d4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009d6:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009da:	d020      	beq.n	8000a1e <HAL_GPIO_Init+0x156>
 80009dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80009e0:	42b0      	cmp	r0, r6
 80009e2:	d056      	beq.n	8000a92 <HAL_GPIO_Init+0x1ca>
 80009e4:	4e3d      	ldr	r6, [pc, #244]	; (8000adc <HAL_GPIO_Init+0x214>)
 80009e6:	42b0      	cmp	r0, r6
 80009e8:	d058      	beq.n	8000a9c <HAL_GPIO_Init+0x1d4>
 80009ea:	4e3d      	ldr	r6, [pc, #244]	; (8000ae0 <HAL_GPIO_Init+0x218>)
 80009ec:	42b0      	cmp	r0, r6
 80009ee:	d04b      	beq.n	8000a88 <HAL_GPIO_Init+0x1c0>
 80009f0:	4e3c      	ldr	r6, [pc, #240]	; (8000ae4 <HAL_GPIO_Init+0x21c>)
 80009f2:	42b0      	cmp	r0, r6
 80009f4:	d05c      	beq.n	8000ab0 <HAL_GPIO_Init+0x1e8>
 80009f6:	4e3c      	ldr	r6, [pc, #240]	; (8000ae8 <HAL_GPIO_Init+0x220>)
 80009f8:	42b0      	cmp	r0, r6
 80009fa:	d05e      	beq.n	8000aba <HAL_GPIO_Init+0x1f2>
 80009fc:	4e3b      	ldr	r6, [pc, #236]	; (8000aec <HAL_GPIO_Init+0x224>)
 80009fe:	42b0      	cmp	r0, r6
 8000a00:	d051      	beq.n	8000aa6 <HAL_GPIO_Init+0x1de>
 8000a02:	4e3b      	ldr	r6, [pc, #236]	; (8000af0 <HAL_GPIO_Init+0x228>)
 8000a04:	42b0      	cmp	r0, r6
 8000a06:	d05d      	beq.n	8000ac4 <HAL_GPIO_Init+0x1fc>
 8000a08:	4e3a      	ldr	r6, [pc, #232]	; (8000af4 <HAL_GPIO_Init+0x22c>)
 8000a0a:	42b0      	cmp	r0, r6
 8000a0c:	d05f      	beq.n	8000ace <HAL_GPIO_Init+0x206>
 8000a0e:	4e3a      	ldr	r6, [pc, #232]	; (8000af8 <HAL_GPIO_Init+0x230>)
 8000a10:	42b0      	cmp	r0, r6
 8000a12:	bf0c      	ite	eq
 8000a14:	2609      	moveq	r6, #9
 8000a16:	260a      	movne	r6, #10
 8000a18:	fa06 f202 	lsl.w	r2, r6, r2
 8000a1c:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a1e:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8000a20:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8000a24:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a28:	03e5      	lsls	r5, r4, #15
    position++;
 8000a2a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 8000a2e:	bf54      	ite	pl
 8000a30:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8000a32:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8000a36:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3a:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 8000a3c:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8000a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8000a44:	bf54      	ite	pl
 8000a46:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000a48:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4c:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8000a4e:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8000a52:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8000a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8000a58:	bf54      	ite	pl
 8000a5a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000a5c:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a60:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 8000a62:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 8000a66:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 8000a68:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 8000a6a:	bf54      	ite	pl
 8000a6c:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8000a6e:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8000a72:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000a74:	fa39 f203 	lsrs.w	r2, r9, r3
 8000a78:	f47f af55 	bne.w	8000926 <HAL_GPIO_Init+0x5e>
  }
}
 8000a7c:	b005      	add	sp, #20
 8000a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a82:	40bd      	lsls	r5, r7
 8000a84:	43ed      	mvns	r5, r5
 8000a86:	e775      	b.n	8000974 <HAL_GPIO_Init+0xac>
 8000a88:	2603      	movs	r6, #3
 8000a8a:	fa06 f202 	lsl.w	r2, r6, r2
 8000a8e:	4315      	orrs	r5, r2
 8000a90:	e7c5      	b.n	8000a1e <HAL_GPIO_Init+0x156>
 8000a92:	2601      	movs	r6, #1
 8000a94:	fa06 f202 	lsl.w	r2, r6, r2
 8000a98:	4315      	orrs	r5, r2
 8000a9a:	e7c0      	b.n	8000a1e <HAL_GPIO_Init+0x156>
 8000a9c:	2602      	movs	r6, #2
 8000a9e:	fa06 f202 	lsl.w	r2, r6, r2
 8000aa2:	4315      	orrs	r5, r2
 8000aa4:	e7bb      	b.n	8000a1e <HAL_GPIO_Init+0x156>
 8000aa6:	2606      	movs	r6, #6
 8000aa8:	fa06 f202 	lsl.w	r2, r6, r2
 8000aac:	4315      	orrs	r5, r2
 8000aae:	e7b6      	b.n	8000a1e <HAL_GPIO_Init+0x156>
 8000ab0:	2604      	movs	r6, #4
 8000ab2:	fa06 f202 	lsl.w	r2, r6, r2
 8000ab6:	4315      	orrs	r5, r2
 8000ab8:	e7b1      	b.n	8000a1e <HAL_GPIO_Init+0x156>
 8000aba:	2605      	movs	r6, #5
 8000abc:	fa06 f202 	lsl.w	r2, r6, r2
 8000ac0:	4315      	orrs	r5, r2
 8000ac2:	e7ac      	b.n	8000a1e <HAL_GPIO_Init+0x156>
 8000ac4:	2607      	movs	r6, #7
 8000ac6:	fa06 f202 	lsl.w	r2, r6, r2
 8000aca:	4315      	orrs	r5, r2
 8000acc:	e7a7      	b.n	8000a1e <HAL_GPIO_Init+0x156>
 8000ace:	2608      	movs	r6, #8
 8000ad0:	fa06 f202 	lsl.w	r2, r6, r2
 8000ad4:	4315      	orrs	r5, r2
 8000ad6:	e7a2      	b.n	8000a1e <HAL_GPIO_Init+0x156>
 8000ad8:	58020000 	.word	0x58020000
 8000adc:	58020800 	.word	0x58020800
 8000ae0:	58020c00 	.word	0x58020c00
 8000ae4:	58021000 	.word	0x58021000
 8000ae8:	58021400 	.word	0x58021400
 8000aec:	58021800 	.word	0x58021800
 8000af0:	58021c00 	.word	0x58021c00
 8000af4:	58022000 	.word	0x58022000
 8000af8:	58022400 	.word	0x58022400
 8000afc:	58024400 	.word	0x58024400
 8000b00:	58000080 	.word	0x58000080

08000b04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b04:	b902      	cbnz	r2, 8000b08 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b06:	0409      	lsls	r1, r1, #16
 8000b08:	6181      	str	r1, [r0, #24]
  }
}
 8000b0a:	4770      	bx	lr

08000b0c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b0c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b0e:	ea01 0203 	and.w	r2, r1, r3
 8000b12:	ea21 0103 	bic.w	r1, r1, r3
 8000b16:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000b1a:	6181      	str	r1, [r0, #24]
}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000b20:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_PWREx_ConfigSupply+0x48>)
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	0752      	lsls	r2, r2, #29
 8000b28:	d406      	bmi.n	8000b38 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000b30:	1a18      	subs	r0, r3, r0
 8000b32:	bf18      	it	ne
 8000b34:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8000b36:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000b38:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000b3a:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000b3c:	f022 0207 	bic.w	r2, r2, #7
 8000b40:	4310      	orrs	r0, r2
 8000b42:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8000b44:	f7ff fe4e 	bl	80007e4 <HAL_GetTick>
 8000b48:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000b4a:	e005      	b.n	8000b58 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000b4c:	f7ff fe4a 	bl	80007e4 <HAL_GetTick>
 8000b50:	1b00      	subs	r0, r0, r4
 8000b52:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b56:	d804      	bhi.n	8000b62 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000b58:	686b      	ldr	r3, [r5, #4]
 8000b5a:	049b      	lsls	r3, r3, #18
 8000b5c:	d5f6      	bpl.n	8000b4c <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8000b5e:	2000      	movs	r0, #0
}
 8000b60:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8000b62:	2001      	movs	r0, #1
}
 8000b64:	bd38      	pop	{r3, r4, r5, pc}
 8000b66:	bf00      	nop
 8000b68:	58024800 	.word	0x58024800

08000b6c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	f000 81f7 	beq.w	8000f60 <HAL_RCC_OscConfig+0x3f4>
{
 8000b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b74:	6803      	ldr	r3, [r0, #0]
 8000b76:	4604      	mov	r4, r0
 8000b78:	07d9      	lsls	r1, r3, #31
 8000b7a:	d52e      	bpl.n	8000bda <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b7c:	49b4      	ldr	r1, [pc, #720]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000b7e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000b80:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b82:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000b86:	2a10      	cmp	r2, #16
 8000b88:	f000 812c 	beq.w	8000de4 <HAL_RCC_OscConfig+0x278>
 8000b8c:	2a18      	cmp	r2, #24
 8000b8e:	f000 8124 	beq.w	8000dda <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b92:	6863      	ldr	r3, [r4, #4]
 8000b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b98:	f000 8167 	beq.w	8000e6a <HAL_RCC_OscConfig+0x2fe>
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 817f 	beq.w	8000ea0 <HAL_RCC_OscConfig+0x334>
 8000ba2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ba6:	4baa      	ldr	r3, [pc, #680]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	f000 8278 	beq.w	800109e <HAL_RCC_OscConfig+0x532>
 8000bae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fe12 	bl	80007e4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bc0:	4ea3      	ldr	r6, [pc, #652]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8000bc2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bc4:	e005      	b.n	8000bd2 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc6:	f7ff fe0d 	bl	80007e4 <HAL_GetTick>
 8000bca:	1b40      	subs	r0, r0, r5
 8000bcc:	2864      	cmp	r0, #100	; 0x64
 8000bce:	f200 8165 	bhi.w	8000e9c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bd2:	6833      	ldr	r3, [r6, #0]
 8000bd4:	039f      	lsls	r7, r3, #14
 8000bd6:	d5f6      	bpl.n	8000bc6 <HAL_RCC_OscConfig+0x5a>
 8000bd8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bda:	0799      	lsls	r1, r3, #30
 8000bdc:	d521      	bpl.n	8000c22 <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bde:	4a9c      	ldr	r2, [pc, #624]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000be0:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000be2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000be4:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8000be8:	f040 80a8 	bne.w	8000d3c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bec:	4b98      	ldr	r3, [pc, #608]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	075b      	lsls	r3, r3, #29
 8000bf2:	d503      	bpl.n	8000bfc <HAL_RCC_OscConfig+0x90>
 8000bf4:	68e3      	ldr	r3, [r4, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 80ed 	beq.w	8000dd6 <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bfc:	f7ff fdf8 	bl	80007f0 <HAL_GetREVID>
 8000c00:	f241 0303 	movw	r3, #4099	; 0x1003
 8000c04:	4298      	cmp	r0, r3
 8000c06:	f200 8189 	bhi.w	8000f1c <HAL_RCC_OscConfig+0x3b0>
 8000c0a:	6922      	ldr	r2, [r4, #16]
 8000c0c:	2a40      	cmp	r2, #64	; 0x40
 8000c0e:	f000 824e 	beq.w	80010ae <HAL_RCC_OscConfig+0x542>
 8000c12:	498f      	ldr	r1, [pc, #572]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000c14:	684b      	ldr	r3, [r1, #4]
 8000c16:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000c1a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8000c1e:	604b      	str	r3, [r1, #4]
 8000c20:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000c22:	06d9      	lsls	r1, r3, #27
 8000c24:	d456      	bmi.n	8000cd4 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c26:	071d      	lsls	r5, r3, #28
 8000c28:	d517      	bpl.n	8000c5a <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c2a:	6963      	ldr	r3, [r4, #20]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 80b4 	beq.w	8000d9a <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c32:	4b87      	ldr	r3, [pc, #540]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000c34:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000c36:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8000c38:	f042 0201 	orr.w	r2, r2, #1
 8000c3c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000c3e:	f7ff fdd1 	bl	80007e4 <HAL_GetTick>
 8000c42:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000c44:	e005      	b.n	8000c52 <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c46:	f7ff fdcd 	bl	80007e4 <HAL_GetTick>
 8000c4a:	1b40      	subs	r0, r0, r5
 8000c4c:	2802      	cmp	r0, #2
 8000c4e:	f200 8125 	bhi.w	8000e9c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000c52:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000c54:	0798      	lsls	r0, r3, #30
 8000c56:	d5f6      	bpl.n	8000c46 <HAL_RCC_OscConfig+0xda>
 8000c58:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c5a:	069a      	lsls	r2, r3, #26
 8000c5c:	d517      	bpl.n	8000c8e <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000c5e:	69a3      	ldr	r3, [r4, #24]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f000 8134 	beq.w	8000ece <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000c66:	4b7a      	ldr	r3, [pc, #488]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000c68:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000c6a:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8000c6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c70:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c72:	f7ff fdb7 	bl	80007e4 <HAL_GetTick>
 8000c76:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000c78:	e005      	b.n	8000c86 <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000c7a:	f7ff fdb3 	bl	80007e4 <HAL_GetTick>
 8000c7e:	1b40      	subs	r0, r0, r5
 8000c80:	2802      	cmp	r0, #2
 8000c82:	f200 810b 	bhi.w	8000e9c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000c86:	6833      	ldr	r3, [r6, #0]
 8000c88:	049f      	lsls	r7, r3, #18
 8000c8a:	d5f6      	bpl.n	8000c7a <HAL_RCC_OscConfig+0x10e>
 8000c8c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c8e:	0759      	lsls	r1, r3, #29
 8000c90:	f100 80b2 	bmi.w	8000df8 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c94:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000c96:	b1d8      	cbz	r0, 8000cd0 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000c98:	4b6d      	ldr	r3, [pc, #436]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000ca0:	2a18      	cmp	r2, #24
 8000ca2:	f000 81ce 	beq.w	8001042 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ca6:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ca8:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000caa:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8000cac:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000cb0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cb2:	f000 8161 	beq.w	8000f78 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb6:	f7ff fd95 	bl	80007e4 <HAL_GetTick>
 8000cba:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000cbc:	e005      	b.n	8000cca <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cbe:	f7ff fd91 	bl	80007e4 <HAL_GetTick>
 8000cc2:	1b00      	subs	r0, r0, r4
 8000cc4:	2802      	cmp	r0, #2
 8000cc6:	f200 80e9 	bhi.w	8000e9c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000cca:	682b      	ldr	r3, [r5, #0]
 8000ccc:	019b      	lsls	r3, r3, #6
 8000cce:	d4f6      	bmi.n	8000cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000cd0:	2000      	movs	r0, #0
}
 8000cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cd4:	4a5e      	ldr	r2, [pc, #376]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000cd6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000cd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d072      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x25c>
 8000ce2:	2b18      	cmp	r3, #24
 8000ce4:	d06c      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000ce6:	69e3      	ldr	r3, [r4, #28]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 8103 	beq.w	8000ef4 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 8000cee:	4b58      	ldr	r3, [pc, #352]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000cf2:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8000cf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cf8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fd73 	bl	80007e4 <HAL_GetTick>
 8000cfe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000d00:	e005      	b.n	8000d0e <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000d02:	f7ff fd6f 	bl	80007e4 <HAL_GetTick>
 8000d06:	1b40      	subs	r0, r0, r5
 8000d08:	2802      	cmp	r0, #2
 8000d0a:	f200 80c7 	bhi.w	8000e9c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000d0e:	6833      	ldr	r3, [r6, #0]
 8000d10:	05db      	lsls	r3, r3, #23
 8000d12:	d5f6      	bpl.n	8000d02 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d14:	f7ff fd6c 	bl	80007f0 <HAL_GetREVID>
 8000d18:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 81e9 	bhi.w	80010f4 <HAL_RCC_OscConfig+0x588>
 8000d22:	6a22      	ldr	r2, [r4, #32]
 8000d24:	6873      	ldr	r3, [r6, #4]
 8000d26:	2a20      	cmp	r2, #32
 8000d28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000d2c:	bf0c      	ite	eq
 8000d2e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8000d32:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8000d36:	6073      	str	r3, [r6, #4]
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	e774      	b.n	8000c26 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000d3c:	2b18      	cmp	r3, #24
 8000d3e:	f000 810b 	beq.w	8000f58 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d42:	68e2      	ldr	r2, [r4, #12]
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f000 80f3 	beq.w	8000f30 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000d4a:	4941      	ldr	r1, [pc, #260]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000d4c:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d4e:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000d50:	f023 0319 	bic.w	r3, r3, #25
 8000d54:	4313      	orrs	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8000d58:	f7ff fd44 	bl	80007e4 <HAL_GetTick>
 8000d5c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d5e:	e005      	b.n	8000d6c <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d60:	f7ff fd40 	bl	80007e4 <HAL_GetTick>
 8000d64:	1b40      	subs	r0, r0, r5
 8000d66:	2802      	cmp	r0, #2
 8000d68:	f200 8098 	bhi.w	8000e9c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d6c:	6833      	ldr	r3, [r6, #0]
 8000d6e:	075f      	lsls	r7, r3, #29
 8000d70:	d5f6      	bpl.n	8000d60 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d72:	f7ff fd3d 	bl	80007f0 <HAL_GetREVID>
 8000d76:	f241 0303 	movw	r3, #4099	; 0x1003
 8000d7a:	4298      	cmp	r0, r3
 8000d7c:	f200 81c3 	bhi.w	8001106 <HAL_RCC_OscConfig+0x59a>
 8000d80:	6922      	ldr	r2, [r4, #16]
 8000d82:	6873      	ldr	r3, [r6, #4]
 8000d84:	2a40      	cmp	r2, #64	; 0x40
 8000d86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000d8a:	bf0c      	ite	eq
 8000d8c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8000d90:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8000d94:	6073      	str	r3, [r6, #4]
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	e743      	b.n	8000c22 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000d9c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000d9e:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8000da0:	f022 0201 	bic.w	r2, r2, #1
 8000da4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000da6:	f7ff fd1d 	bl	80007e4 <HAL_GetTick>
 8000daa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000dac:	e004      	b.n	8000db8 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dae:	f7ff fd19 	bl	80007e4 <HAL_GetTick>
 8000db2:	1b40      	subs	r0, r0, r5
 8000db4:	2802      	cmp	r0, #2
 8000db6:	d871      	bhi.n	8000e9c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000db8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000dba:	0799      	lsls	r1, r3, #30
 8000dbc:	d4f7      	bmi.n	8000dae <HAL_RCC_OscConfig+0x242>
 8000dbe:	e74b      	b.n	8000c58 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000dc0:	f002 0203 	and.w	r2, r2, #3
 8000dc4:	2a01      	cmp	r2, #1
 8000dc6:	d18e      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	05da      	lsls	r2, r3, #23
 8000dce:	d552      	bpl.n	8000e76 <HAL_RCC_OscConfig+0x30a>
 8000dd0:	69e3      	ldr	r3, [r4, #28]
 8000dd2:	2b80      	cmp	r3, #128	; 0x80
 8000dd4:	d04f      	beq.n	8000e76 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8000dd6:	2001      	movs	r0, #1
}
 8000dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000dda:	f001 0103 	and.w	r1, r1, #3
 8000dde:	2902      	cmp	r1, #2
 8000de0:	f47f aed7 	bne.w	8000b92 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de4:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000de6:	6812      	ldr	r2, [r2, #0]
 8000de8:	0392      	lsls	r2, r2, #14
 8000dea:	f57f aef6 	bpl.w	8000bda <HAL_RCC_OscConfig+0x6e>
 8000dee:	6862      	ldr	r2, [r4, #4]
 8000df0:	2a00      	cmp	r2, #0
 8000df2:	f47f aef2 	bne.w	8000bda <HAL_RCC_OscConfig+0x6e>
 8000df6:	e7ee      	b.n	8000dd6 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_RCC_OscConfig+0x2e8>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000dfc:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8000dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e02:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000e04:	f7ff fcee 	bl	80007e4 <HAL_GetTick>
 8000e08:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000e0a:	e004      	b.n	8000e16 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e0c:	f7ff fcea 	bl	80007e4 <HAL_GetTick>
 8000e10:	1b40      	subs	r0, r0, r5
 8000e12:	2864      	cmp	r0, #100	; 0x64
 8000e14:	d842      	bhi.n	8000e9c <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000e16:	6833      	ldr	r3, [r6, #0]
 8000e18:	05da      	lsls	r2, r3, #23
 8000e1a:	d5f7      	bpl.n	8000e0c <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e1c:	68a3      	ldr	r3, [r4, #8]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	f000 817a 	beq.w	8001118 <HAL_RCC_OscConfig+0x5ac>
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 814b 	beq.w	80010c0 <HAL_RCC_OscConfig+0x554>
 8000e2a:	2b05      	cmp	r3, #5
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
 8000e2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e30:	f000 8187 	beq.w	8001142 <HAL_RCC_OscConfig+0x5d6>
 8000e34:	f022 0201 	bic.w	r2, r2, #1
 8000e38:	671a      	str	r2, [r3, #112]	; 0x70
 8000e3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000e3c:	f022 0204 	bic.w	r2, r2, #4
 8000e40:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e42:	f7ff fccf 	bl	80007e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000e46:	4e02      	ldr	r6, [pc, #8]	; (8000e50 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e48:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e4c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x2f6>
 8000e50:	58024400 	.word	0x58024400
 8000e54:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e58:	f7ff fcc4 	bl	80007e4 <HAL_GetTick>
 8000e5c:	1b40      	subs	r0, r0, r5
 8000e5e:	42b8      	cmp	r0, r7
 8000e60:	d81c      	bhi.n	8000e9c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000e62:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000e64:	079b      	lsls	r3, r3, #30
 8000e66:	d5f7      	bpl.n	8000e58 <HAL_RCC_OscConfig+0x2ec>
 8000e68:	e714      	b.n	8000c94 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6a:	4aae      	ldr	r2, [pc, #696]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
 8000e6c:	6813      	ldr	r3, [r2, #0]
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e72:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e74:	e6a2      	b.n	8000bbc <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000e76:	f7ff fcbb 	bl	80007f0 <HAL_GetREVID>
 8000e7a:	f241 0303 	movw	r3, #4099	; 0x1003
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d870      	bhi.n	8000f64 <HAL_RCC_OscConfig+0x3f8>
 8000e82:	6a22      	ldr	r2, [r4, #32]
 8000e84:	2a20      	cmp	r2, #32
 8000e86:	f000 8153 	beq.w	8001130 <HAL_RCC_OscConfig+0x5c4>
 8000e8a:	49a6      	ldr	r1, [pc, #664]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
 8000e8c:	684b      	ldr	r3, [r1, #4]
 8000e8e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000e92:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8000e96:	604b      	str	r3, [r1, #4]
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	e6c4      	b.n	8000c26 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000e9c:	2003      	movs	r0, #3
}
 8000e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea0:	4ba0      	ldr	r3, [pc, #640]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ea4:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000eb2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fc96 	bl	80007e4 <HAL_GetTick>
 8000eb8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000eba:	e004      	b.n	8000ec6 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ebc:	f7ff fc92 	bl	80007e4 <HAL_GetTick>
 8000ec0:	1b40      	subs	r0, r0, r5
 8000ec2:	2864      	cmp	r0, #100	; 0x64
 8000ec4:	d8ea      	bhi.n	8000e9c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ec6:	6833      	ldr	r3, [r6, #0]
 8000ec8:	0398      	lsls	r0, r3, #14
 8000eca:	d4f7      	bmi.n	8000ebc <HAL_RCC_OscConfig+0x350>
 8000ecc:	e684      	b.n	8000bd8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8000ece:	4b95      	ldr	r3, [pc, #596]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000ed2:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8000ed4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ed8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000eda:	f7ff fc83 	bl	80007e4 <HAL_GetTick>
 8000ede:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000ee0:	e004      	b.n	8000eec <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000ee2:	f7ff fc7f 	bl	80007e4 <HAL_GetTick>
 8000ee6:	1b40      	subs	r0, r0, r5
 8000ee8:	2802      	cmp	r0, #2
 8000eea:	d8d7      	bhi.n	8000e9c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000eec:	6833      	ldr	r3, [r6, #0]
 8000eee:	0498      	lsls	r0, r3, #18
 8000ef0:	d4f7      	bmi.n	8000ee2 <HAL_RCC_OscConfig+0x376>
 8000ef2:	e6cb      	b.n	8000c8c <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8000ef4:	4b8b      	ldr	r3, [pc, #556]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000ef8:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8000efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000efe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f00:	f7ff fc70 	bl	80007e4 <HAL_GetTick>
 8000f04:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000f06:	e004      	b.n	8000f12 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000f08:	f7ff fc6c 	bl	80007e4 <HAL_GetTick>
 8000f0c:	1b40      	subs	r0, r0, r5
 8000f0e:	2802      	cmp	r0, #2
 8000f10:	d8c4      	bhi.n	8000e9c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000f12:	6833      	ldr	r3, [r6, #0]
 8000f14:	05df      	lsls	r7, r3, #23
 8000f16:	d4f7      	bmi.n	8000f08 <HAL_RCC_OscConfig+0x39c>
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	e684      	b.n	8000c26 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1c:	4a81      	ldr	r2, [pc, #516]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
 8000f1e:	6921      	ldr	r1, [r4, #16]
 8000f20:	6853      	ldr	r3, [r2, #4]
 8000f22:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000f26:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000f2a:	6053      	str	r3, [r2, #4]
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	e678      	b.n	8000c22 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8000f30:	4b7c      	ldr	r3, [pc, #496]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
 8000f32:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f34:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8000f36:	f022 0201 	bic.w	r2, r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fc52 	bl	80007e4 <HAL_GetTick>
 8000f40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f42:	e004      	b.n	8000f4e <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f44:	f7ff fc4e 	bl	80007e4 <HAL_GetTick>
 8000f48:	1b40      	subs	r0, r0, r5
 8000f4a:	2802      	cmp	r0, #2
 8000f4c:	d8a6      	bhi.n	8000e9c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f4e:	6833      	ldr	r3, [r6, #0]
 8000f50:	0758      	lsls	r0, r3, #29
 8000f52:	d4f7      	bmi.n	8000f44 <HAL_RCC_OscConfig+0x3d8>
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	e664      	b.n	8000c22 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000f58:	0792      	lsls	r2, r2, #30
 8000f5a:	f47f aef2 	bne.w	8000d42 <HAL_RCC_OscConfig+0x1d6>
 8000f5e:	e645      	b.n	8000bec <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8000f60:	2001      	movs	r0, #1
}
 8000f62:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f64:	4a6f      	ldr	r2, [pc, #444]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
 8000f66:	6a21      	ldr	r1, [r4, #32]
 8000f68:	68d3      	ldr	r3, [r2, #12]
 8000f6a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000f6e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000f72:	60d3      	str	r3, [r2, #12]
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	e656      	b.n	8000c26 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8000f78:	f7ff fc34 	bl	80007e4 <HAL_GetTick>
 8000f7c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000f7e:	e004      	b.n	8000f8a <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f80:	f7ff fc30 	bl	80007e4 <HAL_GetTick>
 8000f84:	1b80      	subs	r0, r0, r6
 8000f86:	2802      	cmp	r0, #2
 8000f88:	d888      	bhi.n	8000e9c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000f8a:	682b      	ldr	r3, [r5, #0]
 8000f8c:	0199      	lsls	r1, r3, #6
 8000f8e:	d4f7      	bmi.n	8000f80 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f90:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000f92:	4b65      	ldr	r3, [pc, #404]	; (8001128 <HAL_RCC_OscConfig+0x5bc>)
 8000f94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f96:	4013      	ands	r3, r2
 8000f98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000f9a:	4964      	ldr	r1, [pc, #400]	; (800112c <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f9c:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000f9e:	4e61      	ldr	r6, [pc, #388]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000fa4:	62ab      	str	r3, [r5, #40]	; 0x28
 8000fa6:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8000fa8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8000fac:	3f01      	subs	r7, #1
 8000fae:	1e50      	subs	r0, r2, #1
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000fb4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	0400      	lsls	r0, r0, #16
 8000fbc:	3a01      	subs	r2, #1
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8000fc4:	0612      	lsls	r2, r2, #24
 8000fc6:	4303      	orrs	r3, r0
 8000fc8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000fcc:	433b      	orrs	r3, r7
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8000fd2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000fda:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000fdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fde:	4011      	ands	r1, r2
 8000fe0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8000fe4:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000fe6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000fe8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fea:	f023 030c 	bic.w	r3, r3, #12
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000ff2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ff4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000ff6:	f023 0302 	bic.w	r3, r3, #2
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000ffe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001004:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001006:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800100e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001016:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800101e:	682b      	ldr	r3, [r5, #0]
 8001020:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001024:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001026:	f7ff fbdd 	bl	80007e4 <HAL_GetTick>
 800102a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800102c:	e005      	b.n	800103a <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff fbd9 	bl	80007e4 <HAL_GetTick>
 8001032:	1b00      	subs	r0, r0, r4
 8001034:	2802      	cmp	r0, #2
 8001036:	f63f af31 	bhi.w	8000e9c <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800103a:	6833      	ldr	r3, [r6, #0]
 800103c:	019a      	lsls	r2, r3, #6
 800103e:	d5f6      	bpl.n	800102e <HAL_RCC_OscConfig+0x4c2>
 8001040:	e646      	b.n	8000cd0 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001042:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001046:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001048:	f43f ae43 	beq.w	8000cd2 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001050:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001052:	428b      	cmp	r3, r1
 8001054:	f47f aebf 	bne.w	8000dd6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001058:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800105c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800105e:	429a      	cmp	r2, r3
 8001060:	f47f aeb9 	bne.w	8000dd6 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001064:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001066:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800106a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800106c:	429a      	cmp	r2, r3
 800106e:	f47f aeb2 	bne.w	8000dd6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001072:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001074:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8001078:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800107a:	429a      	cmp	r2, r3
 800107c:	f47f aeab 	bne.w	8000dd6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001080:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001082:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8001086:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001088:	429a      	cmp	r2, r3
 800108a:	f47f aea4 	bne.w	8000dd6 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800108e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001090:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8001094:	3801      	subs	r0, #1
  return HAL_OK;
 8001096:	1a28      	subs	r0, r5, r0
 8001098:	bf18      	it	ne
 800109a:	2001      	movne	r0, #1
}
 800109c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800109e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e586      	b.n	8000bbc <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ae:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
 80010b0:	6853      	ldr	r3, [r2, #4]
 80010b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80010b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ba:	6053      	str	r3, [r2, #4]
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	e5b0      	b.n	8000c22 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80010c8:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	671a      	str	r2, [r3, #112]	; 0x70
 80010d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010d2:	f022 0204 	bic.w	r2, r2, #4
 80010d6:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80010d8:	f7ff fb84 	bl	80007e4 <HAL_GetTick>
 80010dc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80010de:	e005      	b.n	80010ec <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e0:	f7ff fb80 	bl	80007e4 <HAL_GetTick>
 80010e4:	1b40      	subs	r0, r0, r5
 80010e6:	42b8      	cmp	r0, r7
 80010e8:	f63f aed8 	bhi.w	8000e9c <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80010ec:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80010ee:	0798      	lsls	r0, r3, #30
 80010f0:	d4f6      	bmi.n	80010e0 <HAL_RCC_OscConfig+0x574>
 80010f2:	e5cf      	b.n	8000c94 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010f4:	68f3      	ldr	r3, [r6, #12]
 80010f6:	6a22      	ldr	r2, [r4, #32]
 80010f8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80010fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001100:	60f3      	str	r3, [r6, #12]
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	e58f      	b.n	8000c26 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001106:	6873      	ldr	r3, [r6, #4]
 8001108:	6922      	ldr	r2, [r4, #16]
 800110a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800110e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001112:	6073      	str	r3, [r6, #4]
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	e584      	b.n	8000c22 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001118:	4a02      	ldr	r2, [pc, #8]	; (8001124 <HAL_RCC_OscConfig+0x5b8>)
 800111a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001122:	e68e      	b.n	8000e42 <HAL_RCC_OscConfig+0x2d6>
 8001124:	58024400 	.word	0x58024400
 8001128:	fffffc0c 	.word	0xfffffc0c
 800112c:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_RCC_OscConfig+0x5e8>)
 8001132:	6853      	ldr	r3, [r2, #4]
 8001134:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800113c:	6053      	str	r3, [r2, #4]
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	e571      	b.n	8000c26 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001142:	f042 0204 	orr.w	r2, r2, #4
 8001146:	671a      	str	r2, [r3, #112]	; 0x70
 8001148:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800114a:	f042 0201 	orr.w	r2, r2, #1
 800114e:	671a      	str	r2, [r3, #112]	; 0x70
 8001150:	e677      	b.n	8000e42 <HAL_RCC_OscConfig+0x2d6>
 8001152:	bf00      	nop
 8001154:	58024400 	.word	0x58024400

08001158 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001158:	4a47      	ldr	r2, [pc, #284]	; (8001278 <HAL_RCC_GetSysClockFreq+0x120>)
 800115a:	6913      	ldr	r3, [r2, #16]
 800115c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001160:	2b10      	cmp	r3, #16
 8001162:	d004      	beq.n	800116e <HAL_RCC_GetSysClockFreq+0x16>
 8001164:	2b18      	cmp	r3, #24
 8001166:	d00d      	beq.n	8001184 <HAL_RCC_GetSysClockFreq+0x2c>
 8001168:	b11b      	cbz	r3, 8001172 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800116a:	4844      	ldr	r0, [pc, #272]	; (800127c <HAL_RCC_GetSysClockFreq+0x124>)
 800116c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800116e:	4844      	ldr	r0, [pc, #272]	; (8001280 <HAL_RCC_GetSysClockFreq+0x128>)
 8001170:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001172:	6813      	ldr	r3, [r2, #0]
 8001174:	0699      	lsls	r1, r3, #26
 8001176:	d54a      	bpl.n	800120e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001178:	6813      	ldr	r3, [r2, #0]
 800117a:	4842      	ldr	r0, [pc, #264]	; (8001284 <HAL_RCC_GetSysClockFreq+0x12c>)
 800117c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001180:	40d8      	lsrs	r0, r3
 8001182:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001184:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8001186:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001188:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800118a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 800118c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001190:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001194:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8001196:	d038      	beq.n	800120a <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001198:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800119c:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80011a0:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80011a4:	fb01 f105 	mul.w	r1, r1, r5
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	ee07 1a90 	vmov	s15, r1
 80011ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 80011b2:	d002      	beq.n	80011ba <HAL_RCC_GetSysClockFreq+0x62>
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d02c      	beq.n	8001212 <HAL_RCC_GetSysClockFreq+0xba>
 80011b8:	b393      	cbz	r3, 8001220 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80011ba:	ee07 0a90 	vmov	s15, r0
 80011be:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001288 <HAL_RCC_GetSysClockFreq+0x130>
 80011c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011c8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80011cc:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800128c <HAL_RCC_GetSysClockFreq+0x134>
 80011d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011d4:	ee06 3a90 	vmov	s13, r3
 80011d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80011dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80011e0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80011e4:	eee7 6a25 	vfma.f32	s13, s14, s11
 80011e8:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <HAL_RCC_GetSysClockFreq+0x120>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80011f4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001206:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800120a:	bc30      	pop	{r4, r5}
 800120c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800120e:	481d      	ldr	r0, [pc, #116]	; (8001284 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8001210:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001212:	ee07 0a90 	vmov	s15, r0
 8001216:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001290 <HAL_RCC_GetSysClockFreq+0x138>
 800121a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800121e:	e7d2      	b.n	80011c6 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001220:	6813      	ldr	r3, [r2, #0]
 8001222:	069b      	lsls	r3, r3, #26
 8001224:	d520      	bpl.n	8001268 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001226:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001228:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800122c:	4915      	ldr	r1, [pc, #84]	; (8001284 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800122e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001232:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800123c:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800123e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800128c <HAL_RCC_GetSysClockFreq+0x134>
 8001242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001246:	ee06 1a10 	vmov	s12, r1
 800124a:	ee06 3a90 	vmov	s13, r3
 800124e:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8001252:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001256:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800125a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800125e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8001262:	ee66 6a26 	vmul.f32	s13, s12, s13
 8001266:	e7c1      	b.n	80011ec <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001268:	ee07 0a90 	vmov	s15, r0
 800126c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001294 <HAL_RCC_GetSysClockFreq+0x13c>
 8001270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001274:	e7a7      	b.n	80011c6 <HAL_RCC_GetSysClockFreq+0x6e>
 8001276:	bf00      	nop
 8001278:	58024400 	.word	0x58024400
 800127c:	003d0900 	.word	0x003d0900
 8001280:	017d7840 	.word	0x017d7840
 8001284:	03d09000 	.word	0x03d09000
 8001288:	4a742400 	.word	0x4a742400
 800128c:	39000000 	.word	0x39000000
 8001290:	4bbebc20 	.word	0x4bbebc20
 8001294:	4c742400 	.word	0x4c742400

08001298 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001298:	2800      	cmp	r0, #0
 800129a:	f000 810e 	beq.w	80014ba <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800129e:	4a8d      	ldr	r2, [pc, #564]	; (80014d4 <HAL_RCC_ClockConfig+0x23c>)
 80012a0:	6813      	ldr	r3, [r2, #0]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	428b      	cmp	r3, r1
{
 80012a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ac:	4604      	mov	r4, r0
 80012ae:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012b0:	d20c      	bcs.n	80012cc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	6813      	ldr	r3, [r2, #0]
 80012b4:	f023 030f 	bic.w	r3, r3, #15
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012bc:	6813      	ldr	r3, [r2, #0]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	428b      	cmp	r3, r1
 80012c4:	d002      	beq.n	80012cc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80012c6:	2001      	movs	r0, #1
}
 80012c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	075f      	lsls	r7, r3, #29
 80012d0:	d50b      	bpl.n	80012ea <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80012d2:	4981      	ldr	r1, [pc, #516]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 80012d4:	6920      	ldr	r0, [r4, #16]
 80012d6:	698a      	ldr	r2, [r1, #24]
 80012d8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80012dc:	4290      	cmp	r0, r2
 80012de:	d904      	bls.n	80012ea <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80012e0:	698a      	ldr	r2, [r1, #24]
 80012e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012e6:	4302      	orrs	r2, r0
 80012e8:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ea:	071e      	lsls	r6, r3, #28
 80012ec:	d50b      	bpl.n	8001306 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80012ee:	497a      	ldr	r1, [pc, #488]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 80012f0:	6960      	ldr	r0, [r4, #20]
 80012f2:	69ca      	ldr	r2, [r1, #28]
 80012f4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80012f8:	4290      	cmp	r0, r2
 80012fa:	d904      	bls.n	8001306 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80012fc:	69ca      	ldr	r2, [r1, #28]
 80012fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001302:	4302      	orrs	r2, r0
 8001304:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001306:	06d8      	lsls	r0, r3, #27
 8001308:	d50b      	bpl.n	8001322 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800130a:	4973      	ldr	r1, [pc, #460]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 800130c:	69a0      	ldr	r0, [r4, #24]
 800130e:	69ca      	ldr	r2, [r1, #28]
 8001310:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001314:	4290      	cmp	r0, r2
 8001316:	d904      	bls.n	8001322 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001318:	69ca      	ldr	r2, [r1, #28]
 800131a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800131e:	4302      	orrs	r2, r0
 8001320:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001322:	0699      	lsls	r1, r3, #26
 8001324:	d50b      	bpl.n	800133e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001326:	496c      	ldr	r1, [pc, #432]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 8001328:	69e0      	ldr	r0, [r4, #28]
 800132a:	6a0a      	ldr	r2, [r1, #32]
 800132c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001330:	4290      	cmp	r0, r2
 8001332:	d904      	bls.n	800133e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001334:	6a0a      	ldr	r2, [r1, #32]
 8001336:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800133a:	4302      	orrs	r2, r0
 800133c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800133e:	079a      	lsls	r2, r3, #30
 8001340:	f140 80ad 	bpl.w	800149e <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001344:	4864      	ldr	r0, [pc, #400]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 8001346:	68e1      	ldr	r1, [r4, #12]
 8001348:	6982      	ldr	r2, [r0, #24]
 800134a:	f002 020f 	and.w	r2, r2, #15
 800134e:	4291      	cmp	r1, r2
 8001350:	d904      	bls.n	800135c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001352:	6982      	ldr	r2, [r0, #24]
 8001354:	f022 020f 	bic.w	r2, r2, #15
 8001358:	430a      	orrs	r2, r1
 800135a:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800135c:	07d8      	lsls	r0, r3, #31
 800135e:	d531      	bpl.n	80013c4 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001360:	4a5d      	ldr	r2, [pc, #372]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 8001362:	68a1      	ldr	r1, [r4, #8]
 8001364:	6993      	ldr	r3, [r2, #24]
 8001366:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800136a:	430b      	orrs	r3, r1
 800136c:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800136e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001370:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001372:	2902      	cmp	r1, #2
 8001374:	f000 80a3 	beq.w	80014be <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001378:	2903      	cmp	r1, #3
 800137a:	f000 809a 	beq.w	80014b2 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800137e:	2901      	cmp	r1, #1
 8001380:	f000 80a3 	beq.w	80014ca <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001384:	0758      	lsls	r0, r3, #29
 8001386:	d59e      	bpl.n	80012c6 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001388:	4a53      	ldr	r2, [pc, #332]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800138a:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800138e:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001390:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001392:	f023 0307 	bic.w	r3, r3, #7
 8001396:	430b      	orrs	r3, r1
 8001398:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 800139a:	f7ff fa23 	bl	80007e4 <HAL_GetTick>
 800139e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a0:	e005      	b.n	80013ae <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a2:	f7ff fa1f 	bl	80007e4 <HAL_GetTick>
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	4540      	cmp	r0, r8
 80013aa:	f200 808c 	bhi.w	80014c6 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	6862      	ldr	r2, [r4, #4]
 80013b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013b6:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80013ba:	d1f2      	bne.n	80013a2 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	0799      	lsls	r1, r3, #30
 80013c0:	d506      	bpl.n	80013d0 <HAL_RCC_ClockConfig+0x138>
 80013c2:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80013c4:	4844      	ldr	r0, [pc, #272]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 80013c6:	6982      	ldr	r2, [r0, #24]
 80013c8:	f002 020f 	and.w	r2, r2, #15
 80013cc:	428a      	cmp	r2, r1
 80013ce:	d86a      	bhi.n	80014a6 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013d0:	4940      	ldr	r1, [pc, #256]	; (80014d4 <HAL_RCC_ClockConfig+0x23c>)
 80013d2:	680a      	ldr	r2, [r1, #0]
 80013d4:	f002 020f 	and.w	r2, r2, #15
 80013d8:	42aa      	cmp	r2, r5
 80013da:	d90a      	bls.n	80013f2 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013dc:	680a      	ldr	r2, [r1, #0]
 80013de:	f022 020f 	bic.w	r2, r2, #15
 80013e2:	432a      	orrs	r2, r5
 80013e4:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e6:	680a      	ldr	r2, [r1, #0]
 80013e8:	f002 020f 	and.w	r2, r2, #15
 80013ec:	42aa      	cmp	r2, r5
 80013ee:	f47f af6a 	bne.w	80012c6 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80013f2:	075a      	lsls	r2, r3, #29
 80013f4:	d50b      	bpl.n	800140e <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80013f6:	4938      	ldr	r1, [pc, #224]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 80013f8:	6920      	ldr	r0, [r4, #16]
 80013fa:	698a      	ldr	r2, [r1, #24]
 80013fc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001400:	4290      	cmp	r0, r2
 8001402:	d204      	bcs.n	800140e <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001404:	698a      	ldr	r2, [r1, #24]
 8001406:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800140a:	4302      	orrs	r2, r0
 800140c:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140e:	071f      	lsls	r7, r3, #28
 8001410:	d50b      	bpl.n	800142a <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001412:	4931      	ldr	r1, [pc, #196]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 8001414:	6960      	ldr	r0, [r4, #20]
 8001416:	69ca      	ldr	r2, [r1, #28]
 8001418:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800141c:	4290      	cmp	r0, r2
 800141e:	d204      	bcs.n	800142a <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001420:	69ca      	ldr	r2, [r1, #28]
 8001422:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001426:	4302      	orrs	r2, r0
 8001428:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142a:	06de      	lsls	r6, r3, #27
 800142c:	d50b      	bpl.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800142e:	492a      	ldr	r1, [pc, #168]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 8001430:	69a0      	ldr	r0, [r4, #24]
 8001432:	69ca      	ldr	r2, [r1, #28]
 8001434:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001438:	4290      	cmp	r0, r2
 800143a:	d204      	bcs.n	8001446 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800143c:	69ca      	ldr	r2, [r1, #28]
 800143e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001442:	4302      	orrs	r2, r0
 8001444:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001446:	069d      	lsls	r5, r3, #26
 8001448:	d50b      	bpl.n	8001462 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800144a:	4a23      	ldr	r2, [pc, #140]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 800144c:	69e1      	ldr	r1, [r4, #28]
 800144e:	6a13      	ldr	r3, [r2, #32]
 8001450:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001454:	4299      	cmp	r1, r3
 8001456:	d204      	bcs.n	8001462 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001458:	6a13      	ldr	r3, [r2, #32]
 800145a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800145e:	430b      	orrs	r3, r1
 8001460:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001462:	f7ff fe79 	bl	8001158 <HAL_RCC_GetSysClockFreq>
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <HAL_RCC_ClockConfig+0x240>)
 8001468:	4602      	mov	r2, r0
 800146a:	481c      	ldr	r0, [pc, #112]	; (80014dc <HAL_RCC_ClockConfig+0x244>)
 800146c:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800146e:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001470:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8001474:	4d1a      	ldr	r5, [pc, #104]	; (80014e0 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4c1a      	ldr	r4, [pc, #104]	; (80014e4 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800147c:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800147e:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001480:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8001484:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001486:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800148a:	4d17      	ldr	r5, [pc, #92]	; (80014e8 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800148c:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800148e:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8001492:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001494:	6023      	str	r3, [r4, #0]
}
 8001496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800149a:	f7ff b941 	b.w	8000720 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149e:	07da      	lsls	r2, r3, #31
 80014a0:	f53f af5e 	bmi.w	8001360 <HAL_RCC_ClockConfig+0xc8>
 80014a4:	e794      	b.n	80013d0 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a6:	6982      	ldr	r2, [r0, #24]
 80014a8:	f022 020f 	bic.w	r2, r2, #15
 80014ac:	4311      	orrs	r1, r2
 80014ae:	6181      	str	r1, [r0, #24]
 80014b0:	e78e      	b.n	80013d0 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014b2:	019f      	lsls	r7, r3, #6
 80014b4:	f53f af68 	bmi.w	8001388 <HAL_RCC_ClockConfig+0xf0>
 80014b8:	e705      	b.n	80012c6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80014ba:	2001      	movs	r0, #1
}
 80014bc:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014be:	039b      	lsls	r3, r3, #14
 80014c0:	f53f af62 	bmi.w	8001388 <HAL_RCC_ClockConfig+0xf0>
 80014c4:	e6ff      	b.n	80012c6 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80014c6:	2003      	movs	r0, #3
 80014c8:	e6fe      	b.n	80012c8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014ca:	05de      	lsls	r6, r3, #23
 80014cc:	f53f af5c 	bmi.w	8001388 <HAL_RCC_ClockConfig+0xf0>
 80014d0:	e6f9      	b.n	80012c6 <HAL_RCC_ClockConfig+0x2e>
 80014d2:	bf00      	nop
 80014d4:	52002000 	.word	0x52002000
 80014d8:	58024400 	.word	0x58024400
 80014dc:	0800256c 	.word	0x0800256c
 80014e0:	2400000c 	.word	0x2400000c
 80014e4:	24000004 	.word	0x24000004
 80014e8:	24000000 	.word	0x24000000

080014ec <__errno>:
 80014ec:	4b01      	ldr	r3, [pc, #4]	; (80014f4 <__errno+0x8>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	24000010 	.word	0x24000010

080014f8 <__libc_init_array>:
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	4d0d      	ldr	r5, [pc, #52]	; (8001530 <__libc_init_array+0x38>)
 80014fc:	4c0d      	ldr	r4, [pc, #52]	; (8001534 <__libc_init_array+0x3c>)
 80014fe:	1b64      	subs	r4, r4, r5
 8001500:	10a4      	asrs	r4, r4, #2
 8001502:	2600      	movs	r6, #0
 8001504:	42a6      	cmp	r6, r4
 8001506:	d109      	bne.n	800151c <__libc_init_array+0x24>
 8001508:	4d0b      	ldr	r5, [pc, #44]	; (8001538 <__libc_init_array+0x40>)
 800150a:	4c0c      	ldr	r4, [pc, #48]	; (800153c <__libc_init_array+0x44>)
 800150c:	f001 f822 	bl	8002554 <_init>
 8001510:	1b64      	subs	r4, r4, r5
 8001512:	10a4      	asrs	r4, r4, #2
 8001514:	2600      	movs	r6, #0
 8001516:	42a6      	cmp	r6, r4
 8001518:	d105      	bne.n	8001526 <__libc_init_array+0x2e>
 800151a:	bd70      	pop	{r4, r5, r6, pc}
 800151c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001520:	4798      	blx	r3
 8001522:	3601      	adds	r6, #1
 8001524:	e7ee      	b.n	8001504 <__libc_init_array+0xc>
 8001526:	f855 3b04 	ldr.w	r3, [r5], #4
 800152a:	4798      	blx	r3
 800152c:	3601      	adds	r6, #1
 800152e:	e7f2      	b.n	8001516 <__libc_init_array+0x1e>
 8001530:	080026c8 	.word	0x080026c8
 8001534:	080026c8 	.word	0x080026c8
 8001538:	080026c8 	.word	0x080026c8
 800153c:	080026cc 	.word	0x080026cc

08001540 <memset>:
 8001540:	4402      	add	r2, r0
 8001542:	4603      	mov	r3, r0
 8001544:	4293      	cmp	r3, r2
 8001546:	d100      	bne.n	800154a <memset+0xa>
 8001548:	4770      	bx	lr
 800154a:	f803 1b01 	strb.w	r1, [r3], #1
 800154e:	e7f9      	b.n	8001544 <memset+0x4>

08001550 <rand>:
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <rand+0x60>)
 8001552:	b510      	push	{r4, lr}
 8001554:	681c      	ldr	r4, [r3, #0]
 8001556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001558:	b9b3      	cbnz	r3, 8001588 <rand+0x38>
 800155a:	2018      	movs	r0, #24
 800155c:	f000 f868 	bl	8001630 <malloc>
 8001560:	63a0      	str	r0, [r4, #56]	; 0x38
 8001562:	b928      	cbnz	r0, 8001570 <rand+0x20>
 8001564:	4602      	mov	r2, r0
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <rand+0x64>)
 8001568:	4813      	ldr	r0, [pc, #76]	; (80015b8 <rand+0x68>)
 800156a:	214e      	movs	r1, #78	; 0x4e
 800156c:	f000 f830 	bl	80015d0 <__assert_func>
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <rand+0x6c>)
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <rand+0x70>)
 8001574:	e9c0 2300 	strd	r2, r3, [r0]
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <rand+0x74>)
 800157a:	6083      	str	r3, [r0, #8]
 800157c:	230b      	movs	r3, #11
 800157e:	8183      	strh	r3, [r0, #12]
 8001580:	2201      	movs	r2, #1
 8001582:	2300      	movs	r3, #0
 8001584:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001588:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800158a:	480f      	ldr	r0, [pc, #60]	; (80015c8 <rand+0x78>)
 800158c:	690a      	ldr	r2, [r1, #16]
 800158e:	694b      	ldr	r3, [r1, #20]
 8001590:	4c0e      	ldr	r4, [pc, #56]	; (80015cc <rand+0x7c>)
 8001592:	4350      	muls	r0, r2
 8001594:	fb04 0003 	mla	r0, r4, r3, r0
 8001598:	fba2 3404 	umull	r3, r4, r2, r4
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	4404      	add	r4, r0
 80015a0:	f144 0000 	adc.w	r0, r4, #0
 80015a4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80015a8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80015ac:	bd10      	pop	{r4, pc}
 80015ae:	bf00      	nop
 80015b0:	24000010 	.word	0x24000010
 80015b4:	08002580 	.word	0x08002580
 80015b8:	08002597 	.word	0x08002597
 80015bc:	abcd330e 	.word	0xabcd330e
 80015c0:	e66d1234 	.word	0xe66d1234
 80015c4:	0005deec 	.word	0x0005deec
 80015c8:	5851f42d 	.word	0x5851f42d
 80015cc:	4c957f2d 	.word	0x4c957f2d

080015d0 <__assert_func>:
 80015d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80015d2:	4614      	mov	r4, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <__assert_func+0x2c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4605      	mov	r5, r0
 80015dc:	68d8      	ldr	r0, [r3, #12]
 80015de:	b14c      	cbz	r4, 80015f4 <__assert_func+0x24>
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <__assert_func+0x30>)
 80015e2:	9100      	str	r1, [sp, #0]
 80015e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80015e8:	4906      	ldr	r1, [pc, #24]	; (8001604 <__assert_func+0x34>)
 80015ea:	462b      	mov	r3, r5
 80015ec:	f000 f80e 	bl	800160c <fiprintf>
 80015f0:	f000 fc8e 	bl	8001f10 <abort>
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__assert_func+0x38>)
 80015f6:	461c      	mov	r4, r3
 80015f8:	e7f3      	b.n	80015e2 <__assert_func+0x12>
 80015fa:	bf00      	nop
 80015fc:	24000010 	.word	0x24000010
 8001600:	080025f6 	.word	0x080025f6
 8001604:	08002603 	.word	0x08002603
 8001608:	08002631 	.word	0x08002631

0800160c <fiprintf>:
 800160c:	b40e      	push	{r1, r2, r3}
 800160e:	b503      	push	{r0, r1, lr}
 8001610:	4601      	mov	r1, r0
 8001612:	ab03      	add	r3, sp, #12
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <fiprintf+0x20>)
 8001616:	f853 2b04 	ldr.w	r2, [r3], #4
 800161a:	6800      	ldr	r0, [r0, #0]
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f000 f8e3 	bl	80017e8 <_vfiprintf_r>
 8001622:	b002      	add	sp, #8
 8001624:	f85d eb04 	ldr.w	lr, [sp], #4
 8001628:	b003      	add	sp, #12
 800162a:	4770      	bx	lr
 800162c:	24000010 	.word	0x24000010

08001630 <malloc>:
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <malloc+0xc>)
 8001632:	4601      	mov	r1, r0
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f000 b853 	b.w	80016e0 <_malloc_r>
 800163a:	bf00      	nop
 800163c:	24000010 	.word	0x24000010

08001640 <_free_r>:
 8001640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001642:	2900      	cmp	r1, #0
 8001644:	d048      	beq.n	80016d8 <_free_r+0x98>
 8001646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800164a:	9001      	str	r0, [sp, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f1a1 0404 	sub.w	r4, r1, #4
 8001652:	bfb8      	it	lt
 8001654:	18e4      	addlt	r4, r4, r3
 8001656:	f000 fe81 	bl	800235c <__malloc_lock>
 800165a:	4a20      	ldr	r2, [pc, #128]	; (80016dc <_free_r+0x9c>)
 800165c:	9801      	ldr	r0, [sp, #4]
 800165e:	6813      	ldr	r3, [r2, #0]
 8001660:	4615      	mov	r5, r2
 8001662:	b933      	cbnz	r3, 8001672 <_free_r+0x32>
 8001664:	6063      	str	r3, [r4, #4]
 8001666:	6014      	str	r4, [r2, #0]
 8001668:	b003      	add	sp, #12
 800166a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800166e:	f000 be7b 	b.w	8002368 <__malloc_unlock>
 8001672:	42a3      	cmp	r3, r4
 8001674:	d90b      	bls.n	800168e <_free_r+0x4e>
 8001676:	6821      	ldr	r1, [r4, #0]
 8001678:	1862      	adds	r2, r4, r1
 800167a:	4293      	cmp	r3, r2
 800167c:	bf04      	itt	eq
 800167e:	681a      	ldreq	r2, [r3, #0]
 8001680:	685b      	ldreq	r3, [r3, #4]
 8001682:	6063      	str	r3, [r4, #4]
 8001684:	bf04      	itt	eq
 8001686:	1852      	addeq	r2, r2, r1
 8001688:	6022      	streq	r2, [r4, #0]
 800168a:	602c      	str	r4, [r5, #0]
 800168c:	e7ec      	b.n	8001668 <_free_r+0x28>
 800168e:	461a      	mov	r2, r3
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	b10b      	cbz	r3, 8001698 <_free_r+0x58>
 8001694:	42a3      	cmp	r3, r4
 8001696:	d9fa      	bls.n	800168e <_free_r+0x4e>
 8001698:	6811      	ldr	r1, [r2, #0]
 800169a:	1855      	adds	r5, r2, r1
 800169c:	42a5      	cmp	r5, r4
 800169e:	d10b      	bne.n	80016b8 <_free_r+0x78>
 80016a0:	6824      	ldr	r4, [r4, #0]
 80016a2:	4421      	add	r1, r4
 80016a4:	1854      	adds	r4, r2, r1
 80016a6:	42a3      	cmp	r3, r4
 80016a8:	6011      	str	r1, [r2, #0]
 80016aa:	d1dd      	bne.n	8001668 <_free_r+0x28>
 80016ac:	681c      	ldr	r4, [r3, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	6053      	str	r3, [r2, #4]
 80016b2:	4421      	add	r1, r4
 80016b4:	6011      	str	r1, [r2, #0]
 80016b6:	e7d7      	b.n	8001668 <_free_r+0x28>
 80016b8:	d902      	bls.n	80016c0 <_free_r+0x80>
 80016ba:	230c      	movs	r3, #12
 80016bc:	6003      	str	r3, [r0, #0]
 80016be:	e7d3      	b.n	8001668 <_free_r+0x28>
 80016c0:	6825      	ldr	r5, [r4, #0]
 80016c2:	1961      	adds	r1, r4, r5
 80016c4:	428b      	cmp	r3, r1
 80016c6:	bf04      	itt	eq
 80016c8:	6819      	ldreq	r1, [r3, #0]
 80016ca:	685b      	ldreq	r3, [r3, #4]
 80016cc:	6063      	str	r3, [r4, #4]
 80016ce:	bf04      	itt	eq
 80016d0:	1949      	addeq	r1, r1, r5
 80016d2:	6021      	streq	r1, [r4, #0]
 80016d4:	6054      	str	r4, [r2, #4]
 80016d6:	e7c7      	b.n	8001668 <_free_r+0x28>
 80016d8:	b003      	add	sp, #12
 80016da:	bd30      	pop	{r4, r5, pc}
 80016dc:	24000094 	.word	0x24000094

080016e0 <_malloc_r>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	1ccd      	adds	r5, r1, #3
 80016e4:	f025 0503 	bic.w	r5, r5, #3
 80016e8:	3508      	adds	r5, #8
 80016ea:	2d0c      	cmp	r5, #12
 80016ec:	bf38      	it	cc
 80016ee:	250c      	movcc	r5, #12
 80016f0:	2d00      	cmp	r5, #0
 80016f2:	4606      	mov	r6, r0
 80016f4:	db01      	blt.n	80016fa <_malloc_r+0x1a>
 80016f6:	42a9      	cmp	r1, r5
 80016f8:	d903      	bls.n	8001702 <_malloc_r+0x22>
 80016fa:	230c      	movs	r3, #12
 80016fc:	6033      	str	r3, [r6, #0]
 80016fe:	2000      	movs	r0, #0
 8001700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001702:	f000 fe2b 	bl	800235c <__malloc_lock>
 8001706:	4921      	ldr	r1, [pc, #132]	; (800178c <_malloc_r+0xac>)
 8001708:	680a      	ldr	r2, [r1, #0]
 800170a:	4614      	mov	r4, r2
 800170c:	b99c      	cbnz	r4, 8001736 <_malloc_r+0x56>
 800170e:	4f20      	ldr	r7, [pc, #128]	; (8001790 <_malloc_r+0xb0>)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b923      	cbnz	r3, 800171e <_malloc_r+0x3e>
 8001714:	4621      	mov	r1, r4
 8001716:	4630      	mov	r0, r6
 8001718:	f000 fb2a 	bl	8001d70 <_sbrk_r>
 800171c:	6038      	str	r0, [r7, #0]
 800171e:	4629      	mov	r1, r5
 8001720:	4630      	mov	r0, r6
 8001722:	f000 fb25 	bl	8001d70 <_sbrk_r>
 8001726:	1c43      	adds	r3, r0, #1
 8001728:	d123      	bne.n	8001772 <_malloc_r+0x92>
 800172a:	230c      	movs	r3, #12
 800172c:	6033      	str	r3, [r6, #0]
 800172e:	4630      	mov	r0, r6
 8001730:	f000 fe1a 	bl	8002368 <__malloc_unlock>
 8001734:	e7e3      	b.n	80016fe <_malloc_r+0x1e>
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	1b5b      	subs	r3, r3, r5
 800173a:	d417      	bmi.n	800176c <_malloc_r+0x8c>
 800173c:	2b0b      	cmp	r3, #11
 800173e:	d903      	bls.n	8001748 <_malloc_r+0x68>
 8001740:	6023      	str	r3, [r4, #0]
 8001742:	441c      	add	r4, r3
 8001744:	6025      	str	r5, [r4, #0]
 8001746:	e004      	b.n	8001752 <_malloc_r+0x72>
 8001748:	6863      	ldr	r3, [r4, #4]
 800174a:	42a2      	cmp	r2, r4
 800174c:	bf0c      	ite	eq
 800174e:	600b      	streq	r3, [r1, #0]
 8001750:	6053      	strne	r3, [r2, #4]
 8001752:	4630      	mov	r0, r6
 8001754:	f000 fe08 	bl	8002368 <__malloc_unlock>
 8001758:	f104 000b 	add.w	r0, r4, #11
 800175c:	1d23      	adds	r3, r4, #4
 800175e:	f020 0007 	bic.w	r0, r0, #7
 8001762:	1ac2      	subs	r2, r0, r3
 8001764:	d0cc      	beq.n	8001700 <_malloc_r+0x20>
 8001766:	1a1b      	subs	r3, r3, r0
 8001768:	50a3      	str	r3, [r4, r2]
 800176a:	e7c9      	b.n	8001700 <_malloc_r+0x20>
 800176c:	4622      	mov	r2, r4
 800176e:	6864      	ldr	r4, [r4, #4]
 8001770:	e7cc      	b.n	800170c <_malloc_r+0x2c>
 8001772:	1cc4      	adds	r4, r0, #3
 8001774:	f024 0403 	bic.w	r4, r4, #3
 8001778:	42a0      	cmp	r0, r4
 800177a:	d0e3      	beq.n	8001744 <_malloc_r+0x64>
 800177c:	1a21      	subs	r1, r4, r0
 800177e:	4630      	mov	r0, r6
 8001780:	f000 faf6 	bl	8001d70 <_sbrk_r>
 8001784:	3001      	adds	r0, #1
 8001786:	d1dd      	bne.n	8001744 <_malloc_r+0x64>
 8001788:	e7cf      	b.n	800172a <_malloc_r+0x4a>
 800178a:	bf00      	nop
 800178c:	24000094 	.word	0x24000094
 8001790:	24000098 	.word	0x24000098

08001794 <__sfputc_r>:
 8001794:	6893      	ldr	r3, [r2, #8]
 8001796:	3b01      	subs	r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	b410      	push	{r4}
 800179c:	6093      	str	r3, [r2, #8]
 800179e:	da08      	bge.n	80017b2 <__sfputc_r+0x1e>
 80017a0:	6994      	ldr	r4, [r2, #24]
 80017a2:	42a3      	cmp	r3, r4
 80017a4:	db01      	blt.n	80017aa <__sfputc_r+0x16>
 80017a6:	290a      	cmp	r1, #10
 80017a8:	d103      	bne.n	80017b2 <__sfputc_r+0x1e>
 80017aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017ae:	f000 baef 	b.w	8001d90 <__swbuf_r>
 80017b2:	6813      	ldr	r3, [r2, #0]
 80017b4:	1c58      	adds	r0, r3, #1
 80017b6:	6010      	str	r0, [r2, #0]
 80017b8:	7019      	strb	r1, [r3, #0]
 80017ba:	4608      	mov	r0, r1
 80017bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <__sfputs_r>:
 80017c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c4:	4606      	mov	r6, r0
 80017c6:	460f      	mov	r7, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	18d5      	adds	r5, r2, r3
 80017cc:	42ac      	cmp	r4, r5
 80017ce:	d101      	bne.n	80017d4 <__sfputs_r+0x12>
 80017d0:	2000      	movs	r0, #0
 80017d2:	e007      	b.n	80017e4 <__sfputs_r+0x22>
 80017d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017d8:	463a      	mov	r2, r7
 80017da:	4630      	mov	r0, r6
 80017dc:	f7ff ffda 	bl	8001794 <__sfputc_r>
 80017e0:	1c43      	adds	r3, r0, #1
 80017e2:	d1f3      	bne.n	80017cc <__sfputs_r+0xa>
 80017e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017e8 <_vfiprintf_r>:
 80017e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ec:	460d      	mov	r5, r1
 80017ee:	b09d      	sub	sp, #116	; 0x74
 80017f0:	4614      	mov	r4, r2
 80017f2:	4698      	mov	r8, r3
 80017f4:	4606      	mov	r6, r0
 80017f6:	b118      	cbz	r0, 8001800 <_vfiprintf_r+0x18>
 80017f8:	6983      	ldr	r3, [r0, #24]
 80017fa:	b90b      	cbnz	r3, 8001800 <_vfiprintf_r+0x18>
 80017fc:	f000 fcaa 	bl	8002154 <__sinit>
 8001800:	4b89      	ldr	r3, [pc, #548]	; (8001a28 <_vfiprintf_r+0x240>)
 8001802:	429d      	cmp	r5, r3
 8001804:	d11b      	bne.n	800183e <_vfiprintf_r+0x56>
 8001806:	6875      	ldr	r5, [r6, #4]
 8001808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800180a:	07d9      	lsls	r1, r3, #31
 800180c:	d405      	bmi.n	800181a <_vfiprintf_r+0x32>
 800180e:	89ab      	ldrh	r3, [r5, #12]
 8001810:	059a      	lsls	r2, r3, #22
 8001812:	d402      	bmi.n	800181a <_vfiprintf_r+0x32>
 8001814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001816:	f000 fd3b 	bl	8002290 <__retarget_lock_acquire_recursive>
 800181a:	89ab      	ldrh	r3, [r5, #12]
 800181c:	071b      	lsls	r3, r3, #28
 800181e:	d501      	bpl.n	8001824 <_vfiprintf_r+0x3c>
 8001820:	692b      	ldr	r3, [r5, #16]
 8001822:	b9eb      	cbnz	r3, 8001860 <_vfiprintf_r+0x78>
 8001824:	4629      	mov	r1, r5
 8001826:	4630      	mov	r0, r6
 8001828:	f000 fb04 	bl	8001e34 <__swsetup_r>
 800182c:	b1c0      	cbz	r0, 8001860 <_vfiprintf_r+0x78>
 800182e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001830:	07dc      	lsls	r4, r3, #31
 8001832:	d50e      	bpl.n	8001852 <_vfiprintf_r+0x6a>
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	b01d      	add	sp, #116	; 0x74
 800183a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800183e:	4b7b      	ldr	r3, [pc, #492]	; (8001a2c <_vfiprintf_r+0x244>)
 8001840:	429d      	cmp	r5, r3
 8001842:	d101      	bne.n	8001848 <_vfiprintf_r+0x60>
 8001844:	68b5      	ldr	r5, [r6, #8]
 8001846:	e7df      	b.n	8001808 <_vfiprintf_r+0x20>
 8001848:	4b79      	ldr	r3, [pc, #484]	; (8001a30 <_vfiprintf_r+0x248>)
 800184a:	429d      	cmp	r5, r3
 800184c:	bf08      	it	eq
 800184e:	68f5      	ldreq	r5, [r6, #12]
 8001850:	e7da      	b.n	8001808 <_vfiprintf_r+0x20>
 8001852:	89ab      	ldrh	r3, [r5, #12]
 8001854:	0598      	lsls	r0, r3, #22
 8001856:	d4ed      	bmi.n	8001834 <_vfiprintf_r+0x4c>
 8001858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800185a:	f000 fd1a 	bl	8002292 <__retarget_lock_release_recursive>
 800185e:	e7e9      	b.n	8001834 <_vfiprintf_r+0x4c>
 8001860:	2300      	movs	r3, #0
 8001862:	9309      	str	r3, [sp, #36]	; 0x24
 8001864:	2320      	movs	r3, #32
 8001866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800186a:	f8cd 800c 	str.w	r8, [sp, #12]
 800186e:	2330      	movs	r3, #48	; 0x30
 8001870:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001a34 <_vfiprintf_r+0x24c>
 8001874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001878:	f04f 0901 	mov.w	r9, #1
 800187c:	4623      	mov	r3, r4
 800187e:	469a      	mov	sl, r3
 8001880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001884:	b10a      	cbz	r2, 800188a <_vfiprintf_r+0xa2>
 8001886:	2a25      	cmp	r2, #37	; 0x25
 8001888:	d1f9      	bne.n	800187e <_vfiprintf_r+0x96>
 800188a:	ebba 0b04 	subs.w	fp, sl, r4
 800188e:	d00b      	beq.n	80018a8 <_vfiprintf_r+0xc0>
 8001890:	465b      	mov	r3, fp
 8001892:	4622      	mov	r2, r4
 8001894:	4629      	mov	r1, r5
 8001896:	4630      	mov	r0, r6
 8001898:	f7ff ff93 	bl	80017c2 <__sfputs_r>
 800189c:	3001      	adds	r0, #1
 800189e:	f000 80aa 	beq.w	80019f6 <_vfiprintf_r+0x20e>
 80018a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018a4:	445a      	add	r2, fp
 80018a6:	9209      	str	r2, [sp, #36]	; 0x24
 80018a8:	f89a 3000 	ldrb.w	r3, [sl]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80a2 	beq.w	80019f6 <_vfiprintf_r+0x20e>
 80018b2:	2300      	movs	r3, #0
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018bc:	f10a 0a01 	add.w	sl, sl, #1
 80018c0:	9304      	str	r3, [sp, #16]
 80018c2:	9307      	str	r3, [sp, #28]
 80018c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018c8:	931a      	str	r3, [sp, #104]	; 0x68
 80018ca:	4654      	mov	r4, sl
 80018cc:	2205      	movs	r2, #5
 80018ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018d2:	4858      	ldr	r0, [pc, #352]	; (8001a34 <_vfiprintf_r+0x24c>)
 80018d4:	f7fe fd04 	bl	80002e0 <memchr>
 80018d8:	9a04      	ldr	r2, [sp, #16]
 80018da:	b9d8      	cbnz	r0, 8001914 <_vfiprintf_r+0x12c>
 80018dc:	06d1      	lsls	r1, r2, #27
 80018de:	bf44      	itt	mi
 80018e0:	2320      	movmi	r3, #32
 80018e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018e6:	0713      	lsls	r3, r2, #28
 80018e8:	bf44      	itt	mi
 80018ea:	232b      	movmi	r3, #43	; 0x2b
 80018ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018f0:	f89a 3000 	ldrb.w	r3, [sl]
 80018f4:	2b2a      	cmp	r3, #42	; 0x2a
 80018f6:	d015      	beq.n	8001924 <_vfiprintf_r+0x13c>
 80018f8:	9a07      	ldr	r2, [sp, #28]
 80018fa:	4654      	mov	r4, sl
 80018fc:	2000      	movs	r0, #0
 80018fe:	f04f 0c0a 	mov.w	ip, #10
 8001902:	4621      	mov	r1, r4
 8001904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001908:	3b30      	subs	r3, #48	; 0x30
 800190a:	2b09      	cmp	r3, #9
 800190c:	d94e      	bls.n	80019ac <_vfiprintf_r+0x1c4>
 800190e:	b1b0      	cbz	r0, 800193e <_vfiprintf_r+0x156>
 8001910:	9207      	str	r2, [sp, #28]
 8001912:	e014      	b.n	800193e <_vfiprintf_r+0x156>
 8001914:	eba0 0308 	sub.w	r3, r0, r8
 8001918:	fa09 f303 	lsl.w	r3, r9, r3
 800191c:	4313      	orrs	r3, r2
 800191e:	9304      	str	r3, [sp, #16]
 8001920:	46a2      	mov	sl, r4
 8001922:	e7d2      	b.n	80018ca <_vfiprintf_r+0xe2>
 8001924:	9b03      	ldr	r3, [sp, #12]
 8001926:	1d19      	adds	r1, r3, #4
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	9103      	str	r1, [sp, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	bfbb      	ittet	lt
 8001930:	425b      	neglt	r3, r3
 8001932:	f042 0202 	orrlt.w	r2, r2, #2
 8001936:	9307      	strge	r3, [sp, #28]
 8001938:	9307      	strlt	r3, [sp, #28]
 800193a:	bfb8      	it	lt
 800193c:	9204      	strlt	r2, [sp, #16]
 800193e:	7823      	ldrb	r3, [r4, #0]
 8001940:	2b2e      	cmp	r3, #46	; 0x2e
 8001942:	d10c      	bne.n	800195e <_vfiprintf_r+0x176>
 8001944:	7863      	ldrb	r3, [r4, #1]
 8001946:	2b2a      	cmp	r3, #42	; 0x2a
 8001948:	d135      	bne.n	80019b6 <_vfiprintf_r+0x1ce>
 800194a:	9b03      	ldr	r3, [sp, #12]
 800194c:	1d1a      	adds	r2, r3, #4
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	9203      	str	r2, [sp, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	bfb8      	it	lt
 8001956:	f04f 33ff 	movlt.w	r3, #4294967295
 800195a:	3402      	adds	r4, #2
 800195c:	9305      	str	r3, [sp, #20]
 800195e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001a44 <_vfiprintf_r+0x25c>
 8001962:	7821      	ldrb	r1, [r4, #0]
 8001964:	2203      	movs	r2, #3
 8001966:	4650      	mov	r0, sl
 8001968:	f7fe fcba 	bl	80002e0 <memchr>
 800196c:	b140      	cbz	r0, 8001980 <_vfiprintf_r+0x198>
 800196e:	2340      	movs	r3, #64	; 0x40
 8001970:	eba0 000a 	sub.w	r0, r0, sl
 8001974:	fa03 f000 	lsl.w	r0, r3, r0
 8001978:	9b04      	ldr	r3, [sp, #16]
 800197a:	4303      	orrs	r3, r0
 800197c:	3401      	adds	r4, #1
 800197e:	9304      	str	r3, [sp, #16]
 8001980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001984:	482c      	ldr	r0, [pc, #176]	; (8001a38 <_vfiprintf_r+0x250>)
 8001986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800198a:	2206      	movs	r2, #6
 800198c:	f7fe fca8 	bl	80002e0 <memchr>
 8001990:	2800      	cmp	r0, #0
 8001992:	d03f      	beq.n	8001a14 <_vfiprintf_r+0x22c>
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <_vfiprintf_r+0x254>)
 8001996:	bb1b      	cbnz	r3, 80019e0 <_vfiprintf_r+0x1f8>
 8001998:	9b03      	ldr	r3, [sp, #12]
 800199a:	3307      	adds	r3, #7
 800199c:	f023 0307 	bic.w	r3, r3, #7
 80019a0:	3308      	adds	r3, #8
 80019a2:	9303      	str	r3, [sp, #12]
 80019a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019a6:	443b      	add	r3, r7
 80019a8:	9309      	str	r3, [sp, #36]	; 0x24
 80019aa:	e767      	b.n	800187c <_vfiprintf_r+0x94>
 80019ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80019b0:	460c      	mov	r4, r1
 80019b2:	2001      	movs	r0, #1
 80019b4:	e7a5      	b.n	8001902 <_vfiprintf_r+0x11a>
 80019b6:	2300      	movs	r3, #0
 80019b8:	3401      	adds	r4, #1
 80019ba:	9305      	str	r3, [sp, #20]
 80019bc:	4619      	mov	r1, r3
 80019be:	f04f 0c0a 	mov.w	ip, #10
 80019c2:	4620      	mov	r0, r4
 80019c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019c8:	3a30      	subs	r2, #48	; 0x30
 80019ca:	2a09      	cmp	r2, #9
 80019cc:	d903      	bls.n	80019d6 <_vfiprintf_r+0x1ee>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0c5      	beq.n	800195e <_vfiprintf_r+0x176>
 80019d2:	9105      	str	r1, [sp, #20]
 80019d4:	e7c3      	b.n	800195e <_vfiprintf_r+0x176>
 80019d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80019da:	4604      	mov	r4, r0
 80019dc:	2301      	movs	r3, #1
 80019de:	e7f0      	b.n	80019c2 <_vfiprintf_r+0x1da>
 80019e0:	ab03      	add	r3, sp, #12
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	462a      	mov	r2, r5
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <_vfiprintf_r+0x258>)
 80019e8:	a904      	add	r1, sp, #16
 80019ea:	4630      	mov	r0, r6
 80019ec:	f3af 8000 	nop.w
 80019f0:	4607      	mov	r7, r0
 80019f2:	1c78      	adds	r0, r7, #1
 80019f4:	d1d6      	bne.n	80019a4 <_vfiprintf_r+0x1bc>
 80019f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019f8:	07d9      	lsls	r1, r3, #31
 80019fa:	d405      	bmi.n	8001a08 <_vfiprintf_r+0x220>
 80019fc:	89ab      	ldrh	r3, [r5, #12]
 80019fe:	059a      	lsls	r2, r3, #22
 8001a00:	d402      	bmi.n	8001a08 <_vfiprintf_r+0x220>
 8001a02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a04:	f000 fc45 	bl	8002292 <__retarget_lock_release_recursive>
 8001a08:	89ab      	ldrh	r3, [r5, #12]
 8001a0a:	065b      	lsls	r3, r3, #25
 8001a0c:	f53f af12 	bmi.w	8001834 <_vfiprintf_r+0x4c>
 8001a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a12:	e711      	b.n	8001838 <_vfiprintf_r+0x50>
 8001a14:	ab03      	add	r3, sp, #12
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	462a      	mov	r2, r5
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <_vfiprintf_r+0x258>)
 8001a1c:	a904      	add	r1, sp, #16
 8001a1e:	4630      	mov	r0, r6
 8001a20:	f000 f880 	bl	8001b24 <_printf_i>
 8001a24:	e7e4      	b.n	80019f0 <_vfiprintf_r+0x208>
 8001a26:	bf00      	nop
 8001a28:	08002688 	.word	0x08002688
 8001a2c:	080026a8 	.word	0x080026a8
 8001a30:	08002668 	.word	0x08002668
 8001a34:	08002632 	.word	0x08002632
 8001a38:	0800263c 	.word	0x0800263c
 8001a3c:	00000000 	.word	0x00000000
 8001a40:	080017c3 	.word	0x080017c3
 8001a44:	08002638 	.word	0x08002638

08001a48 <_printf_common>:
 8001a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a4c:	4616      	mov	r6, r2
 8001a4e:	4699      	mov	r9, r3
 8001a50:	688a      	ldr	r2, [r1, #8]
 8001a52:	690b      	ldr	r3, [r1, #16]
 8001a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	bfb8      	it	lt
 8001a5c:	4613      	movlt	r3, r2
 8001a5e:	6033      	str	r3, [r6, #0]
 8001a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a64:	4607      	mov	r7, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	b10a      	cbz	r2, 8001a6e <_printf_common+0x26>
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	6033      	str	r3, [r6, #0]
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	0699      	lsls	r1, r3, #26
 8001a72:	bf42      	ittt	mi
 8001a74:	6833      	ldrmi	r3, [r6, #0]
 8001a76:	3302      	addmi	r3, #2
 8001a78:	6033      	strmi	r3, [r6, #0]
 8001a7a:	6825      	ldr	r5, [r4, #0]
 8001a7c:	f015 0506 	ands.w	r5, r5, #6
 8001a80:	d106      	bne.n	8001a90 <_printf_common+0x48>
 8001a82:	f104 0a19 	add.w	sl, r4, #25
 8001a86:	68e3      	ldr	r3, [r4, #12]
 8001a88:	6832      	ldr	r2, [r6, #0]
 8001a8a:	1a9b      	subs	r3, r3, r2
 8001a8c:	42ab      	cmp	r3, r5
 8001a8e:	dc26      	bgt.n	8001ade <_printf_common+0x96>
 8001a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a94:	1e13      	subs	r3, r2, #0
 8001a96:	6822      	ldr	r2, [r4, #0]
 8001a98:	bf18      	it	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	0692      	lsls	r2, r2, #26
 8001a9e:	d42b      	bmi.n	8001af8 <_printf_common+0xb0>
 8001aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	4638      	mov	r0, r7
 8001aa8:	47c0      	blx	r8
 8001aaa:	3001      	adds	r0, #1
 8001aac:	d01e      	beq.n	8001aec <_printf_common+0xa4>
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	68e5      	ldr	r5, [r4, #12]
 8001ab2:	6832      	ldr	r2, [r6, #0]
 8001ab4:	f003 0306 	and.w	r3, r3, #6
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	bf08      	it	eq
 8001abc:	1aad      	subeq	r5, r5, r2
 8001abe:	68a3      	ldr	r3, [r4, #8]
 8001ac0:	6922      	ldr	r2, [r4, #16]
 8001ac2:	bf0c      	ite	eq
 8001ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ac8:	2500      	movne	r5, #0
 8001aca:	4293      	cmp	r3, r2
 8001acc:	bfc4      	itt	gt
 8001ace:	1a9b      	subgt	r3, r3, r2
 8001ad0:	18ed      	addgt	r5, r5, r3
 8001ad2:	2600      	movs	r6, #0
 8001ad4:	341a      	adds	r4, #26
 8001ad6:	42b5      	cmp	r5, r6
 8001ad8:	d11a      	bne.n	8001b10 <_printf_common+0xc8>
 8001ada:	2000      	movs	r0, #0
 8001adc:	e008      	b.n	8001af0 <_printf_common+0xa8>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	4652      	mov	r2, sl
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	4638      	mov	r0, r7
 8001ae6:	47c0      	blx	r8
 8001ae8:	3001      	adds	r0, #1
 8001aea:	d103      	bne.n	8001af4 <_printf_common+0xac>
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001af4:	3501      	adds	r5, #1
 8001af6:	e7c6      	b.n	8001a86 <_printf_common+0x3e>
 8001af8:	18e1      	adds	r1, r4, r3
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	2030      	movs	r0, #48	; 0x30
 8001afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b02:	4422      	add	r2, r4
 8001b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	e7c7      	b.n	8001aa0 <_printf_common+0x58>
 8001b10:	2301      	movs	r3, #1
 8001b12:	4622      	mov	r2, r4
 8001b14:	4649      	mov	r1, r9
 8001b16:	4638      	mov	r0, r7
 8001b18:	47c0      	blx	r8
 8001b1a:	3001      	adds	r0, #1
 8001b1c:	d0e6      	beq.n	8001aec <_printf_common+0xa4>
 8001b1e:	3601      	adds	r6, #1
 8001b20:	e7d9      	b.n	8001ad6 <_printf_common+0x8e>
	...

08001b24 <_printf_i>:
 8001b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b28:	460c      	mov	r4, r1
 8001b2a:	4691      	mov	r9, r2
 8001b2c:	7e27      	ldrb	r7, [r4, #24]
 8001b2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001b30:	2f78      	cmp	r7, #120	; 0x78
 8001b32:	4680      	mov	r8, r0
 8001b34:	469a      	mov	sl, r3
 8001b36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b3a:	d807      	bhi.n	8001b4c <_printf_i+0x28>
 8001b3c:	2f62      	cmp	r7, #98	; 0x62
 8001b3e:	d80a      	bhi.n	8001b56 <_printf_i+0x32>
 8001b40:	2f00      	cmp	r7, #0
 8001b42:	f000 80d8 	beq.w	8001cf6 <_printf_i+0x1d2>
 8001b46:	2f58      	cmp	r7, #88	; 0x58
 8001b48:	f000 80a3 	beq.w	8001c92 <_printf_i+0x16e>
 8001b4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b54:	e03a      	b.n	8001bcc <_printf_i+0xa8>
 8001b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b5a:	2b15      	cmp	r3, #21
 8001b5c:	d8f6      	bhi.n	8001b4c <_printf_i+0x28>
 8001b5e:	a001      	add	r0, pc, #4	; (adr r0, 8001b64 <_printf_i+0x40>)
 8001b60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001b64:	08001bbd 	.word	0x08001bbd
 8001b68:	08001bd1 	.word	0x08001bd1
 8001b6c:	08001b4d 	.word	0x08001b4d
 8001b70:	08001b4d 	.word	0x08001b4d
 8001b74:	08001b4d 	.word	0x08001b4d
 8001b78:	08001b4d 	.word	0x08001b4d
 8001b7c:	08001bd1 	.word	0x08001bd1
 8001b80:	08001b4d 	.word	0x08001b4d
 8001b84:	08001b4d 	.word	0x08001b4d
 8001b88:	08001b4d 	.word	0x08001b4d
 8001b8c:	08001b4d 	.word	0x08001b4d
 8001b90:	08001cdd 	.word	0x08001cdd
 8001b94:	08001c01 	.word	0x08001c01
 8001b98:	08001cbf 	.word	0x08001cbf
 8001b9c:	08001b4d 	.word	0x08001b4d
 8001ba0:	08001b4d 	.word	0x08001b4d
 8001ba4:	08001cff 	.word	0x08001cff
 8001ba8:	08001b4d 	.word	0x08001b4d
 8001bac:	08001c01 	.word	0x08001c01
 8001bb0:	08001b4d 	.word	0x08001b4d
 8001bb4:	08001b4d 	.word	0x08001b4d
 8001bb8:	08001cc7 	.word	0x08001cc7
 8001bbc:	680b      	ldr	r3, [r1, #0]
 8001bbe:	1d1a      	adds	r2, r3, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	600a      	str	r2, [r1, #0]
 8001bc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0a3      	b.n	8001d18 <_printf_i+0x1f4>
 8001bd0:	6825      	ldr	r5, [r4, #0]
 8001bd2:	6808      	ldr	r0, [r1, #0]
 8001bd4:	062e      	lsls	r6, r5, #24
 8001bd6:	f100 0304 	add.w	r3, r0, #4
 8001bda:	d50a      	bpl.n	8001bf2 <_printf_i+0xce>
 8001bdc:	6805      	ldr	r5, [r0, #0]
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	2d00      	cmp	r5, #0
 8001be2:	da03      	bge.n	8001bec <_printf_i+0xc8>
 8001be4:	232d      	movs	r3, #45	; 0x2d
 8001be6:	426d      	negs	r5, r5
 8001be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bec:	485e      	ldr	r0, [pc, #376]	; (8001d68 <_printf_i+0x244>)
 8001bee:	230a      	movs	r3, #10
 8001bf0:	e019      	b.n	8001c26 <_printf_i+0x102>
 8001bf2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001bf6:	6805      	ldr	r5, [r0, #0]
 8001bf8:	600b      	str	r3, [r1, #0]
 8001bfa:	bf18      	it	ne
 8001bfc:	b22d      	sxthne	r5, r5
 8001bfe:	e7ef      	b.n	8001be0 <_printf_i+0xbc>
 8001c00:	680b      	ldr	r3, [r1, #0]
 8001c02:	6825      	ldr	r5, [r4, #0]
 8001c04:	1d18      	adds	r0, r3, #4
 8001c06:	6008      	str	r0, [r1, #0]
 8001c08:	0628      	lsls	r0, r5, #24
 8001c0a:	d501      	bpl.n	8001c10 <_printf_i+0xec>
 8001c0c:	681d      	ldr	r5, [r3, #0]
 8001c0e:	e002      	b.n	8001c16 <_printf_i+0xf2>
 8001c10:	0669      	lsls	r1, r5, #25
 8001c12:	d5fb      	bpl.n	8001c0c <_printf_i+0xe8>
 8001c14:	881d      	ldrh	r5, [r3, #0]
 8001c16:	4854      	ldr	r0, [pc, #336]	; (8001d68 <_printf_i+0x244>)
 8001c18:	2f6f      	cmp	r7, #111	; 0x6f
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2308      	moveq	r3, #8
 8001c1e:	230a      	movne	r3, #10
 8001c20:	2100      	movs	r1, #0
 8001c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c26:	6866      	ldr	r6, [r4, #4]
 8001c28:	60a6      	str	r6, [r4, #8]
 8001c2a:	2e00      	cmp	r6, #0
 8001c2c:	bfa2      	ittt	ge
 8001c2e:	6821      	ldrge	r1, [r4, #0]
 8001c30:	f021 0104 	bicge.w	r1, r1, #4
 8001c34:	6021      	strge	r1, [r4, #0]
 8001c36:	b90d      	cbnz	r5, 8001c3c <_printf_i+0x118>
 8001c38:	2e00      	cmp	r6, #0
 8001c3a:	d04d      	beq.n	8001cd8 <_printf_i+0x1b4>
 8001c3c:	4616      	mov	r6, r2
 8001c3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c42:	fb03 5711 	mls	r7, r3, r1, r5
 8001c46:	5dc7      	ldrb	r7, [r0, r7]
 8001c48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c4c:	462f      	mov	r7, r5
 8001c4e:	42bb      	cmp	r3, r7
 8001c50:	460d      	mov	r5, r1
 8001c52:	d9f4      	bls.n	8001c3e <_printf_i+0x11a>
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d10b      	bne.n	8001c70 <_printf_i+0x14c>
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	07df      	lsls	r7, r3, #31
 8001c5c:	d508      	bpl.n	8001c70 <_printf_i+0x14c>
 8001c5e:	6923      	ldr	r3, [r4, #16]
 8001c60:	6861      	ldr	r1, [r4, #4]
 8001c62:	4299      	cmp	r1, r3
 8001c64:	bfde      	ittt	le
 8001c66:	2330      	movle	r3, #48	; 0x30
 8001c68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c70:	1b92      	subs	r2, r2, r6
 8001c72:	6122      	str	r2, [r4, #16]
 8001c74:	f8cd a000 	str.w	sl, [sp]
 8001c78:	464b      	mov	r3, r9
 8001c7a:	aa03      	add	r2, sp, #12
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	4640      	mov	r0, r8
 8001c80:	f7ff fee2 	bl	8001a48 <_printf_common>
 8001c84:	3001      	adds	r0, #1
 8001c86:	d14c      	bne.n	8001d22 <_printf_i+0x1fe>
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	b004      	add	sp, #16
 8001c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c92:	4835      	ldr	r0, [pc, #212]	; (8001d68 <_printf_i+0x244>)
 8001c94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	680e      	ldr	r6, [r1, #0]
 8001c9c:	061f      	lsls	r7, r3, #24
 8001c9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001ca2:	600e      	str	r6, [r1, #0]
 8001ca4:	d514      	bpl.n	8001cd0 <_printf_i+0x1ac>
 8001ca6:	07d9      	lsls	r1, r3, #31
 8001ca8:	bf44      	itt	mi
 8001caa:	f043 0320 	orrmi.w	r3, r3, #32
 8001cae:	6023      	strmi	r3, [r4, #0]
 8001cb0:	b91d      	cbnz	r5, 8001cba <_printf_i+0x196>
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	f023 0320 	bic.w	r3, r3, #32
 8001cb8:	6023      	str	r3, [r4, #0]
 8001cba:	2310      	movs	r3, #16
 8001cbc:	e7b0      	b.n	8001c20 <_printf_i+0xfc>
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	f043 0320 	orr.w	r3, r3, #32
 8001cc4:	6023      	str	r3, [r4, #0]
 8001cc6:	2378      	movs	r3, #120	; 0x78
 8001cc8:	4828      	ldr	r0, [pc, #160]	; (8001d6c <_printf_i+0x248>)
 8001cca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cce:	e7e3      	b.n	8001c98 <_printf_i+0x174>
 8001cd0:	065e      	lsls	r6, r3, #25
 8001cd2:	bf48      	it	mi
 8001cd4:	b2ad      	uxthmi	r5, r5
 8001cd6:	e7e6      	b.n	8001ca6 <_printf_i+0x182>
 8001cd8:	4616      	mov	r6, r2
 8001cda:	e7bb      	b.n	8001c54 <_printf_i+0x130>
 8001cdc:	680b      	ldr	r3, [r1, #0]
 8001cde:	6826      	ldr	r6, [r4, #0]
 8001ce0:	6960      	ldr	r0, [r4, #20]
 8001ce2:	1d1d      	adds	r5, r3, #4
 8001ce4:	600d      	str	r5, [r1, #0]
 8001ce6:	0635      	lsls	r5, r6, #24
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	d501      	bpl.n	8001cf0 <_printf_i+0x1cc>
 8001cec:	6018      	str	r0, [r3, #0]
 8001cee:	e002      	b.n	8001cf6 <_printf_i+0x1d2>
 8001cf0:	0671      	lsls	r1, r6, #25
 8001cf2:	d5fb      	bpl.n	8001cec <_printf_i+0x1c8>
 8001cf4:	8018      	strh	r0, [r3, #0]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	6123      	str	r3, [r4, #16]
 8001cfa:	4616      	mov	r6, r2
 8001cfc:	e7ba      	b.n	8001c74 <_printf_i+0x150>
 8001cfe:	680b      	ldr	r3, [r1, #0]
 8001d00:	1d1a      	adds	r2, r3, #4
 8001d02:	600a      	str	r2, [r1, #0]
 8001d04:	681e      	ldr	r6, [r3, #0]
 8001d06:	6862      	ldr	r2, [r4, #4]
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	f7fe fae8 	bl	80002e0 <memchr>
 8001d10:	b108      	cbz	r0, 8001d16 <_printf_i+0x1f2>
 8001d12:	1b80      	subs	r0, r0, r6
 8001d14:	6060      	str	r0, [r4, #4]
 8001d16:	6863      	ldr	r3, [r4, #4]
 8001d18:	6123      	str	r3, [r4, #16]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d20:	e7a8      	b.n	8001c74 <_printf_i+0x150>
 8001d22:	6923      	ldr	r3, [r4, #16]
 8001d24:	4632      	mov	r2, r6
 8001d26:	4649      	mov	r1, r9
 8001d28:	4640      	mov	r0, r8
 8001d2a:	47d0      	blx	sl
 8001d2c:	3001      	adds	r0, #1
 8001d2e:	d0ab      	beq.n	8001c88 <_printf_i+0x164>
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	079b      	lsls	r3, r3, #30
 8001d34:	d413      	bmi.n	8001d5e <_printf_i+0x23a>
 8001d36:	68e0      	ldr	r0, [r4, #12]
 8001d38:	9b03      	ldr	r3, [sp, #12]
 8001d3a:	4298      	cmp	r0, r3
 8001d3c:	bfb8      	it	lt
 8001d3e:	4618      	movlt	r0, r3
 8001d40:	e7a4      	b.n	8001c8c <_printf_i+0x168>
 8001d42:	2301      	movs	r3, #1
 8001d44:	4632      	mov	r2, r6
 8001d46:	4649      	mov	r1, r9
 8001d48:	4640      	mov	r0, r8
 8001d4a:	47d0      	blx	sl
 8001d4c:	3001      	adds	r0, #1
 8001d4e:	d09b      	beq.n	8001c88 <_printf_i+0x164>
 8001d50:	3501      	adds	r5, #1
 8001d52:	68e3      	ldr	r3, [r4, #12]
 8001d54:	9903      	ldr	r1, [sp, #12]
 8001d56:	1a5b      	subs	r3, r3, r1
 8001d58:	42ab      	cmp	r3, r5
 8001d5a:	dcf2      	bgt.n	8001d42 <_printf_i+0x21e>
 8001d5c:	e7eb      	b.n	8001d36 <_printf_i+0x212>
 8001d5e:	2500      	movs	r5, #0
 8001d60:	f104 0619 	add.w	r6, r4, #25
 8001d64:	e7f5      	b.n	8001d52 <_printf_i+0x22e>
 8001d66:	bf00      	nop
 8001d68:	08002643 	.word	0x08002643
 8001d6c:	08002654 	.word	0x08002654

08001d70 <_sbrk_r>:
 8001d70:	b538      	push	{r3, r4, r5, lr}
 8001d72:	4d06      	ldr	r5, [pc, #24]	; (8001d8c <_sbrk_r+0x1c>)
 8001d74:	2300      	movs	r3, #0
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	602b      	str	r3, [r5, #0]
 8001d7c:	f7fe fc00 	bl	8000580 <_sbrk>
 8001d80:	1c43      	adds	r3, r0, #1
 8001d82:	d102      	bne.n	8001d8a <_sbrk_r+0x1a>
 8001d84:	682b      	ldr	r3, [r5, #0]
 8001d86:	b103      	cbz	r3, 8001d8a <_sbrk_r+0x1a>
 8001d88:	6023      	str	r3, [r4, #0]
 8001d8a:	bd38      	pop	{r3, r4, r5, pc}
 8001d8c:	240000ac 	.word	0x240000ac

08001d90 <__swbuf_r>:
 8001d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d92:	460e      	mov	r6, r1
 8001d94:	4614      	mov	r4, r2
 8001d96:	4605      	mov	r5, r0
 8001d98:	b118      	cbz	r0, 8001da2 <__swbuf_r+0x12>
 8001d9a:	6983      	ldr	r3, [r0, #24]
 8001d9c:	b90b      	cbnz	r3, 8001da2 <__swbuf_r+0x12>
 8001d9e:	f000 f9d9 	bl	8002154 <__sinit>
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <__swbuf_r+0x98>)
 8001da4:	429c      	cmp	r4, r3
 8001da6:	d12b      	bne.n	8001e00 <__swbuf_r+0x70>
 8001da8:	686c      	ldr	r4, [r5, #4]
 8001daa:	69a3      	ldr	r3, [r4, #24]
 8001dac:	60a3      	str	r3, [r4, #8]
 8001dae:	89a3      	ldrh	r3, [r4, #12]
 8001db0:	071a      	lsls	r2, r3, #28
 8001db2:	d52f      	bpl.n	8001e14 <__swbuf_r+0x84>
 8001db4:	6923      	ldr	r3, [r4, #16]
 8001db6:	b36b      	cbz	r3, 8001e14 <__swbuf_r+0x84>
 8001db8:	6923      	ldr	r3, [r4, #16]
 8001dba:	6820      	ldr	r0, [r4, #0]
 8001dbc:	1ac0      	subs	r0, r0, r3
 8001dbe:	6963      	ldr	r3, [r4, #20]
 8001dc0:	b2f6      	uxtb	r6, r6
 8001dc2:	4283      	cmp	r3, r0
 8001dc4:	4637      	mov	r7, r6
 8001dc6:	dc04      	bgt.n	8001dd2 <__swbuf_r+0x42>
 8001dc8:	4621      	mov	r1, r4
 8001dca:	4628      	mov	r0, r5
 8001dcc:	f000 f92e 	bl	800202c <_fflush_r>
 8001dd0:	bb30      	cbnz	r0, 8001e20 <__swbuf_r+0x90>
 8001dd2:	68a3      	ldr	r3, [r4, #8]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	60a3      	str	r3, [r4, #8]
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	6022      	str	r2, [r4, #0]
 8001dde:	701e      	strb	r6, [r3, #0]
 8001de0:	6963      	ldr	r3, [r4, #20]
 8001de2:	3001      	adds	r0, #1
 8001de4:	4283      	cmp	r3, r0
 8001de6:	d004      	beq.n	8001df2 <__swbuf_r+0x62>
 8001de8:	89a3      	ldrh	r3, [r4, #12]
 8001dea:	07db      	lsls	r3, r3, #31
 8001dec:	d506      	bpl.n	8001dfc <__swbuf_r+0x6c>
 8001dee:	2e0a      	cmp	r6, #10
 8001df0:	d104      	bne.n	8001dfc <__swbuf_r+0x6c>
 8001df2:	4621      	mov	r1, r4
 8001df4:	4628      	mov	r0, r5
 8001df6:	f000 f919 	bl	800202c <_fflush_r>
 8001dfa:	b988      	cbnz	r0, 8001e20 <__swbuf_r+0x90>
 8001dfc:	4638      	mov	r0, r7
 8001dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <__swbuf_r+0x9c>)
 8001e02:	429c      	cmp	r4, r3
 8001e04:	d101      	bne.n	8001e0a <__swbuf_r+0x7a>
 8001e06:	68ac      	ldr	r4, [r5, #8]
 8001e08:	e7cf      	b.n	8001daa <__swbuf_r+0x1a>
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <__swbuf_r+0xa0>)
 8001e0c:	429c      	cmp	r4, r3
 8001e0e:	bf08      	it	eq
 8001e10:	68ec      	ldreq	r4, [r5, #12]
 8001e12:	e7ca      	b.n	8001daa <__swbuf_r+0x1a>
 8001e14:	4621      	mov	r1, r4
 8001e16:	4628      	mov	r0, r5
 8001e18:	f000 f80c 	bl	8001e34 <__swsetup_r>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d0cb      	beq.n	8001db8 <__swbuf_r+0x28>
 8001e20:	f04f 37ff 	mov.w	r7, #4294967295
 8001e24:	e7ea      	b.n	8001dfc <__swbuf_r+0x6c>
 8001e26:	bf00      	nop
 8001e28:	08002688 	.word	0x08002688
 8001e2c:	080026a8 	.word	0x080026a8
 8001e30:	08002668 	.word	0x08002668

08001e34 <__swsetup_r>:
 8001e34:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <__swsetup_r+0xcc>)
 8001e36:	b570      	push	{r4, r5, r6, lr}
 8001e38:	681d      	ldr	r5, [r3, #0]
 8001e3a:	4606      	mov	r6, r0
 8001e3c:	460c      	mov	r4, r1
 8001e3e:	b125      	cbz	r5, 8001e4a <__swsetup_r+0x16>
 8001e40:	69ab      	ldr	r3, [r5, #24]
 8001e42:	b913      	cbnz	r3, 8001e4a <__swsetup_r+0x16>
 8001e44:	4628      	mov	r0, r5
 8001e46:	f000 f985 	bl	8002154 <__sinit>
 8001e4a:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <__swsetup_r+0xd0>)
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	d10f      	bne.n	8001e70 <__swsetup_r+0x3c>
 8001e50:	686c      	ldr	r4, [r5, #4]
 8001e52:	89a3      	ldrh	r3, [r4, #12]
 8001e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e58:	0719      	lsls	r1, r3, #28
 8001e5a:	d42c      	bmi.n	8001eb6 <__swsetup_r+0x82>
 8001e5c:	06dd      	lsls	r5, r3, #27
 8001e5e:	d411      	bmi.n	8001e84 <__swsetup_r+0x50>
 8001e60:	2309      	movs	r3, #9
 8001e62:	6033      	str	r3, [r6, #0]
 8001e64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e68:	81a3      	strh	r3, [r4, #12]
 8001e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6e:	e03e      	b.n	8001eee <__swsetup_r+0xba>
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <__swsetup_r+0xd4>)
 8001e72:	429c      	cmp	r4, r3
 8001e74:	d101      	bne.n	8001e7a <__swsetup_r+0x46>
 8001e76:	68ac      	ldr	r4, [r5, #8]
 8001e78:	e7eb      	b.n	8001e52 <__swsetup_r+0x1e>
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <__swsetup_r+0xd8>)
 8001e7c:	429c      	cmp	r4, r3
 8001e7e:	bf08      	it	eq
 8001e80:	68ec      	ldreq	r4, [r5, #12]
 8001e82:	e7e6      	b.n	8001e52 <__swsetup_r+0x1e>
 8001e84:	0758      	lsls	r0, r3, #29
 8001e86:	d512      	bpl.n	8001eae <__swsetup_r+0x7a>
 8001e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e8a:	b141      	cbz	r1, 8001e9e <__swsetup_r+0x6a>
 8001e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e90:	4299      	cmp	r1, r3
 8001e92:	d002      	beq.n	8001e9a <__swsetup_r+0x66>
 8001e94:	4630      	mov	r0, r6
 8001e96:	f7ff fbd3 	bl	8001640 <_free_r>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8001e9e:	89a3      	ldrh	r3, [r4, #12]
 8001ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ea4:	81a3      	strh	r3, [r4, #12]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	6063      	str	r3, [r4, #4]
 8001eaa:	6923      	ldr	r3, [r4, #16]
 8001eac:	6023      	str	r3, [r4, #0]
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	f043 0308 	orr.w	r3, r3, #8
 8001eb4:	81a3      	strh	r3, [r4, #12]
 8001eb6:	6923      	ldr	r3, [r4, #16]
 8001eb8:	b94b      	cbnz	r3, 8001ece <__swsetup_r+0x9a>
 8001eba:	89a3      	ldrh	r3, [r4, #12]
 8001ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec4:	d003      	beq.n	8001ece <__swsetup_r+0x9a>
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	4630      	mov	r0, r6
 8001eca:	f000 fa07 	bl	80022dc <__smakebuf_r>
 8001ece:	89a0      	ldrh	r0, [r4, #12]
 8001ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ed4:	f010 0301 	ands.w	r3, r0, #1
 8001ed8:	d00a      	beq.n	8001ef0 <__swsetup_r+0xbc>
 8001eda:	2300      	movs	r3, #0
 8001edc:	60a3      	str	r3, [r4, #8]
 8001ede:	6963      	ldr	r3, [r4, #20]
 8001ee0:	425b      	negs	r3, r3
 8001ee2:	61a3      	str	r3, [r4, #24]
 8001ee4:	6923      	ldr	r3, [r4, #16]
 8001ee6:	b943      	cbnz	r3, 8001efa <__swsetup_r+0xc6>
 8001ee8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001eec:	d1ba      	bne.n	8001e64 <__swsetup_r+0x30>
 8001eee:	bd70      	pop	{r4, r5, r6, pc}
 8001ef0:	0781      	lsls	r1, r0, #30
 8001ef2:	bf58      	it	pl
 8001ef4:	6963      	ldrpl	r3, [r4, #20]
 8001ef6:	60a3      	str	r3, [r4, #8]
 8001ef8:	e7f4      	b.n	8001ee4 <__swsetup_r+0xb0>
 8001efa:	2000      	movs	r0, #0
 8001efc:	e7f7      	b.n	8001eee <__swsetup_r+0xba>
 8001efe:	bf00      	nop
 8001f00:	24000010 	.word	0x24000010
 8001f04:	08002688 	.word	0x08002688
 8001f08:	080026a8 	.word	0x080026a8
 8001f0c:	08002668 	.word	0x08002668

08001f10 <abort>:
 8001f10:	b508      	push	{r3, lr}
 8001f12:	2006      	movs	r0, #6
 8001f14:	f000 fa56 	bl	80023c4 <raise>
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7fe fb01 	bl	8000520 <_exit>
	...

08001f20 <__sflush_r>:
 8001f20:	898a      	ldrh	r2, [r1, #12]
 8001f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f26:	4605      	mov	r5, r0
 8001f28:	0710      	lsls	r0, r2, #28
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	d458      	bmi.n	8001fe0 <__sflush_r+0xc0>
 8001f2e:	684b      	ldr	r3, [r1, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	dc05      	bgt.n	8001f40 <__sflush_r+0x20>
 8001f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	dc02      	bgt.n	8001f40 <__sflush_r+0x20>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f42:	2e00      	cmp	r6, #0
 8001f44:	d0f9      	beq.n	8001f3a <__sflush_r+0x1a>
 8001f46:	2300      	movs	r3, #0
 8001f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f4c:	682f      	ldr	r7, [r5, #0]
 8001f4e:	602b      	str	r3, [r5, #0]
 8001f50:	d032      	beq.n	8001fb8 <__sflush_r+0x98>
 8001f52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f54:	89a3      	ldrh	r3, [r4, #12]
 8001f56:	075a      	lsls	r2, r3, #29
 8001f58:	d505      	bpl.n	8001f66 <__sflush_r+0x46>
 8001f5a:	6863      	ldr	r3, [r4, #4]
 8001f5c:	1ac0      	subs	r0, r0, r3
 8001f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f60:	b10b      	cbz	r3, 8001f66 <__sflush_r+0x46>
 8001f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f64:	1ac0      	subs	r0, r0, r3
 8001f66:	2300      	movs	r3, #0
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f6c:	6a21      	ldr	r1, [r4, #32]
 8001f6e:	4628      	mov	r0, r5
 8001f70:	47b0      	blx	r6
 8001f72:	1c43      	adds	r3, r0, #1
 8001f74:	89a3      	ldrh	r3, [r4, #12]
 8001f76:	d106      	bne.n	8001f86 <__sflush_r+0x66>
 8001f78:	6829      	ldr	r1, [r5, #0]
 8001f7a:	291d      	cmp	r1, #29
 8001f7c:	d82c      	bhi.n	8001fd8 <__sflush_r+0xb8>
 8001f7e:	4a2a      	ldr	r2, [pc, #168]	; (8002028 <__sflush_r+0x108>)
 8001f80:	40ca      	lsrs	r2, r1
 8001f82:	07d6      	lsls	r6, r2, #31
 8001f84:	d528      	bpl.n	8001fd8 <__sflush_r+0xb8>
 8001f86:	2200      	movs	r2, #0
 8001f88:	6062      	str	r2, [r4, #4]
 8001f8a:	04d9      	lsls	r1, r3, #19
 8001f8c:	6922      	ldr	r2, [r4, #16]
 8001f8e:	6022      	str	r2, [r4, #0]
 8001f90:	d504      	bpl.n	8001f9c <__sflush_r+0x7c>
 8001f92:	1c42      	adds	r2, r0, #1
 8001f94:	d101      	bne.n	8001f9a <__sflush_r+0x7a>
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	b903      	cbnz	r3, 8001f9c <__sflush_r+0x7c>
 8001f9a:	6560      	str	r0, [r4, #84]	; 0x54
 8001f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f9e:	602f      	str	r7, [r5, #0]
 8001fa0:	2900      	cmp	r1, #0
 8001fa2:	d0ca      	beq.n	8001f3a <__sflush_r+0x1a>
 8001fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fa8:	4299      	cmp	r1, r3
 8001faa:	d002      	beq.n	8001fb2 <__sflush_r+0x92>
 8001fac:	4628      	mov	r0, r5
 8001fae:	f7ff fb47 	bl	8001640 <_free_r>
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	6360      	str	r0, [r4, #52]	; 0x34
 8001fb6:	e7c1      	b.n	8001f3c <__sflush_r+0x1c>
 8001fb8:	6a21      	ldr	r1, [r4, #32]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	47b0      	blx	r6
 8001fc0:	1c41      	adds	r1, r0, #1
 8001fc2:	d1c7      	bne.n	8001f54 <__sflush_r+0x34>
 8001fc4:	682b      	ldr	r3, [r5, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0c4      	beq.n	8001f54 <__sflush_r+0x34>
 8001fca:	2b1d      	cmp	r3, #29
 8001fcc:	d001      	beq.n	8001fd2 <__sflush_r+0xb2>
 8001fce:	2b16      	cmp	r3, #22
 8001fd0:	d101      	bne.n	8001fd6 <__sflush_r+0xb6>
 8001fd2:	602f      	str	r7, [r5, #0]
 8001fd4:	e7b1      	b.n	8001f3a <__sflush_r+0x1a>
 8001fd6:	89a3      	ldrh	r3, [r4, #12]
 8001fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fdc:	81a3      	strh	r3, [r4, #12]
 8001fde:	e7ad      	b.n	8001f3c <__sflush_r+0x1c>
 8001fe0:	690f      	ldr	r7, [r1, #16]
 8001fe2:	2f00      	cmp	r7, #0
 8001fe4:	d0a9      	beq.n	8001f3a <__sflush_r+0x1a>
 8001fe6:	0793      	lsls	r3, r2, #30
 8001fe8:	680e      	ldr	r6, [r1, #0]
 8001fea:	bf08      	it	eq
 8001fec:	694b      	ldreq	r3, [r1, #20]
 8001fee:	600f      	str	r7, [r1, #0]
 8001ff0:	bf18      	it	ne
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	eba6 0807 	sub.w	r8, r6, r7
 8001ff8:	608b      	str	r3, [r1, #8]
 8001ffa:	f1b8 0f00 	cmp.w	r8, #0
 8001ffe:	dd9c      	ble.n	8001f3a <__sflush_r+0x1a>
 8002000:	6a21      	ldr	r1, [r4, #32]
 8002002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002004:	4643      	mov	r3, r8
 8002006:	463a      	mov	r2, r7
 8002008:	4628      	mov	r0, r5
 800200a:	47b0      	blx	r6
 800200c:	2800      	cmp	r0, #0
 800200e:	dc06      	bgt.n	800201e <__sflush_r+0xfe>
 8002010:	89a3      	ldrh	r3, [r4, #12]
 8002012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002016:	81a3      	strh	r3, [r4, #12]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	e78e      	b.n	8001f3c <__sflush_r+0x1c>
 800201e:	4407      	add	r7, r0
 8002020:	eba8 0800 	sub.w	r8, r8, r0
 8002024:	e7e9      	b.n	8001ffa <__sflush_r+0xda>
 8002026:	bf00      	nop
 8002028:	20400001 	.word	0x20400001

0800202c <_fflush_r>:
 800202c:	b538      	push	{r3, r4, r5, lr}
 800202e:	690b      	ldr	r3, [r1, #16]
 8002030:	4605      	mov	r5, r0
 8002032:	460c      	mov	r4, r1
 8002034:	b913      	cbnz	r3, 800203c <_fflush_r+0x10>
 8002036:	2500      	movs	r5, #0
 8002038:	4628      	mov	r0, r5
 800203a:	bd38      	pop	{r3, r4, r5, pc}
 800203c:	b118      	cbz	r0, 8002046 <_fflush_r+0x1a>
 800203e:	6983      	ldr	r3, [r0, #24]
 8002040:	b90b      	cbnz	r3, 8002046 <_fflush_r+0x1a>
 8002042:	f000 f887 	bl	8002154 <__sinit>
 8002046:	4b14      	ldr	r3, [pc, #80]	; (8002098 <_fflush_r+0x6c>)
 8002048:	429c      	cmp	r4, r3
 800204a:	d11b      	bne.n	8002084 <_fflush_r+0x58>
 800204c:	686c      	ldr	r4, [r5, #4]
 800204e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ef      	beq.n	8002036 <_fflush_r+0xa>
 8002056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002058:	07d0      	lsls	r0, r2, #31
 800205a:	d404      	bmi.n	8002066 <_fflush_r+0x3a>
 800205c:	0599      	lsls	r1, r3, #22
 800205e:	d402      	bmi.n	8002066 <_fflush_r+0x3a>
 8002060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002062:	f000 f915 	bl	8002290 <__retarget_lock_acquire_recursive>
 8002066:	4628      	mov	r0, r5
 8002068:	4621      	mov	r1, r4
 800206a:	f7ff ff59 	bl	8001f20 <__sflush_r>
 800206e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002070:	07da      	lsls	r2, r3, #31
 8002072:	4605      	mov	r5, r0
 8002074:	d4e0      	bmi.n	8002038 <_fflush_r+0xc>
 8002076:	89a3      	ldrh	r3, [r4, #12]
 8002078:	059b      	lsls	r3, r3, #22
 800207a:	d4dd      	bmi.n	8002038 <_fflush_r+0xc>
 800207c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800207e:	f000 f908 	bl	8002292 <__retarget_lock_release_recursive>
 8002082:	e7d9      	b.n	8002038 <_fflush_r+0xc>
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <_fflush_r+0x70>)
 8002086:	429c      	cmp	r4, r3
 8002088:	d101      	bne.n	800208e <_fflush_r+0x62>
 800208a:	68ac      	ldr	r4, [r5, #8]
 800208c:	e7df      	b.n	800204e <_fflush_r+0x22>
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <_fflush_r+0x74>)
 8002090:	429c      	cmp	r4, r3
 8002092:	bf08      	it	eq
 8002094:	68ec      	ldreq	r4, [r5, #12]
 8002096:	e7da      	b.n	800204e <_fflush_r+0x22>
 8002098:	08002688 	.word	0x08002688
 800209c:	080026a8 	.word	0x080026a8
 80020a0:	08002668 	.word	0x08002668

080020a4 <std>:
 80020a4:	2300      	movs	r3, #0
 80020a6:	b510      	push	{r4, lr}
 80020a8:	4604      	mov	r4, r0
 80020aa:	e9c0 3300 	strd	r3, r3, [r0]
 80020ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020b2:	6083      	str	r3, [r0, #8]
 80020b4:	8181      	strh	r1, [r0, #12]
 80020b6:	6643      	str	r3, [r0, #100]	; 0x64
 80020b8:	81c2      	strh	r2, [r0, #14]
 80020ba:	6183      	str	r3, [r0, #24]
 80020bc:	4619      	mov	r1, r3
 80020be:	2208      	movs	r2, #8
 80020c0:	305c      	adds	r0, #92	; 0x5c
 80020c2:	f7ff fa3d 	bl	8001540 <memset>
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <std+0x38>)
 80020c8:	6263      	str	r3, [r4, #36]	; 0x24
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <std+0x3c>)
 80020cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <std+0x40>)
 80020d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <std+0x44>)
 80020d4:	6224      	str	r4, [r4, #32]
 80020d6:	6323      	str	r3, [r4, #48]	; 0x30
 80020d8:	bd10      	pop	{r4, pc}
 80020da:	bf00      	nop
 80020dc:	080023fd 	.word	0x080023fd
 80020e0:	0800241f 	.word	0x0800241f
 80020e4:	08002457 	.word	0x08002457
 80020e8:	0800247b 	.word	0x0800247b

080020ec <_cleanup_r>:
 80020ec:	4901      	ldr	r1, [pc, #4]	; (80020f4 <_cleanup_r+0x8>)
 80020ee:	f000 b8af 	b.w	8002250 <_fwalk_reent>
 80020f2:	bf00      	nop
 80020f4:	0800202d 	.word	0x0800202d

080020f8 <__sfmoreglue>:
 80020f8:	b570      	push	{r4, r5, r6, lr}
 80020fa:	1e4a      	subs	r2, r1, #1
 80020fc:	2568      	movs	r5, #104	; 0x68
 80020fe:	4355      	muls	r5, r2
 8002100:	460e      	mov	r6, r1
 8002102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002106:	f7ff faeb 	bl	80016e0 <_malloc_r>
 800210a:	4604      	mov	r4, r0
 800210c:	b140      	cbz	r0, 8002120 <__sfmoreglue+0x28>
 800210e:	2100      	movs	r1, #0
 8002110:	e9c0 1600 	strd	r1, r6, [r0]
 8002114:	300c      	adds	r0, #12
 8002116:	60a0      	str	r0, [r4, #8]
 8002118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800211c:	f7ff fa10 	bl	8001540 <memset>
 8002120:	4620      	mov	r0, r4
 8002122:	bd70      	pop	{r4, r5, r6, pc}

08002124 <__sfp_lock_acquire>:
 8002124:	4801      	ldr	r0, [pc, #4]	; (800212c <__sfp_lock_acquire+0x8>)
 8002126:	f000 b8b3 	b.w	8002290 <__retarget_lock_acquire_recursive>
 800212a:	bf00      	nop
 800212c:	240000a8 	.word	0x240000a8

08002130 <__sfp_lock_release>:
 8002130:	4801      	ldr	r0, [pc, #4]	; (8002138 <__sfp_lock_release+0x8>)
 8002132:	f000 b8ae 	b.w	8002292 <__retarget_lock_release_recursive>
 8002136:	bf00      	nop
 8002138:	240000a8 	.word	0x240000a8

0800213c <__sinit_lock_acquire>:
 800213c:	4801      	ldr	r0, [pc, #4]	; (8002144 <__sinit_lock_acquire+0x8>)
 800213e:	f000 b8a7 	b.w	8002290 <__retarget_lock_acquire_recursive>
 8002142:	bf00      	nop
 8002144:	240000a3 	.word	0x240000a3

08002148 <__sinit_lock_release>:
 8002148:	4801      	ldr	r0, [pc, #4]	; (8002150 <__sinit_lock_release+0x8>)
 800214a:	f000 b8a2 	b.w	8002292 <__retarget_lock_release_recursive>
 800214e:	bf00      	nop
 8002150:	240000a3 	.word	0x240000a3

08002154 <__sinit>:
 8002154:	b510      	push	{r4, lr}
 8002156:	4604      	mov	r4, r0
 8002158:	f7ff fff0 	bl	800213c <__sinit_lock_acquire>
 800215c:	69a3      	ldr	r3, [r4, #24]
 800215e:	b11b      	cbz	r3, 8002168 <__sinit+0x14>
 8002160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002164:	f7ff bff0 	b.w	8002148 <__sinit_lock_release>
 8002168:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800216c:	6523      	str	r3, [r4, #80]	; 0x50
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <__sinit+0x68>)
 8002170:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <__sinit+0x6c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	62a2      	str	r2, [r4, #40]	; 0x28
 8002176:	42a3      	cmp	r3, r4
 8002178:	bf04      	itt	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	61a3      	streq	r3, [r4, #24]
 800217e:	4620      	mov	r0, r4
 8002180:	f000 f820 	bl	80021c4 <__sfp>
 8002184:	6060      	str	r0, [r4, #4]
 8002186:	4620      	mov	r0, r4
 8002188:	f000 f81c 	bl	80021c4 <__sfp>
 800218c:	60a0      	str	r0, [r4, #8]
 800218e:	4620      	mov	r0, r4
 8002190:	f000 f818 	bl	80021c4 <__sfp>
 8002194:	2200      	movs	r2, #0
 8002196:	60e0      	str	r0, [r4, #12]
 8002198:	2104      	movs	r1, #4
 800219a:	6860      	ldr	r0, [r4, #4]
 800219c:	f7ff ff82 	bl	80020a4 <std>
 80021a0:	68a0      	ldr	r0, [r4, #8]
 80021a2:	2201      	movs	r2, #1
 80021a4:	2109      	movs	r1, #9
 80021a6:	f7ff ff7d 	bl	80020a4 <std>
 80021aa:	68e0      	ldr	r0, [r4, #12]
 80021ac:	2202      	movs	r2, #2
 80021ae:	2112      	movs	r1, #18
 80021b0:	f7ff ff78 	bl	80020a4 <std>
 80021b4:	2301      	movs	r3, #1
 80021b6:	61a3      	str	r3, [r4, #24]
 80021b8:	e7d2      	b.n	8002160 <__sinit+0xc>
 80021ba:	bf00      	nop
 80021bc:	0800257c 	.word	0x0800257c
 80021c0:	080020ed 	.word	0x080020ed

080021c4 <__sfp>:
 80021c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c6:	4607      	mov	r7, r0
 80021c8:	f7ff ffac 	bl	8002124 <__sfp_lock_acquire>
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <__sfp+0x84>)
 80021ce:	681e      	ldr	r6, [r3, #0]
 80021d0:	69b3      	ldr	r3, [r6, #24]
 80021d2:	b913      	cbnz	r3, 80021da <__sfp+0x16>
 80021d4:	4630      	mov	r0, r6
 80021d6:	f7ff ffbd 	bl	8002154 <__sinit>
 80021da:	3648      	adds	r6, #72	; 0x48
 80021dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	d503      	bpl.n	80021ec <__sfp+0x28>
 80021e4:	6833      	ldr	r3, [r6, #0]
 80021e6:	b30b      	cbz	r3, 800222c <__sfp+0x68>
 80021e8:	6836      	ldr	r6, [r6, #0]
 80021ea:	e7f7      	b.n	80021dc <__sfp+0x18>
 80021ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80021f0:	b9d5      	cbnz	r5, 8002228 <__sfp+0x64>
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <__sfp+0x88>)
 80021f4:	60e3      	str	r3, [r4, #12]
 80021f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021fa:	6665      	str	r5, [r4, #100]	; 0x64
 80021fc:	f000 f847 	bl	800228e <__retarget_lock_init_recursive>
 8002200:	f7ff ff96 	bl	8002130 <__sfp_lock_release>
 8002204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800220c:	6025      	str	r5, [r4, #0]
 800220e:	61a5      	str	r5, [r4, #24]
 8002210:	2208      	movs	r2, #8
 8002212:	4629      	mov	r1, r5
 8002214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002218:	f7ff f992 	bl	8001540 <memset>
 800221c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002224:	4620      	mov	r0, r4
 8002226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002228:	3468      	adds	r4, #104	; 0x68
 800222a:	e7d9      	b.n	80021e0 <__sfp+0x1c>
 800222c:	2104      	movs	r1, #4
 800222e:	4638      	mov	r0, r7
 8002230:	f7ff ff62 	bl	80020f8 <__sfmoreglue>
 8002234:	4604      	mov	r4, r0
 8002236:	6030      	str	r0, [r6, #0]
 8002238:	2800      	cmp	r0, #0
 800223a:	d1d5      	bne.n	80021e8 <__sfp+0x24>
 800223c:	f7ff ff78 	bl	8002130 <__sfp_lock_release>
 8002240:	230c      	movs	r3, #12
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	e7ee      	b.n	8002224 <__sfp+0x60>
 8002246:	bf00      	nop
 8002248:	0800257c 	.word	0x0800257c
 800224c:	ffff0001 	.word	0xffff0001

08002250 <_fwalk_reent>:
 8002250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002254:	4606      	mov	r6, r0
 8002256:	4688      	mov	r8, r1
 8002258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800225c:	2700      	movs	r7, #0
 800225e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002262:	f1b9 0901 	subs.w	r9, r9, #1
 8002266:	d505      	bpl.n	8002274 <_fwalk_reent+0x24>
 8002268:	6824      	ldr	r4, [r4, #0]
 800226a:	2c00      	cmp	r4, #0
 800226c:	d1f7      	bne.n	800225e <_fwalk_reent+0xe>
 800226e:	4638      	mov	r0, r7
 8002270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002274:	89ab      	ldrh	r3, [r5, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d907      	bls.n	800228a <_fwalk_reent+0x3a>
 800227a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800227e:	3301      	adds	r3, #1
 8002280:	d003      	beq.n	800228a <_fwalk_reent+0x3a>
 8002282:	4629      	mov	r1, r5
 8002284:	4630      	mov	r0, r6
 8002286:	47c0      	blx	r8
 8002288:	4307      	orrs	r7, r0
 800228a:	3568      	adds	r5, #104	; 0x68
 800228c:	e7e9      	b.n	8002262 <_fwalk_reent+0x12>

0800228e <__retarget_lock_init_recursive>:
 800228e:	4770      	bx	lr

08002290 <__retarget_lock_acquire_recursive>:
 8002290:	4770      	bx	lr

08002292 <__retarget_lock_release_recursive>:
 8002292:	4770      	bx	lr

08002294 <__swhatbuf_r>:
 8002294:	b570      	push	{r4, r5, r6, lr}
 8002296:	460e      	mov	r6, r1
 8002298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800229c:	2900      	cmp	r1, #0
 800229e:	b096      	sub	sp, #88	; 0x58
 80022a0:	4614      	mov	r4, r2
 80022a2:	461d      	mov	r5, r3
 80022a4:	da07      	bge.n	80022b6 <__swhatbuf_r+0x22>
 80022a6:	2300      	movs	r3, #0
 80022a8:	602b      	str	r3, [r5, #0]
 80022aa:	89b3      	ldrh	r3, [r6, #12]
 80022ac:	061a      	lsls	r2, r3, #24
 80022ae:	d410      	bmi.n	80022d2 <__swhatbuf_r+0x3e>
 80022b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b4:	e00e      	b.n	80022d4 <__swhatbuf_r+0x40>
 80022b6:	466a      	mov	r2, sp
 80022b8:	f000 f906 	bl	80024c8 <_fstat_r>
 80022bc:	2800      	cmp	r0, #0
 80022be:	dbf2      	blt.n	80022a6 <__swhatbuf_r+0x12>
 80022c0:	9a01      	ldr	r2, [sp, #4]
 80022c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80022c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80022ca:	425a      	negs	r2, r3
 80022cc:	415a      	adcs	r2, r3
 80022ce:	602a      	str	r2, [r5, #0]
 80022d0:	e7ee      	b.n	80022b0 <__swhatbuf_r+0x1c>
 80022d2:	2340      	movs	r3, #64	; 0x40
 80022d4:	2000      	movs	r0, #0
 80022d6:	6023      	str	r3, [r4, #0]
 80022d8:	b016      	add	sp, #88	; 0x58
 80022da:	bd70      	pop	{r4, r5, r6, pc}

080022dc <__smakebuf_r>:
 80022dc:	898b      	ldrh	r3, [r1, #12]
 80022de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022e0:	079d      	lsls	r5, r3, #30
 80022e2:	4606      	mov	r6, r0
 80022e4:	460c      	mov	r4, r1
 80022e6:	d507      	bpl.n	80022f8 <__smakebuf_r+0x1c>
 80022e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	6123      	str	r3, [r4, #16]
 80022f0:	2301      	movs	r3, #1
 80022f2:	6163      	str	r3, [r4, #20]
 80022f4:	b002      	add	sp, #8
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	ab01      	add	r3, sp, #4
 80022fa:	466a      	mov	r2, sp
 80022fc:	f7ff ffca 	bl	8002294 <__swhatbuf_r>
 8002300:	9900      	ldr	r1, [sp, #0]
 8002302:	4605      	mov	r5, r0
 8002304:	4630      	mov	r0, r6
 8002306:	f7ff f9eb 	bl	80016e0 <_malloc_r>
 800230a:	b948      	cbnz	r0, 8002320 <__smakebuf_r+0x44>
 800230c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002310:	059a      	lsls	r2, r3, #22
 8002312:	d4ef      	bmi.n	80022f4 <__smakebuf_r+0x18>
 8002314:	f023 0303 	bic.w	r3, r3, #3
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	81a3      	strh	r3, [r4, #12]
 800231e:	e7e3      	b.n	80022e8 <__smakebuf_r+0xc>
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <__smakebuf_r+0x7c>)
 8002322:	62b3      	str	r3, [r6, #40]	; 0x28
 8002324:	89a3      	ldrh	r3, [r4, #12]
 8002326:	6020      	str	r0, [r4, #0]
 8002328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232c:	81a3      	strh	r3, [r4, #12]
 800232e:	9b00      	ldr	r3, [sp, #0]
 8002330:	6163      	str	r3, [r4, #20]
 8002332:	9b01      	ldr	r3, [sp, #4]
 8002334:	6120      	str	r0, [r4, #16]
 8002336:	b15b      	cbz	r3, 8002350 <__smakebuf_r+0x74>
 8002338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800233c:	4630      	mov	r0, r6
 800233e:	f000 f8d5 	bl	80024ec <_isatty_r>
 8002342:	b128      	cbz	r0, 8002350 <__smakebuf_r+0x74>
 8002344:	89a3      	ldrh	r3, [r4, #12]
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	81a3      	strh	r3, [r4, #12]
 8002350:	89a0      	ldrh	r0, [r4, #12]
 8002352:	4305      	orrs	r5, r0
 8002354:	81a5      	strh	r5, [r4, #12]
 8002356:	e7cd      	b.n	80022f4 <__smakebuf_r+0x18>
 8002358:	080020ed 	.word	0x080020ed

0800235c <__malloc_lock>:
 800235c:	4801      	ldr	r0, [pc, #4]	; (8002364 <__malloc_lock+0x8>)
 800235e:	f7ff bf97 	b.w	8002290 <__retarget_lock_acquire_recursive>
 8002362:	bf00      	nop
 8002364:	240000a4 	.word	0x240000a4

08002368 <__malloc_unlock>:
 8002368:	4801      	ldr	r0, [pc, #4]	; (8002370 <__malloc_unlock+0x8>)
 800236a:	f7ff bf92 	b.w	8002292 <__retarget_lock_release_recursive>
 800236e:	bf00      	nop
 8002370:	240000a4 	.word	0x240000a4

08002374 <_raise_r>:
 8002374:	291f      	cmp	r1, #31
 8002376:	b538      	push	{r3, r4, r5, lr}
 8002378:	4604      	mov	r4, r0
 800237a:	460d      	mov	r5, r1
 800237c:	d904      	bls.n	8002388 <_raise_r+0x14>
 800237e:	2316      	movs	r3, #22
 8002380:	6003      	str	r3, [r0, #0]
 8002382:	f04f 30ff 	mov.w	r0, #4294967295
 8002386:	bd38      	pop	{r3, r4, r5, pc}
 8002388:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800238a:	b112      	cbz	r2, 8002392 <_raise_r+0x1e>
 800238c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002390:	b94b      	cbnz	r3, 80023a6 <_raise_r+0x32>
 8002392:	4620      	mov	r0, r4
 8002394:	f000 f830 	bl	80023f8 <_getpid_r>
 8002398:	462a      	mov	r2, r5
 800239a:	4601      	mov	r1, r0
 800239c:	4620      	mov	r0, r4
 800239e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023a2:	f000 b817 	b.w	80023d4 <_kill_r>
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d00a      	beq.n	80023c0 <_raise_r+0x4c>
 80023aa:	1c59      	adds	r1, r3, #1
 80023ac:	d103      	bne.n	80023b6 <_raise_r+0x42>
 80023ae:	2316      	movs	r3, #22
 80023b0:	6003      	str	r3, [r0, #0]
 80023b2:	2001      	movs	r0, #1
 80023b4:	e7e7      	b.n	8002386 <_raise_r+0x12>
 80023b6:	2400      	movs	r4, #0
 80023b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80023bc:	4628      	mov	r0, r5
 80023be:	4798      	blx	r3
 80023c0:	2000      	movs	r0, #0
 80023c2:	e7e0      	b.n	8002386 <_raise_r+0x12>

080023c4 <raise>:
 80023c4:	4b02      	ldr	r3, [pc, #8]	; (80023d0 <raise+0xc>)
 80023c6:	4601      	mov	r1, r0
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	f7ff bfd3 	b.w	8002374 <_raise_r>
 80023ce:	bf00      	nop
 80023d0:	24000010 	.word	0x24000010

080023d4 <_kill_r>:
 80023d4:	b538      	push	{r3, r4, r5, lr}
 80023d6:	4d07      	ldr	r5, [pc, #28]	; (80023f4 <_kill_r+0x20>)
 80023d8:	2300      	movs	r3, #0
 80023da:	4604      	mov	r4, r0
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	602b      	str	r3, [r5, #0]
 80023e2:	f7fe f893 	bl	800050c <_kill>
 80023e6:	1c43      	adds	r3, r0, #1
 80023e8:	d102      	bne.n	80023f0 <_kill_r+0x1c>
 80023ea:	682b      	ldr	r3, [r5, #0]
 80023ec:	b103      	cbz	r3, 80023f0 <_kill_r+0x1c>
 80023ee:	6023      	str	r3, [r4, #0]
 80023f0:	bd38      	pop	{r3, r4, r5, pc}
 80023f2:	bf00      	nop
 80023f4:	240000ac 	.word	0x240000ac

080023f8 <_getpid_r>:
 80023f8:	f7fe b886 	b.w	8000508 <_getpid>

080023fc <__sread>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	460c      	mov	r4, r1
 8002400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002404:	f000 f894 	bl	8002530 <_read_r>
 8002408:	2800      	cmp	r0, #0
 800240a:	bfab      	itete	ge
 800240c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800240e:	89a3      	ldrhlt	r3, [r4, #12]
 8002410:	181b      	addge	r3, r3, r0
 8002412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002416:	bfac      	ite	ge
 8002418:	6563      	strge	r3, [r4, #84]	; 0x54
 800241a:	81a3      	strhlt	r3, [r4, #12]
 800241c:	bd10      	pop	{r4, pc}

0800241e <__swrite>:
 800241e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002422:	461f      	mov	r7, r3
 8002424:	898b      	ldrh	r3, [r1, #12]
 8002426:	05db      	lsls	r3, r3, #23
 8002428:	4605      	mov	r5, r0
 800242a:	460c      	mov	r4, r1
 800242c:	4616      	mov	r6, r2
 800242e:	d505      	bpl.n	800243c <__swrite+0x1e>
 8002430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002434:	2302      	movs	r3, #2
 8002436:	2200      	movs	r2, #0
 8002438:	f000 f868 	bl	800250c <_lseek_r>
 800243c:	89a3      	ldrh	r3, [r4, #12]
 800243e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002446:	81a3      	strh	r3, [r4, #12]
 8002448:	4632      	mov	r2, r6
 800244a:	463b      	mov	r3, r7
 800244c:	4628      	mov	r0, r5
 800244e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002452:	f000 b817 	b.w	8002484 <_write_r>

08002456 <__sseek>:
 8002456:	b510      	push	{r4, lr}
 8002458:	460c      	mov	r4, r1
 800245a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800245e:	f000 f855 	bl	800250c <_lseek_r>
 8002462:	1c43      	adds	r3, r0, #1
 8002464:	89a3      	ldrh	r3, [r4, #12]
 8002466:	bf15      	itete	ne
 8002468:	6560      	strne	r0, [r4, #84]	; 0x54
 800246a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800246e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002472:	81a3      	strheq	r3, [r4, #12]
 8002474:	bf18      	it	ne
 8002476:	81a3      	strhne	r3, [r4, #12]
 8002478:	bd10      	pop	{r4, pc}

0800247a <__sclose>:
 800247a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800247e:	f000 b813 	b.w	80024a8 <_close_r>
	...

08002484 <_write_r>:
 8002484:	b538      	push	{r3, r4, r5, lr}
 8002486:	4d07      	ldr	r5, [pc, #28]	; (80024a4 <_write_r+0x20>)
 8002488:	4604      	mov	r4, r0
 800248a:	4608      	mov	r0, r1
 800248c:	4611      	mov	r1, r2
 800248e:	2200      	movs	r2, #0
 8002490:	602a      	str	r2, [r5, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	f7fe f858 	bl	8000548 <_write>
 8002498:	1c43      	adds	r3, r0, #1
 800249a:	d102      	bne.n	80024a2 <_write_r+0x1e>
 800249c:	682b      	ldr	r3, [r5, #0]
 800249e:	b103      	cbz	r3, 80024a2 <_write_r+0x1e>
 80024a0:	6023      	str	r3, [r4, #0]
 80024a2:	bd38      	pop	{r3, r4, r5, pc}
 80024a4:	240000ac 	.word	0x240000ac

080024a8 <_close_r>:
 80024a8:	b538      	push	{r3, r4, r5, lr}
 80024aa:	4d06      	ldr	r5, [pc, #24]	; (80024c4 <_close_r+0x1c>)
 80024ac:	2300      	movs	r3, #0
 80024ae:	4604      	mov	r4, r0
 80024b0:	4608      	mov	r0, r1
 80024b2:	602b      	str	r3, [r5, #0]
 80024b4:	f7fe f856 	bl	8000564 <_close>
 80024b8:	1c43      	adds	r3, r0, #1
 80024ba:	d102      	bne.n	80024c2 <_close_r+0x1a>
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	b103      	cbz	r3, 80024c2 <_close_r+0x1a>
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	bd38      	pop	{r3, r4, r5, pc}
 80024c4:	240000ac 	.word	0x240000ac

080024c8 <_fstat_r>:
 80024c8:	b538      	push	{r3, r4, r5, lr}
 80024ca:	4d07      	ldr	r5, [pc, #28]	; (80024e8 <_fstat_r+0x20>)
 80024cc:	2300      	movs	r3, #0
 80024ce:	4604      	mov	r4, r0
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	602b      	str	r3, [r5, #0]
 80024d6:	f7fe f849 	bl	800056c <_fstat>
 80024da:	1c43      	adds	r3, r0, #1
 80024dc:	d102      	bne.n	80024e4 <_fstat_r+0x1c>
 80024de:	682b      	ldr	r3, [r5, #0]
 80024e0:	b103      	cbz	r3, 80024e4 <_fstat_r+0x1c>
 80024e2:	6023      	str	r3, [r4, #0]
 80024e4:	bd38      	pop	{r3, r4, r5, pc}
 80024e6:	bf00      	nop
 80024e8:	240000ac 	.word	0x240000ac

080024ec <_isatty_r>:
 80024ec:	b538      	push	{r3, r4, r5, lr}
 80024ee:	4d06      	ldr	r5, [pc, #24]	; (8002508 <_isatty_r+0x1c>)
 80024f0:	2300      	movs	r3, #0
 80024f2:	4604      	mov	r4, r0
 80024f4:	4608      	mov	r0, r1
 80024f6:	602b      	str	r3, [r5, #0]
 80024f8:	f7fe f83e 	bl	8000578 <_isatty>
 80024fc:	1c43      	adds	r3, r0, #1
 80024fe:	d102      	bne.n	8002506 <_isatty_r+0x1a>
 8002500:	682b      	ldr	r3, [r5, #0]
 8002502:	b103      	cbz	r3, 8002506 <_isatty_r+0x1a>
 8002504:	6023      	str	r3, [r4, #0]
 8002506:	bd38      	pop	{r3, r4, r5, pc}
 8002508:	240000ac 	.word	0x240000ac

0800250c <_lseek_r>:
 800250c:	b538      	push	{r3, r4, r5, lr}
 800250e:	4d07      	ldr	r5, [pc, #28]	; (800252c <_lseek_r+0x20>)
 8002510:	4604      	mov	r4, r0
 8002512:	4608      	mov	r0, r1
 8002514:	4611      	mov	r1, r2
 8002516:	2200      	movs	r2, #0
 8002518:	602a      	str	r2, [r5, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	f7fe f82e 	bl	800057c <_lseek>
 8002520:	1c43      	adds	r3, r0, #1
 8002522:	d102      	bne.n	800252a <_lseek_r+0x1e>
 8002524:	682b      	ldr	r3, [r5, #0]
 8002526:	b103      	cbz	r3, 800252a <_lseek_r+0x1e>
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	bd38      	pop	{r3, r4, r5, pc}
 800252c:	240000ac 	.word	0x240000ac

08002530 <_read_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	4d07      	ldr	r5, [pc, #28]	; (8002550 <_read_r+0x20>)
 8002534:	4604      	mov	r4, r0
 8002536:	4608      	mov	r0, r1
 8002538:	4611      	mov	r1, r2
 800253a:	2200      	movs	r2, #0
 800253c:	602a      	str	r2, [r5, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	f7fd fff4 	bl	800052c <_read>
 8002544:	1c43      	adds	r3, r0, #1
 8002546:	d102      	bne.n	800254e <_read_r+0x1e>
 8002548:	682b      	ldr	r3, [r5, #0]
 800254a:	b103      	cbz	r3, 800254e <_read_r+0x1e>
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	bd38      	pop	{r3, r4, r5, pc}
 8002550:	240000ac 	.word	0x240000ac

08002554 <_init>:
 8002554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002556:	bf00      	nop
 8002558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800255a:	bc08      	pop	{r3}
 800255c:	469e      	mov	lr, r3
 800255e:	4770      	bx	lr

08002560 <_fini>:
 8002560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002562:	bf00      	nop
 8002564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002566:	bc08      	pop	{r3}
 8002568:	469e      	mov	lr, r3
 800256a:	4770      	bx	lr
