
Compiler Haupttests STM32H743ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001104  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800139c  0800139c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080013ac  080013ac  000113ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013b0  080013b0  000113b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080013b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  080013c4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  080013c4  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dcbf  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001cc9  00000000  00000000  0002dcfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00002348  00000000  00000000  0002f9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000540  00000000  00000000  00031d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000008e8  00000000  00000000  00032250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033dfe  00000000  00000000  00032b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00007f18  00000000  00000000  00066936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014bb4b  00000000  00000000  0006e84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001ba399  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000d04  00000000  00000000  001ba3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001384 	.word	0x08001384

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001384 	.word	0x08001384

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b5d0      	push	{r4, r6, r7, lr}
 80002da:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002dc:	224c      	movs	r2, #76	; 0x4c
 80002de:	2100      	movs	r1, #0
 80002e0:	a80b      	add	r0, sp, #44	; 0x2c
 80002e2:	f001 f847 	bl	8001374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	2220      	movs	r2, #32
 80002e8:	2100      	movs	r1, #0
 80002ea:	a802      	add	r0, sp, #8
 80002ec:	f001 f842 	bl	8001374 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80002f0:	2002      	movs	r0, #2
 80002f2:	f000 fb35 	bl	8000960 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80002f6:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <SystemClock_Config+0x9c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	9201      	str	r2, [sp, #4]
 80002fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80002fe:	4a1e      	ldr	r2, [pc, #120]	; (8000378 <SystemClock_Config+0xa0>)
 8000300:	f021 0101 	bic.w	r1, r1, #1

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000304:	4610      	mov	r0, r2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000306:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	6993      	ldr	r3, [r2, #24]
 8000312:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	6993      	ldr	r3, [r2, #24]
 800031e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000326:	6983      	ldr	r3, [r0, #24]
 8000328:	049b      	lsls	r3, r3, #18
 800032a:	d5fc      	bpl.n	8000326 <SystemClock_Config+0x4e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032c:	2102      	movs	r1, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800032e:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000330:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000332:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000336:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000338:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033a:	e9cd 420e 	strd	r4, r2, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f000 fb35 	bl	80009ac <HAL_RCC_OscConfig>
 8000342:	b108      	cbz	r0, 8000348 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000344:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000346:	e7fe      	b.n	8000346 <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	263f      	movs	r6, #63	; 0x3f
 800034e:	2700      	movs	r7, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000350:	4621      	mov	r1, r4
 8000352:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000358:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800035c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000360:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000364:	f000 feb8 	bl	80010d8 <HAL_RCC_ClockConfig>
 8000368:	b108      	cbz	r0, 800036e <SystemClock_Config+0x96>
 800036a:	b672      	cpsid	i
  while (1)
 800036c:	e7fe      	b.n	800036c <SystemClock_Config+0x94>
}
 800036e:	b01e      	add	sp, #120	; 0x78
 8000370:	bdd0      	pop	{r4, r6, r7, pc}
 8000372:	bf00      	nop
 8000374:	58000400 	.word	0x58000400
 8000378:	58024800 	.word	0x58024800

0800037c <main>:
{
 800037c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 8000380:	2640      	movs	r6, #64	; 0x40
  HAL_Init();
 8000382:	f000 f913 	bl	80005ac <HAL_Init>
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 8000386:	2701      	movs	r7, #1
  SystemClock_Config();
 8000388:	f7ff ffa6 	bl	80002d8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038e:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <main+0x6c>)
  HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 8000390:	2140      	movs	r1, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	9206      	str	r2, [sp, #24]
  HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 8000394:	4815      	ldr	r0, [pc, #84]	; (80003ec <main+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	e9cd 2202 	strd	r2, r2, [sp, #8]
 800039a:	e9cd 2204 	strd	r2, r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039e:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80003a2:	4604      	mov	r4, r0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a4:	f045 0504 	orr.w	r5, r5, #4
 80003a8:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
 80003ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 80003b8:	f000 fac4 	bl	8000944 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 80003bc:	2200      	movs	r2, #0
 80003be:	2300      	movs	r3, #0
  HAL_GPIO_Init(EXECUTE_PIN_GPIO_Port, &GPIO_InitStruct);
 80003c0:	a902      	add	r1, sp, #8
 80003c2:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 80003c4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80003c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(EXECUTE_PIN_GPIO_Port, &GPIO_InitStruct);
 80003cc:	f000 f99c 	bl	8000708 <HAL_GPIO_Init>
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80003d0:	2140      	movs	r1, #64	; 0x40
 80003d2:	4620      	mov	r0, r4
 80003d4:	f000 faba 	bl	800094c <HAL_GPIO_TogglePin>
 80003d8:	2364      	movs	r3, #100	; 0x64
	for(int i = 0; i < 100; i++)
 80003da:	3b01      	subs	r3, #1
 80003dc:	d1fd      	bne.n	80003da <main+0x5e>
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80003de:	2140      	movs	r1, #64	; 0x40
 80003e0:	4620      	mov	r0, r4
 80003e2:	f000 fab3 	bl	800094c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin);
 80003e6:	e7f3      	b.n	80003d0 <main+0x54>
 80003e8:	58024400 	.word	0x58024400
 80003ec:	58020800 	.word	0x58020800

080003f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <HAL_MspInit+0x20>)
{
 80003f2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80003f8:	f042 0202 	orr.w	r2, r2, #2
 80003fc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000404:	f003 0302 	and.w	r3, r3, #2
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040c:	b002      	add	sp, #8
 800040e:	4770      	bx	lr
 8000410:	58024400 	.word	0x58024400

08000414 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <NMI_Handler>
 8000416:	bf00      	nop

08000418 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000418:	e7fe      	b.n	8000418 <HardFault_Handler>
 800041a:	bf00      	nop

0800041c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <MemManage_Handler>
 800041e:	bf00      	nop

08000420 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <BusFault_Handler>
 8000422:	bf00      	nop

08000424 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000424:	e7fe      	b.n	8000424 <UsageFault_Handler>
 8000426:	bf00      	nop

08000428 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop

0800042c <DebugMon_Handler>:
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop

08000430 <PendSV_Handler>:
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop

08000434 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000434:	f000 b8ea 	b.w	800060c <HAL_IncTick>

08000438 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000438:	4929      	ldr	r1, [pc, #164]	; (80004e0 <SystemInit+0xa8>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800043a:	4a2a      	ldr	r2, [pc, #168]	; (80004e4 <SystemInit+0xac>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800043c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8000444:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800044a:	6813      	ldr	r3, [r2, #0]
 800044c:	f003 030f 	and.w	r3, r3, #15
 8000450:	2b06      	cmp	r3, #6
 8000452:	d805      	bhi.n	8000460 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000454:	6813      	ldr	r3, [r2, #0]
 8000456:	f023 030f 	bic.w	r3, r3, #15
 800045a:	f043 0307 	orr.w	r3, r3, #7
 800045e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000460:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <SystemInit+0xb0>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000462:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000464:	4a21      	ldr	r2, [pc, #132]	; (80004ec <SystemInit+0xb4>)
  RCC->CR |= RCC_CR_HSION;
 8000466:	6819      	ldr	r1, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000468:	481e      	ldr	r0, [pc, #120]	; (80004e4 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800046a:	f041 0101 	orr.w	r1, r1, #1
 800046e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000470:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000472:	6819      	ldr	r1, [r3, #0]
 8000474:	400a      	ands	r2, r1
 8000476:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000478:	6803      	ldr	r3, [r0, #0]
 800047a:	071b      	lsls	r3, r3, #28
 800047c:	d505      	bpl.n	800048a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800047e:	6803      	ldr	r3, [r0, #0]
 8000480:	f023 030f 	bic.w	r3, r3, #15
 8000484:	f043 0307 	orr.w	r3, r3, #7
 8000488:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <SystemInit+0xb0>)
 800048c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800048e:	4918      	ldr	r1, [pc, #96]	; (80004f0 <SystemInit+0xb8>)
  RCC->PLLCKSELR = 0x02020200;
 8000490:	4c18      	ldr	r4, [pc, #96]	; (80004f4 <SystemInit+0xbc>)
  RCC->PLLCFGR = 0x01FF0000;
 8000492:	4819      	ldr	r0, [pc, #100]	; (80004f8 <SystemInit+0xc0>)
  RCC->D1CFGR = 0x00000000;
 8000494:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000496:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000498:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800049a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800049c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800049e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80004a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80004a2:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80004a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80004a6:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80004a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004aa:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80004ac:	4c13      	ldr	r4, [pc, #76]	; (80004fc <SystemInit+0xc4>)
  RCC->CR &= 0xFFFBFFFFU;
 80004ae:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80004b2:	4913      	ldr	r1, [pc, #76]	; (8000500 <SystemInit+0xc8>)
  RCC->CR &= 0xFFFBFFFFU;
 80004b4:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80004b6:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80004b8:	6823      	ldr	r3, [r4, #0]
 80004ba:	4019      	ands	r1, r3
 80004bc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80004c0:	d202      	bcs.n	80004c8 <SystemInit+0x90>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <SystemInit+0xcc>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80004c8:	490f      	ldr	r1, [pc, #60]	; (8000508 <SystemInit+0xd0>)
 80004ca:	f243 00d2 	movw	r0, #12498	; 0x30d2

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <SystemInit+0xa8>)
 80004d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80004d4:	6008      	str	r0, [r1, #0]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80004d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004da:	609a      	str	r2, [r3, #8]
}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	e000ed00 	.word	0xe000ed00
 80004e4:	52002000 	.word	0x52002000
 80004e8:	58024400 	.word	0x58024400
 80004ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80004f0:	01010280 	.word	0x01010280
 80004f4:	02020200 	.word	0x02020200
 80004f8:	01ff0000 	.word	0x01ff0000
 80004fc:	5c001000 	.word	0x5c001000
 8000500:	ffff0000 	.word	0xffff0000
 8000504:	51008108 	.word	0x51008108
 8000508:	52004000 	.word	0x52004000

0800050c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800050c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000544 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000510:	f7ff ff92 	bl	8000438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480c      	ldr	r0, [pc, #48]	; (8000548 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000516:	490d      	ldr	r1, [pc, #52]	; (800054c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800052c:	4c0a      	ldr	r4, [pc, #40]	; (8000558 <LoopFillZerobss+0x22>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800053a:	f000 fef7 	bl	800132c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800053e:	f7ff ff1d 	bl	800037c <main>
  bx  lr
 8000542:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000544:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000548:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800054c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000550:	080013b4 	.word	0x080013b4
  ldr r2, =_sbss
 8000554:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000558:	24000030 	.word	0x24000030

0800055c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC3_IRQHandler>
	...

08000560 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_InitTick+0x40>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b90b      	cbnz	r3, 800056a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8000566:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000568:	4770      	bx	lr
{
 800056a:	b510      	push	{r4, lr}
 800056c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800056e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000572:	4a0c      	ldr	r2, [pc, #48]	; (80005a4 <HAL_InitTick+0x44>)
 8000574:	fbb0 f3f3 	udiv	r3, r0, r3
 8000578:	6810      	ldr	r0, [r2, #0]
 800057a:	fbb0 f0f3 	udiv	r0, r0, r3
 800057e:	f000 f8ab 	bl	80006d8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	2c0f      	cmp	r4, #15
 8000584:	d800      	bhi.n	8000588 <HAL_InitTick+0x28>
 8000586:	b108      	cbz	r0, 800058c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000588:	2001      	movs	r0, #1
}
 800058a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	4621      	mov	r1, r4
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f866 	bl	8000664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_InitTick+0x48>)
 800059a:	2000      	movs	r0, #0
 800059c:	601c      	str	r4, [r3, #0]
}
 800059e:	bd10      	pop	{r4, pc}
 80005a0:	24000008 	.word	0x24000008
 80005a4:	24000000 	.word	0x24000000
 80005a8:	2400000c 	.word	0x2400000c

080005ac <HAL_Init>:
{
 80005ac:	b538      	push	{r3, r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ae:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005b0:	4c12      	ldr	r4, [pc, #72]	; (80005fc <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b2:	f000 f843 	bl	800063c <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80005b6:	4d12      	ldr	r5, [pc, #72]	; (8000600 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005b8:	f000 fcee 	bl	8000f98 <HAL_RCC_GetSysClockFreq>
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <HAL_Init+0x58>)
 80005be:	4602      	mov	r2, r0
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c0:	200f      	movs	r0, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005c2:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80005c4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005c6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80005ca:	4003      	ands	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005cc:	5c61      	ldrb	r1, [r4, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80005ce:	5ce3      	ldrb	r3, [r4, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005d0:	f001 011f 	and.w	r1, r1, #31
  SystemCoreClock = common_system_clock;
 80005d4:	4c0c      	ldr	r4, [pc, #48]	; (8000608 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80005d6:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005da:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80005dc:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80005e0:	6022      	str	r2, [r4, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80005e2:	602b      	str	r3, [r5, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005e4:	f7ff ffbc 	bl	8000560 <HAL_InitTick>
 80005e8:	b110      	cbz	r0, 80005f0 <HAL_Init+0x44>
    return HAL_ERROR;
 80005ea:	2401      	movs	r4, #1
}
 80005ec:	4620      	mov	r0, r4
 80005ee:	bd38      	pop	{r3, r4, r5, pc}
 80005f0:	4604      	mov	r4, r0
  HAL_MspInit();
 80005f2:	f7ff fefd 	bl	80003f0 <HAL_MspInit>
}
 80005f6:	4620      	mov	r0, r4
 80005f8:	bd38      	pop	{r3, r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	0800139c 	.word	0x0800139c
 8000600:	24000004 	.word	0x24000004
 8000604:	58024400 	.word	0x58024400
 8000608:	24000000 	.word	0x24000000

0800060c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <HAL_IncTick+0x10>)
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <HAL_IncTick+0x14>)
 8000610:	6811      	ldr	r1, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	440b      	add	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	2400002c 	.word	0x2400002c
 8000620:	24000008 	.word	0x24000008

08000624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000624:	4b01      	ldr	r3, [pc, #4]	; (800062c <HAL_GetTick+0x8>)
 8000626:	6818      	ldr	r0, [r3, #0]
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	2400002c 	.word	0x2400002c

08000630 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <HAL_GetREVID+0x8>)
 8000632:	6818      	ldr	r0, [r3, #0]
}
 8000634:	0c00      	lsrs	r0, r0, #16
 8000636:	4770      	bx	lr
 8000638:	5c001000 	.word	0x5c001000

0800063c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4907      	ldr	r1, [pc, #28]	; (800065c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800063e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000642:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800064e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000650:	f85d 4b04 	ldr.w	r4, [sp], #4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000656:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000658:	60cb      	str	r3, [r1, #12]
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00
 8000660:	05fa0000 	.word	0x05fa0000

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <HAL_NVIC_SetPriority+0x68>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800066c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	2d04      	cmp	r5, #4
 8000676:	bf28      	it	cs
 8000678:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	2c06      	cmp	r4, #6
 800067c:	d919      	bls.n	80006b2 <HAL_NVIC_SetPriority+0x4e>
 800067e:	3b03      	subs	r3, #3
 8000680:	f04f 34ff 	mov.w	r4, #4294967295
 8000684:	409c      	lsls	r4, r3
 8000686:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068a:	f04f 34ff 	mov.w	r4, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800068e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000690:	fa04 f405 	lsl.w	r4, r4, r5
 8000694:	ea21 0104 	bic.w	r1, r1, r4
 8000698:	fa01 f103 	lsl.w	r1, r1, r3
 800069c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80006a0:	db0a      	blt.n	80006b8 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	0109      	lsls	r1, r1, #4
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <HAL_NVIC_SetPriority+0x6c>)
 80006a6:	b2c9      	uxtb	r1, r1
 80006a8:	4403      	add	r3, r0
 80006aa:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006ae:	bc30      	pop	{r4, r5}
 80006b0:	4770      	bx	lr
 80006b2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b4:	4613      	mov	r3, r2
 80006b6:	e7e8      	b.n	800068a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	f000 000f 	and.w	r0, r0, #15
 80006bc:	0109      	lsls	r1, r1, #4
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_NVIC_SetPriority+0x70>)
 80006c0:	b2c9      	uxtb	r1, r1
 80006c2:	4403      	add	r3, r0
 80006c4:	7619      	strb	r1, [r3, #24]
 80006c6:	bc30      	pop	{r4, r5}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	e000e100 	.word	0xe000e100
 80006d4:	e000ecfc 	.word	0xe000ecfc

080006d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d8:	3801      	subs	r0, #1
 80006da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006de:	d20d      	bcs.n	80006fc <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e4:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006e6:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	25f0      	movs	r5, #240	; 0xf0
 80006ea:	4c06      	ldr	r4, [pc, #24]	; (8000704 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ec:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ee:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80006f8:	bc30      	pop	{r4, r5}
 80006fa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006fc:	2001      	movs	r0, #1
 80006fe:	4770      	bx	lr
 8000700:	e000e010 	.word	0xe000e010
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800070c:	680e      	ldr	r6, [r1, #0]
{
 800070e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000710:	2e00      	cmp	r6, #0
 8000712:	f000 80d3 	beq.w	80008bc <HAL_GPIO_Init+0x1b4>
  uint32_t position = 0x00U;
 8000716:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000718:	f8df a220 	ldr.w	sl, [pc, #544]	; 800093c <HAL_GPIO_Init+0x234>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800071c:	f8df b220 	ldr.w	fp, [pc, #544]	; 8000940 <HAL_GPIO_Init+0x238>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000720:	46b1      	mov	r9, r6
 8000722:	e020      	b.n	8000766 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8000724:	08da      	lsrs	r2, r3, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000726:	f003 0c07 	and.w	ip, r3, #7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800072a:	f004 0403 	and.w	r4, r4, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800072e:	f04f 0e0f 	mov.w	lr, #15
 8000732:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000736:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000738:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800073c:	fa04 f707 	lsl.w	r7, r4, r7
        temp = GPIOx->AFR[position >> 3U];
 8000740:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000742:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000746:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800074a:	ea24 0c0e 	bic.w	ip, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800074e:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000752:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8000754:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000756:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000758:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 800075a:	6005      	str	r5, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 800075c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800075e:	fa39 f203 	lsrs.w	r2, r9, r3
 8000762:	f000 80ab 	beq.w	80008bc <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000766:	2201      	movs	r2, #1
 8000768:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 800076a:	ea12 0809 	ands.w	r8, r2, r9
 800076e:	d0f5      	beq.n	800075c <HAL_GPIO_Init+0x54>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000770:	684c      	ldr	r4, [r1, #4]
 8000772:	005f      	lsls	r7, r3, #1
 8000774:	f024 0c10 	bic.w	ip, r4, #16
 8000778:	f10c 35ff 	add.w	r5, ip, #4294967295
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800077c:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800077e:	f04f 0503 	mov.w	r5, #3
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000782:	f200 809e 	bhi.w	80008c2 <HAL_GPIO_Init+0x1ba>
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000786:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OSPEEDR;
 800078a:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800078e:	40bd      	lsls	r5, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000790:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000792:	ea2e 0e05 	bic.w	lr, lr, r5
 8000796:	43ed      	mvns	r5, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000798:	9601      	str	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800079a:	68ce      	ldr	r6, [r1, #12]
 800079c:	40be      	lsls	r6, r7
 800079e:	ea46 0e0e 	orr.w	lr, r6, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007a2:	9e01      	ldr	r6, [sp, #4]
        GPIOx->OSPEEDR = temp;
 80007a4:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007a8:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007ac:	ea2e 0202 	bic.w	r2, lr, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007b0:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 80007b2:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80007b4:	68c6      	ldr	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b6:	f1bc 0f02 	cmp.w	ip, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007ba:	688a      	ldr	r2, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80007bc:	ea06 0605 	and.w	r6, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007c0:	fa02 f207 	lsl.w	r2, r2, r7
 80007c4:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->PUPDR = temp;
 80007c8:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ca:	d0ab      	beq.n	8000724 <HAL_GPIO_Init+0x1c>
      temp = GPIOx->MODER;
 80007cc:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ce:	f004 0203 	and.w	r2, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80007d2:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007d4:	fa02 f707 	lsl.w	r7, r2, r7
 80007d8:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80007da:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007dc:	00e6      	lsls	r6, r4, #3
 80007de:	d5bd      	bpl.n	800075c <HAL_GPIO_Init+0x54>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e0:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
 80007e4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80007e8:	f003 0203 	and.w	r2, r3, #3
 80007ec:	250f      	movs	r5, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	f046 0602 	orr.w	r6, r6, #2
 80007f2:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80007f6:	0092      	lsls	r2, r2, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f8:	f8ca 60f4 	str.w	r6, [sl, #244]	; 0xf4
 80007fc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000800:	f8da 60f4 	ldr.w	r6, [sl, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000804:	fa05 fc02 	lsl.w	ip, r5, r2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000808:	f006 0602 	and.w	r6, r6, #2
 800080c:	9603      	str	r6, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800080e:	4e42      	ldr	r6, [pc, #264]	; (8000918 <HAL_GPIO_Init+0x210>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000810:	9d03      	ldr	r5, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000812:	42b0      	cmp	r0, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 8000814:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000816:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800081a:	d020      	beq.n	800085e <HAL_GPIO_Init+0x156>
 800081c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000820:	42b0      	cmp	r0, r6
 8000822:	d056      	beq.n	80008d2 <HAL_GPIO_Init+0x1ca>
 8000824:	4e3d      	ldr	r6, [pc, #244]	; (800091c <HAL_GPIO_Init+0x214>)
 8000826:	42b0      	cmp	r0, r6
 8000828:	d058      	beq.n	80008dc <HAL_GPIO_Init+0x1d4>
 800082a:	4e3d      	ldr	r6, [pc, #244]	; (8000920 <HAL_GPIO_Init+0x218>)
 800082c:	42b0      	cmp	r0, r6
 800082e:	d04b      	beq.n	80008c8 <HAL_GPIO_Init+0x1c0>
 8000830:	4e3c      	ldr	r6, [pc, #240]	; (8000924 <HAL_GPIO_Init+0x21c>)
 8000832:	42b0      	cmp	r0, r6
 8000834:	d05c      	beq.n	80008f0 <HAL_GPIO_Init+0x1e8>
 8000836:	4e3c      	ldr	r6, [pc, #240]	; (8000928 <HAL_GPIO_Init+0x220>)
 8000838:	42b0      	cmp	r0, r6
 800083a:	d05e      	beq.n	80008fa <HAL_GPIO_Init+0x1f2>
 800083c:	4e3b      	ldr	r6, [pc, #236]	; (800092c <HAL_GPIO_Init+0x224>)
 800083e:	42b0      	cmp	r0, r6
 8000840:	d051      	beq.n	80008e6 <HAL_GPIO_Init+0x1de>
 8000842:	4e3b      	ldr	r6, [pc, #236]	; (8000930 <HAL_GPIO_Init+0x228>)
 8000844:	42b0      	cmp	r0, r6
 8000846:	d05d      	beq.n	8000904 <HAL_GPIO_Init+0x1fc>
 8000848:	4e3a      	ldr	r6, [pc, #232]	; (8000934 <HAL_GPIO_Init+0x22c>)
 800084a:	42b0      	cmp	r0, r6
 800084c:	d05f      	beq.n	800090e <HAL_GPIO_Init+0x206>
 800084e:	4e3a      	ldr	r6, [pc, #232]	; (8000938 <HAL_GPIO_Init+0x230>)
 8000850:	42b0      	cmp	r0, r6
 8000852:	bf0c      	ite	eq
 8000854:	2609      	moveq	r6, #9
 8000856:	260a      	movne	r6, #10
 8000858:	fa06 f202 	lsl.w	r2, r6, r2
 800085c:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 800085e:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8000860:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8000864:	f8db 2000 	ldr.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000868:	03e5      	lsls	r5, r4, #15
    position++;
 800086a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~(iocurrent);
 800086e:	bf54      	ite	pl
 8000870:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8000872:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8000876:	f8cb 2000 	str.w	r2, [fp]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800087a:	03a2      	lsls	r2, r4, #14
        temp = EXTI_CurrentCPU->EMR1;
 800087c:	f8db 5004 	ldr.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8000880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8000884:	bf54      	ite	pl
 8000886:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000888:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800088c:	02e7      	lsls	r7, r4, #11
        EXTI_CurrentCPU->EMR1 = temp;
 800088e:	f8cb 5004 	str.w	r5, [fp, #4]
        temp = EXTI->RTSR1;
 8000892:	6815      	ldr	r5, [r2, #0]
        EXTI->RTSR1 = temp;
 8000894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8000898:	bf54      	ite	pl
 800089a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800089c:	ea48 0505 	orrmi.w	r5, r8, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008a0:	02a4      	lsls	r4, r4, #10
        EXTI->FTSR1 = temp;
 80008a2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        EXTI->RTSR1 = temp;
 80008a6:	6015      	str	r5, [r2, #0]
        temp = EXTI->FTSR1;
 80008a8:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
 80008aa:	bf54      	ite	pl
 80008ac:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80008ae:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 80008b2:	6062      	str	r2, [r4, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80008b4:	fa39 f203 	lsrs.w	r2, r9, r3
 80008b8:	f47f af55 	bne.w	8000766 <HAL_GPIO_Init+0x5e>
  }
}
 80008bc:	b005      	add	sp, #20
 80008be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008c2:	40bd      	lsls	r5, r7
 80008c4:	43ed      	mvns	r5, r5
 80008c6:	e775      	b.n	80007b4 <HAL_GPIO_Init+0xac>
 80008c8:	2603      	movs	r6, #3
 80008ca:	fa06 f202 	lsl.w	r2, r6, r2
 80008ce:	4315      	orrs	r5, r2
 80008d0:	e7c5      	b.n	800085e <HAL_GPIO_Init+0x156>
 80008d2:	2601      	movs	r6, #1
 80008d4:	fa06 f202 	lsl.w	r2, r6, r2
 80008d8:	4315      	orrs	r5, r2
 80008da:	e7c0      	b.n	800085e <HAL_GPIO_Init+0x156>
 80008dc:	2602      	movs	r6, #2
 80008de:	fa06 f202 	lsl.w	r2, r6, r2
 80008e2:	4315      	orrs	r5, r2
 80008e4:	e7bb      	b.n	800085e <HAL_GPIO_Init+0x156>
 80008e6:	2606      	movs	r6, #6
 80008e8:	fa06 f202 	lsl.w	r2, r6, r2
 80008ec:	4315      	orrs	r5, r2
 80008ee:	e7b6      	b.n	800085e <HAL_GPIO_Init+0x156>
 80008f0:	2604      	movs	r6, #4
 80008f2:	fa06 f202 	lsl.w	r2, r6, r2
 80008f6:	4315      	orrs	r5, r2
 80008f8:	e7b1      	b.n	800085e <HAL_GPIO_Init+0x156>
 80008fa:	2605      	movs	r6, #5
 80008fc:	fa06 f202 	lsl.w	r2, r6, r2
 8000900:	4315      	orrs	r5, r2
 8000902:	e7ac      	b.n	800085e <HAL_GPIO_Init+0x156>
 8000904:	2607      	movs	r6, #7
 8000906:	fa06 f202 	lsl.w	r2, r6, r2
 800090a:	4315      	orrs	r5, r2
 800090c:	e7a7      	b.n	800085e <HAL_GPIO_Init+0x156>
 800090e:	2608      	movs	r6, #8
 8000910:	fa06 f202 	lsl.w	r2, r6, r2
 8000914:	4315      	orrs	r5, r2
 8000916:	e7a2      	b.n	800085e <HAL_GPIO_Init+0x156>
 8000918:	58020000 	.word	0x58020000
 800091c:	58020800 	.word	0x58020800
 8000920:	58020c00 	.word	0x58020c00
 8000924:	58021000 	.word	0x58021000
 8000928:	58021400 	.word	0x58021400
 800092c:	58021800 	.word	0x58021800
 8000930:	58021c00 	.word	0x58021c00
 8000934:	58022000 	.word	0x58022000
 8000938:	58022400 	.word	0x58022400
 800093c:	58024400 	.word	0x58024400
 8000940:	58000080 	.word	0x58000080

08000944 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000944:	b902      	cbnz	r2, 8000948 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000946:	0409      	lsls	r1, r1, #16
 8000948:	6181      	str	r1, [r0, #24]
  }
}
 800094a:	4770      	bx	lr

0800094c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800094c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800094e:	ea01 0203 	and.w	r2, r1, r3
 8000952:	ea21 0103 	bic.w	r1, r1, r3
 8000956:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800095a:	6181      	str	r1, [r0, #24]
}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000960:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_PWREx_ConfigSupply+0x48>)
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	0752      	lsls	r2, r2, #29
 8000968:	d406      	bmi.n	8000978 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000970:	1a18      	subs	r0, r3, r0
 8000972:	bf18      	it	ne
 8000974:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8000976:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000978:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800097a:	461d      	mov	r5, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800097c:	f022 0207 	bic.w	r2, r2, #7
 8000980:	4310      	orrs	r0, r2
 8000982:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8000984:	f7ff fe4e 	bl	8000624 <HAL_GetTick>
 8000988:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800098a:	e005      	b.n	8000998 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800098c:	f7ff fe4a 	bl	8000624 <HAL_GetTick>
 8000990:	1b00      	subs	r0, r0, r4
 8000992:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000996:	d804      	bhi.n	80009a2 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000998:	686b      	ldr	r3, [r5, #4]
 800099a:	049b      	lsls	r3, r3, #18
 800099c:	d5f6      	bpl.n	800098c <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 800099e:	2000      	movs	r0, #0
}
 80009a0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80009a2:	2001      	movs	r0, #1
}
 80009a4:	bd38      	pop	{r3, r4, r5, pc}
 80009a6:	bf00      	nop
 80009a8:	58024800 	.word	0x58024800

080009ac <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009ac:	2800      	cmp	r0, #0
 80009ae:	f000 81f7 	beq.w	8000da0 <HAL_RCC_OscConfig+0x3f4>
{
 80009b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009b4:	6803      	ldr	r3, [r0, #0]
 80009b6:	4604      	mov	r4, r0
 80009b8:	07d9      	lsls	r1, r3, #31
 80009ba:	d52e      	bpl.n	8000a1a <HAL_RCC_OscConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009bc:	49b4      	ldr	r1, [pc, #720]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 80009be:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80009c0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009c2:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80009c6:	2a10      	cmp	r2, #16
 80009c8:	f000 812c 	beq.w	8000c24 <HAL_RCC_OscConfig+0x278>
 80009cc:	2a18      	cmp	r2, #24
 80009ce:	f000 8124 	beq.w	8000c1a <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009d2:	6863      	ldr	r3, [r4, #4]
 80009d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009d8:	f000 8167 	beq.w	8000caa <HAL_RCC_OscConfig+0x2fe>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f000 817f 	beq.w	8000ce0 <HAL_RCC_OscConfig+0x334>
 80009e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009e6:	4baa      	ldr	r3, [pc, #680]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	f000 8278 	beq.w	8000ede <HAL_RCC_OscConfig+0x532>
 80009ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009fc:	f7ff fe12 	bl	8000624 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a00:	4ea3      	ldr	r6, [pc, #652]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
        tickstart = HAL_GetTick();
 8000a02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a04:	e005      	b.n	8000a12 <HAL_RCC_OscConfig+0x66>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a06:	f7ff fe0d 	bl	8000624 <HAL_GetTick>
 8000a0a:	1b40      	subs	r0, r0, r5
 8000a0c:	2864      	cmp	r0, #100	; 0x64
 8000a0e:	f200 8165 	bhi.w	8000cdc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a12:	6833      	ldr	r3, [r6, #0]
 8000a14:	039f      	lsls	r7, r3, #14
 8000a16:	d5f6      	bpl.n	8000a06 <HAL_RCC_OscConfig+0x5a>
 8000a18:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a1a:	0799      	lsls	r1, r3, #30
 8000a1c:	d521      	bpl.n	8000a62 <HAL_RCC_OscConfig+0xb6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a1e:	4a9c      	ldr	r2, [pc, #624]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000a20:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000a22:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000a24:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8000a28:	f040 80a8 	bne.w	8000b7c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a2c:	4b98      	ldr	r3, [pc, #608]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	d503      	bpl.n	8000a3c <HAL_RCC_OscConfig+0x90>
 8000a34:	68e3      	ldr	r3, [r4, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 80ed 	beq.w	8000c16 <HAL_RCC_OscConfig+0x26a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a3c:	f7ff fdf8 	bl	8000630 <HAL_GetREVID>
 8000a40:	f241 0303 	movw	r3, #4099	; 0x1003
 8000a44:	4298      	cmp	r0, r3
 8000a46:	f200 8189 	bhi.w	8000d5c <HAL_RCC_OscConfig+0x3b0>
 8000a4a:	6922      	ldr	r2, [r4, #16]
 8000a4c:	2a40      	cmp	r2, #64	; 0x40
 8000a4e:	f000 824e 	beq.w	8000eee <HAL_RCC_OscConfig+0x542>
 8000a52:	498f      	ldr	r1, [pc, #572]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000a54:	684b      	ldr	r3, [r1, #4]
 8000a56:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000a5a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8000a5e:	604b      	str	r3, [r1, #4]
 8000a60:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000a62:	06d9      	lsls	r1, r3, #27
 8000a64:	d456      	bmi.n	8000b14 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a66:	071d      	lsls	r5, r3, #28
 8000a68:	d517      	bpl.n	8000a9a <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a6a:	6963      	ldr	r3, [r4, #20]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f000 80b4 	beq.w	8000bda <HAL_RCC_OscConfig+0x22e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a72:	4b87      	ldr	r3, [pc, #540]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000a74:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000a76:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 8000a78:	f042 0201 	orr.w	r2, r2, #1
 8000a7c:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000a7e:	f7ff fdd1 	bl	8000624 <HAL_GetTick>
 8000a82:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000a84:	e005      	b.n	8000a92 <HAL_RCC_OscConfig+0xe6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a86:	f7ff fdcd 	bl	8000624 <HAL_GetTick>
 8000a8a:	1b40      	subs	r0, r0, r5
 8000a8c:	2802      	cmp	r0, #2
 8000a8e:	f200 8125 	bhi.w	8000cdc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000a92:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000a94:	0798      	lsls	r0, r3, #30
 8000a96:	d5f6      	bpl.n	8000a86 <HAL_RCC_OscConfig+0xda>
 8000a98:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a9a:	069a      	lsls	r2, r3, #26
 8000a9c:	d517      	bpl.n	8000ace <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000a9e:	69a3      	ldr	r3, [r4, #24]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 8134 	beq.w	8000d0e <HAL_RCC_OscConfig+0x362>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000aa6:	4b7a      	ldr	r3, [pc, #488]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000aa8:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000aaa:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_ENABLE();
 8000aac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ab0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ab2:	f7ff fdb7 	bl	8000624 <HAL_GetTick>
 8000ab6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000ab8:	e005      	b.n	8000ac6 <HAL_RCC_OscConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000aba:	f7ff fdb3 	bl	8000624 <HAL_GetTick>
 8000abe:	1b40      	subs	r0, r0, r5
 8000ac0:	2802      	cmp	r0, #2
 8000ac2:	f200 810b 	bhi.w	8000cdc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000ac6:	6833      	ldr	r3, [r6, #0]
 8000ac8:	049f      	lsls	r7, r3, #18
 8000aca:	d5f6      	bpl.n	8000aba <HAL_RCC_OscConfig+0x10e>
 8000acc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ace:	0759      	lsls	r1, r3, #29
 8000ad0:	f100 80b2 	bmi.w	8000c38 <HAL_RCC_OscConfig+0x28c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ad4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000ad6:	b1d8      	cbz	r0, 8000b10 <HAL_RCC_OscConfig+0x164>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000ad8:	4b6d      	ldr	r3, [pc, #436]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000ada:	691a      	ldr	r2, [r3, #16]
 8000adc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000ae0:	2a18      	cmp	r2, #24
 8000ae2:	f000 81ce 	beq.w	8000e82 <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ae6:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ae8:	2802      	cmp	r0, #2

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000aea:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8000aec:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000af0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000af2:	f000 8161 	beq.w	8000db8 <HAL_RCC_OscConfig+0x40c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000af6:	f7ff fd95 	bl	8000624 <HAL_GetTick>
 8000afa:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000afc:	e005      	b.n	8000b0a <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000afe:	f7ff fd91 	bl	8000624 <HAL_GetTick>
 8000b02:	1b00      	subs	r0, r0, r4
 8000b04:	2802      	cmp	r0, #2
 8000b06:	f200 80e9 	bhi.w	8000cdc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000b0a:	682b      	ldr	r3, [r5, #0]
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	d4f6      	bmi.n	8000afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000b10:	2000      	movs	r0, #0
}
 8000b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b14:	4a5e      	ldr	r2, [pc, #376]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000b16:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000b18:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d072      	beq.n	8000c08 <HAL_RCC_OscConfig+0x25c>
 8000b22:	2b18      	cmp	r3, #24
 8000b24:	d06c      	beq.n	8000c00 <HAL_RCC_OscConfig+0x254>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000b26:	69e3      	ldr	r3, [r4, #28]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f000 8103 	beq.w	8000d34 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_CSI_ENABLE();
 8000b2e:	4b58      	ldr	r3, [pc, #352]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000b30:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000b32:	461e      	mov	r6, r3
        __HAL_RCC_CSI_ENABLE();
 8000b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b3a:	f7ff fd73 	bl	8000624 <HAL_GetTick>
 8000b3e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000b40:	e005      	b.n	8000b4e <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000b42:	f7ff fd6f 	bl	8000624 <HAL_GetTick>
 8000b46:	1b40      	subs	r0, r0, r5
 8000b48:	2802      	cmp	r0, #2
 8000b4a:	f200 80c7 	bhi.w	8000cdc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000b4e:	6833      	ldr	r3, [r6, #0]
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	d5f6      	bpl.n	8000b42 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000b54:	f7ff fd6c 	bl	8000630 <HAL_GetREVID>
 8000b58:	f241 0303 	movw	r3, #4099	; 0x1003
 8000b5c:	4298      	cmp	r0, r3
 8000b5e:	f200 81e9 	bhi.w	8000f34 <HAL_RCC_OscConfig+0x588>
 8000b62:	6a22      	ldr	r2, [r4, #32]
 8000b64:	6873      	ldr	r3, [r6, #4]
 8000b66:	2a20      	cmp	r2, #32
 8000b68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000b6c:	bf0c      	ite	eq
 8000b6e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8000b72:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8000b76:	6073      	str	r3, [r6, #4]
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	e774      	b.n	8000a66 <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000b7c:	2b18      	cmp	r3, #24
 8000b7e:	f000 810b 	beq.w	8000d98 <HAL_RCC_OscConfig+0x3ec>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b82:	68e2      	ldr	r2, [r4, #12]
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	f000 80f3 	beq.w	8000d70 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000b8a:	4941      	ldr	r1, [pc, #260]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000b8c:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b8e:	460e      	mov	r6, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000b90:	f023 0319 	bic.w	r3, r3, #25
 8000b94:	4313      	orrs	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8000b98:	f7ff fd44 	bl	8000624 <HAL_GetTick>
 8000b9c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b9e:	e005      	b.n	8000bac <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ba0:	f7ff fd40 	bl	8000624 <HAL_GetTick>
 8000ba4:	1b40      	subs	r0, r0, r5
 8000ba6:	2802      	cmp	r0, #2
 8000ba8:	f200 8098 	bhi.w	8000cdc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000bac:	6833      	ldr	r3, [r6, #0]
 8000bae:	075f      	lsls	r7, r3, #29
 8000bb0:	d5f6      	bpl.n	8000ba0 <HAL_RCC_OscConfig+0x1f4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bb2:	f7ff fd3d 	bl	8000630 <HAL_GetREVID>
 8000bb6:	f241 0303 	movw	r3, #4099	; 0x1003
 8000bba:	4298      	cmp	r0, r3
 8000bbc:	f200 81c3 	bhi.w	8000f46 <HAL_RCC_OscConfig+0x59a>
 8000bc0:	6922      	ldr	r2, [r4, #16]
 8000bc2:	6873      	ldr	r3, [r6, #4]
 8000bc4:	2a40      	cmp	r2, #64	; 0x40
 8000bc6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000bca:	bf0c      	ite	eq
 8000bcc:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8000bd0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8000bd4:	6073      	str	r3, [r6, #4]
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	e743      	b.n	8000a62 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000bdc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000bde:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 8000be0:	f022 0201 	bic.w	r2, r2, #1
 8000be4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000be6:	f7ff fd1d 	bl	8000624 <HAL_GetTick>
 8000bea:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000bec:	e004      	b.n	8000bf8 <HAL_RCC_OscConfig+0x24c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bee:	f7ff fd19 	bl	8000624 <HAL_GetTick>
 8000bf2:	1b40      	subs	r0, r0, r5
 8000bf4:	2802      	cmp	r0, #2
 8000bf6:	d871      	bhi.n	8000cdc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000bf8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000bfa:	0799      	lsls	r1, r3, #30
 8000bfc:	d4f7      	bmi.n	8000bee <HAL_RCC_OscConfig+0x242>
 8000bfe:	e74b      	b.n	8000a98 <HAL_RCC_OscConfig+0xec>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000c00:	f002 0203 	and.w	r2, r2, #3
 8000c04:	2a01      	cmp	r2, #1
 8000c06:	d18e      	bne.n	8000b26 <HAL_RCC_OscConfig+0x17a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000c08:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	05da      	lsls	r2, r3, #23
 8000c0e:	d552      	bpl.n	8000cb6 <HAL_RCC_OscConfig+0x30a>
 8000c10:	69e3      	ldr	r3, [r4, #28]
 8000c12:	2b80      	cmp	r3, #128	; 0x80
 8000c14:	d04f      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x30a>
        return HAL_ERROR;
 8000c16:	2001      	movs	r0, #1
}
 8000c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000c1a:	f001 0103 	and.w	r1, r1, #3
 8000c1e:	2902      	cmp	r1, #2
 8000c20:	f47f aed7 	bne.w	80009d2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c24:	4a1a      	ldr	r2, [pc, #104]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000c26:	6812      	ldr	r2, [r2, #0]
 8000c28:	0392      	lsls	r2, r2, #14
 8000c2a:	f57f aef6 	bpl.w	8000a1a <HAL_RCC_OscConfig+0x6e>
 8000c2e:	6862      	ldr	r2, [r4, #4]
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f47f aef2 	bne.w	8000a1a <HAL_RCC_OscConfig+0x6e>
 8000c36:	e7ee      	b.n	8000c16 <HAL_RCC_OscConfig+0x26a>
    PWR->CR1 |= PWR_CR1_DBP;
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_RCC_OscConfig+0x2e8>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000c3c:	461e      	mov	r6, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8000c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c42:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000c44:	f7ff fcee 	bl	8000624 <HAL_GetTick>
 8000c48:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000c4a:	e004      	b.n	8000c56 <HAL_RCC_OscConfig+0x2aa>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000c4c:	f7ff fcea 	bl	8000624 <HAL_GetTick>
 8000c50:	1b40      	subs	r0, r0, r5
 8000c52:	2864      	cmp	r0, #100	; 0x64
 8000c54:	d842      	bhi.n	8000cdc <HAL_RCC_OscConfig+0x330>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000c56:	6833      	ldr	r3, [r6, #0]
 8000c58:	05da      	lsls	r2, r3, #23
 8000c5a:	d5f7      	bpl.n	8000c4c <HAL_RCC_OscConfig+0x2a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c5c:	68a3      	ldr	r3, [r4, #8]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	f000 817a 	beq.w	8000f58 <HAL_RCC_OscConfig+0x5ac>
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 814b 	beq.w	8000f00 <HAL_RCC_OscConfig+0x554>
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
 8000c6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000c70:	f000 8187 	beq.w	8000f82 <HAL_RCC_OscConfig+0x5d6>
 8000c74:	f022 0201 	bic.w	r2, r2, #1
 8000c78:	671a      	str	r2, [r3, #112]	; 0x70
 8000c7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000c7c:	f022 0204 	bic.w	r2, r2, #4
 8000c80:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000c82:	f7ff fccf 	bl	8000624 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c86:	4e02      	ldr	r6, [pc, #8]	; (8000c90 <HAL_RCC_OscConfig+0x2e4>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c88:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c8c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x2f6>
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c98:	f7ff fcc4 	bl	8000624 <HAL_GetTick>
 8000c9c:	1b40      	subs	r0, r0, r5
 8000c9e:	42b8      	cmp	r0, r7
 8000ca0:	d81c      	bhi.n	8000cdc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ca2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000ca4:	079b      	lsls	r3, r3, #30
 8000ca6:	d5f7      	bpl.n	8000c98 <HAL_RCC_OscConfig+0x2ec>
 8000ca8:	e714      	b.n	8000ad4 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000caa:	4aae      	ldr	r2, [pc, #696]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
 8000cac:	6813      	ldr	r3, [r2, #0]
 8000cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb4:	e6a2      	b.n	80009fc <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000cb6:	f7ff fcbb 	bl	8000630 <HAL_GetREVID>
 8000cba:	f241 0303 	movw	r3, #4099	; 0x1003
 8000cbe:	4298      	cmp	r0, r3
 8000cc0:	d870      	bhi.n	8000da4 <HAL_RCC_OscConfig+0x3f8>
 8000cc2:	6a22      	ldr	r2, [r4, #32]
 8000cc4:	2a20      	cmp	r2, #32
 8000cc6:	f000 8153 	beq.w	8000f70 <HAL_RCC_OscConfig+0x5c4>
 8000cca:	49a6      	ldr	r1, [pc, #664]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
 8000ccc:	684b      	ldr	r3, [r1, #4]
 8000cce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000cd2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8000cd6:	604b      	str	r3, [r1, #4]
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	e6c4      	b.n	8000a66 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8000cdc:	2003      	movs	r0, #3
}
 8000cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce0:	4ba0      	ldr	r3, [pc, #640]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ce4:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fc96 	bl	8000624 <HAL_GetTick>
 8000cf8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000cfa:	e004      	b.n	8000d06 <HAL_RCC_OscConfig+0x35a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfc:	f7ff fc92 	bl	8000624 <HAL_GetTick>
 8000d00:	1b40      	subs	r0, r0, r5
 8000d02:	2864      	cmp	r0, #100	; 0x64
 8000d04:	d8ea      	bhi.n	8000cdc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d06:	6833      	ldr	r3, [r6, #0]
 8000d08:	0398      	lsls	r0, r3, #14
 8000d0a:	d4f7      	bmi.n	8000cfc <HAL_RCC_OscConfig+0x350>
 8000d0c:	e684      	b.n	8000a18 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8000d0e:	4b95      	ldr	r3, [pc, #596]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
 8000d10:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000d12:	461e      	mov	r6, r3
      __HAL_RCC_HSI48_DISABLE();
 8000d14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d18:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d1a:	f7ff fc83 	bl	8000624 <HAL_GetTick>
 8000d1e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000d20:	e004      	b.n	8000d2c <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000d22:	f7ff fc7f 	bl	8000624 <HAL_GetTick>
 8000d26:	1b40      	subs	r0, r0, r5
 8000d28:	2802      	cmp	r0, #2
 8000d2a:	d8d7      	bhi.n	8000cdc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000d2c:	6833      	ldr	r3, [r6, #0]
 8000d2e:	0498      	lsls	r0, r3, #18
 8000d30:	d4f7      	bmi.n	8000d22 <HAL_RCC_OscConfig+0x376>
 8000d32:	e6cb      	b.n	8000acc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_DISABLE();
 8000d34:	4b8b      	ldr	r3, [pc, #556]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
 8000d36:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000d38:	461e      	mov	r6, r3
        __HAL_RCC_CSI_DISABLE();
 8000d3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc70 	bl	8000624 <HAL_GetTick>
 8000d44:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000d46:	e004      	b.n	8000d52 <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000d48:	f7ff fc6c 	bl	8000624 <HAL_GetTick>
 8000d4c:	1b40      	subs	r0, r0, r5
 8000d4e:	2802      	cmp	r0, #2
 8000d50:	d8c4      	bhi.n	8000cdc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000d52:	6833      	ldr	r3, [r6, #0]
 8000d54:	05df      	lsls	r7, r3, #23
 8000d56:	d4f7      	bmi.n	8000d48 <HAL_RCC_OscConfig+0x39c>
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	e684      	b.n	8000a66 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5c:	4a81      	ldr	r2, [pc, #516]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
 8000d5e:	6921      	ldr	r1, [r4, #16]
 8000d60:	6853      	ldr	r3, [r2, #4]
 8000d62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000d66:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000d6a:	6053      	str	r3, [r2, #4]
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	e678      	b.n	8000a62 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8000d70:	4b7c      	ldr	r3, [pc, #496]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
 8000d72:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d74:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fc52 	bl	8000624 <HAL_GetTick>
 8000d80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d82:	e004      	b.n	8000d8e <HAL_RCC_OscConfig+0x3e2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d84:	f7ff fc4e 	bl	8000624 <HAL_GetTick>
 8000d88:	1b40      	subs	r0, r0, r5
 8000d8a:	2802      	cmp	r0, #2
 8000d8c:	d8a6      	bhi.n	8000cdc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d8e:	6833      	ldr	r3, [r6, #0]
 8000d90:	0758      	lsls	r0, r3, #29
 8000d92:	d4f7      	bmi.n	8000d84 <HAL_RCC_OscConfig+0x3d8>
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	e664      	b.n	8000a62 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000d98:	0792      	lsls	r2, r2, #30
 8000d9a:	f47f aef2 	bne.w	8000b82 <HAL_RCC_OscConfig+0x1d6>
 8000d9e:	e645      	b.n	8000a2c <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8000da0:	2001      	movs	r0, #1
}
 8000da2:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000da4:	4a6f      	ldr	r2, [pc, #444]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
 8000da6:	6a21      	ldr	r1, [r4, #32]
 8000da8:	68d3      	ldr	r3, [r2, #12]
 8000daa:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000dae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000db2:	60d3      	str	r3, [r2, #12]
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	e656      	b.n	8000a66 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 8000db8:	f7ff fc34 	bl	8000624 <HAL_GetTick>
 8000dbc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000dbe:	e004      	b.n	8000dca <HAL_RCC_OscConfig+0x41e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc0:	f7ff fc30 	bl	8000624 <HAL_GetTick>
 8000dc4:	1b80      	subs	r0, r0, r6
 8000dc6:	2802      	cmp	r0, #2
 8000dc8:	d888      	bhi.n	8000cdc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000dca:	682b      	ldr	r3, [r5, #0]
 8000dcc:	0199      	lsls	r1, r3, #6
 8000dce:	d4f7      	bmi.n	8000dc0 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dd0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000dd2:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <HAL_RCC_OscConfig+0x5bc>)
 8000dd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000dda:	4964      	ldr	r1, [pc, #400]	; (8000f6c <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ddc:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000dde:	4e61      	ldr	r6, [pc, #388]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000de0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000de4:	62ab      	str	r3, [r5, #40]	; 0x28
 8000de6:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8000de8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8000dec:	3f01      	subs	r7, #1
 8000dee:	1e50      	subs	r0, r2, #1
 8000df0:	3b01      	subs	r3, #1
 8000df2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000df4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8000df8:	025b      	lsls	r3, r3, #9
 8000dfa:	0400      	lsls	r0, r0, #16
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8000e04:	0612      	lsls	r2, r2, #24
 8000e06:	4303      	orrs	r3, r0
 8000e08:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000e0c:	433b      	orrs	r3, r7
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8000e12:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e14:	f023 0301 	bic.w	r3, r3, #1
 8000e18:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000e1a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000e1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000e1e:	4011      	ands	r1, r2
 8000e20:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8000e24:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000e26:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e28:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e2a:	f023 030c 	bic.w	r3, r3, #12
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000e32:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e34:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000e36:	f023 0302 	bic.w	r3, r3, #2
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000e3e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e44:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000e46:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000e4e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e54:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8000e56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000e5e:	682b      	ldr	r3, [r5, #0]
 8000e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e66:	f7ff fbdd 	bl	8000624 <HAL_GetTick>
 8000e6a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000e6c:	e005      	b.n	8000e7a <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e6e:	f7ff fbd9 	bl	8000624 <HAL_GetTick>
 8000e72:	1b00      	subs	r0, r0, r4
 8000e74:	2802      	cmp	r0, #2
 8000e76:	f63f af31 	bhi.w	8000cdc <HAL_RCC_OscConfig+0x330>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000e7a:	6833      	ldr	r3, [r6, #0]
 8000e7c:	019a      	lsls	r2, r3, #6
 8000e7e:	d5f6      	bpl.n	8000e6e <HAL_RCC_OscConfig+0x4c2>
 8000e80:	e646      	b.n	8000b10 <HAL_RCC_OscConfig+0x164>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e82:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8000e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8000e86:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e88:	f43f ae43 	beq.w	8000b12 <HAL_RCC_OscConfig+0x166>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e8c:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e90:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e92:	428b      	cmp	r3, r1
 8000e94:	f47f aebf 	bne.w	8000c16 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e98:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	f47f aeb9 	bne.w	8000c16 <HAL_RCC_OscConfig+0x26a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000ea4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ea6:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8000eaa:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f47f aeb2 	bne.w	8000c16 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000eb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000eb4:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8000eb8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	f47f aeab 	bne.w	8000c16 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000ec0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ec2:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8000ec6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f47f aea4 	bne.w	8000c16 <HAL_RCC_OscConfig+0x26a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8000ece:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000ed0:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8000ed4:	3801      	subs	r0, #1
  return HAL_OK;
 8000ed6:	1a28      	subs	r0, r5, r0
 8000ed8:	bf18      	it	ne
 8000eda:	2001      	movne	r0, #1
}
 8000edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ede:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	e586      	b.n	80009fc <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eee:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
 8000ef0:	6853      	ldr	r3, [r2, #4]
 8000ef2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efa:	6053      	str	r3, [r2, #4]
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	e5b0      	b.n	8000a62 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f08:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	671a      	str	r2, [r3, #112]	; 0x70
 8000f10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f12:	f022 0204 	bic.w	r2, r2, #4
 8000f16:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f18:	f7ff fb84 	bl	8000624 <HAL_GetTick>
 8000f1c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f1e:	e005      	b.n	8000f2c <HAL_RCC_OscConfig+0x580>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f20:	f7ff fb80 	bl	8000624 <HAL_GetTick>
 8000f24:	1b40      	subs	r0, r0, r5
 8000f26:	42b8      	cmp	r0, r7
 8000f28:	f63f aed8 	bhi.w	8000cdc <HAL_RCC_OscConfig+0x330>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f2c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000f2e:	0798      	lsls	r0, r3, #30
 8000f30:	d4f6      	bmi.n	8000f20 <HAL_RCC_OscConfig+0x574>
 8000f32:	e5cf      	b.n	8000ad4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f34:	68f3      	ldr	r3, [r6, #12]
 8000f36:	6a22      	ldr	r2, [r4, #32]
 8000f38:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000f3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f40:	60f3      	str	r3, [r6, #12]
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	e58f      	b.n	8000a66 <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f46:	6873      	ldr	r3, [r6, #4]
 8000f48:	6922      	ldr	r2, [r4, #16]
 8000f4a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000f4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f52:	6073      	str	r3, [r6, #4]
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	e584      	b.n	8000a62 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f58:	4a02      	ldr	r2, [pc, #8]	; (8000f64 <HAL_RCC_OscConfig+0x5b8>)
 8000f5a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f62:	e68e      	b.n	8000c82 <HAL_RCC_OscConfig+0x2d6>
 8000f64:	58024400 	.word	0x58024400
 8000f68:	fffffc0c 	.word	0xfffffc0c
 8000f6c:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f70:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_RCC_OscConfig+0x5e8>)
 8000f72:	6853      	ldr	r3, [r2, #4]
 8000f74:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000f78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f7c:	6053      	str	r3, [r2, #4]
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	e571      	b.n	8000a66 <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f82:	f042 0204 	orr.w	r2, r2, #4
 8000f86:	671a      	str	r2, [r3, #112]	; 0x70
 8000f88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000f8a:	f042 0201 	orr.w	r2, r2, #1
 8000f8e:	671a      	str	r2, [r3, #112]	; 0x70
 8000f90:	e677      	b.n	8000c82 <HAL_RCC_OscConfig+0x2d6>
 8000f92:	bf00      	nop
 8000f94:	58024400 	.word	0x58024400

08000f98 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f98:	4a47      	ldr	r2, [pc, #284]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x120>)
 8000f9a:	6913      	ldr	r3, [r2, #16]
 8000f9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fa0:	2b10      	cmp	r3, #16
 8000fa2:	d004      	beq.n	8000fae <HAL_RCC_GetSysClockFreq+0x16>
 8000fa4:	2b18      	cmp	r3, #24
 8000fa6:	d00d      	beq.n	8000fc4 <HAL_RCC_GetSysClockFreq+0x2c>
 8000fa8:	b11b      	cbz	r3, 8000fb2 <HAL_RCC_GetSysClockFreq+0x1a>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8000faa:	4844      	ldr	r0, [pc, #272]	; (80010bc <HAL_RCC_GetSysClockFreq+0x124>)
 8000fac:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fae:	4844      	ldr	r0, [pc, #272]	; (80010c0 <HAL_RCC_GetSysClockFreq+0x128>)
 8000fb0:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000fb2:	6813      	ldr	r3, [r2, #0]
 8000fb4:	0699      	lsls	r1, r3, #26
 8000fb6:	d54a      	bpl.n	800104e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000fb8:	6813      	ldr	r3, [r2, #0]
 8000fba:	4842      	ldr	r0, [pc, #264]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8000fbc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000fc0:	40d8      	lsrs	r0, r3
 8000fc2:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000fc4:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8000fc6:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000fc8:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000fca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8000fcc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000fd0:	f3c4 1005 	ubfx	r0, r4, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000fd4:	6b55      	ldr	r5, [r2, #52]	; 0x34
    if (pllm != 0U)
 8000fd6:	d038      	beq.n	800104a <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000fd8:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000fdc:	f001 0101 	and.w	r1, r1, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000fe0:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000fe4:	fb01 f105 	mul.w	r1, r1, r5
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	ee07 1a90 	vmov	s15, r1
 8000fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8000ff2:	d002      	beq.n	8000ffa <HAL_RCC_GetSysClockFreq+0x62>
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d02c      	beq.n	8001052 <HAL_RCC_GetSysClockFreq+0xba>
 8000ff8:	b393      	cbz	r3, 8001060 <HAL_RCC_GetSysClockFreq+0xc8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000ffa:	ee07 0a90 	vmov	s15, r0
 8000ffe:	eddf 6a32 	vldr	s13, [pc, #200]	; 80010c8 <HAL_RCC_GetSysClockFreq+0x130>
 8001002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001006:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001008:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800100c:	eddf 5a2f 	vldr	s11, [pc, #188]	; 80010cc <HAL_RCC_GetSysClockFreq+0x134>
 8001010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001014:	ee06 3a90 	vmov	s13, r3
 8001018:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800101c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001020:	ee76 6a85 	vadd.f32	s13, s13, s10
 8001024:	eee7 6a25 	vfma.f32	s13, s14, s11
 8001028:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <HAL_RCC_GetSysClockFreq+0x120>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001034:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800103e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001046:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800104a:	bc30      	pop	{r4, r5}
 800104c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800104e:	481d      	ldr	r0, [pc, #116]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8001050:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001052:	ee07 0a90 	vmov	s15, r0
 8001056:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80010d0 <HAL_RCC_GetSysClockFreq+0x138>
 800105a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105e:	e7d2      	b.n	8001006 <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001060:	6813      	ldr	r3, [r2, #0]
 8001062:	069b      	lsls	r3, r3, #26
 8001064:	d520      	bpl.n	80010a8 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001066:	6813      	ldr	r3, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001068:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800106c:	4915      	ldr	r1, [pc, #84]	; (80010c4 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800106e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001072:	f3c3 00c1 	ubfx	r0, r3, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800107c:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800107e:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80010cc <HAL_RCC_GetSysClockFreq+0x134>
 8001082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001086:	ee06 1a10 	vmov	s12, r1
 800108a:	ee06 3a90 	vmov	s13, r3
 800108e:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8001092:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001096:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800109a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800109e:	eee7 6a05 	vfma.f32	s13, s14, s10
 80010a2:	ee66 6a26 	vmul.f32	s13, s12, s13
 80010a6:	e7c1      	b.n	800102c <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80010a8:	ee07 0a90 	vmov	s15, r0
 80010ac:	eddf 6a09 	vldr	s13, [pc, #36]	; 80010d4 <HAL_RCC_GetSysClockFreq+0x13c>
 80010b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b4:	e7a7      	b.n	8001006 <HAL_RCC_GetSysClockFreq+0x6e>
 80010b6:	bf00      	nop
 80010b8:	58024400 	.word	0x58024400
 80010bc:	003d0900 	.word	0x003d0900
 80010c0:	017d7840 	.word	0x017d7840
 80010c4:	03d09000 	.word	0x03d09000
 80010c8:	4a742400 	.word	0x4a742400
 80010cc:	39000000 	.word	0x39000000
 80010d0:	4bbebc20 	.word	0x4bbebc20
 80010d4:	4c742400 	.word	0x4c742400

080010d8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80010d8:	2800      	cmp	r0, #0
 80010da:	f000 810e 	beq.w	80012fa <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010de:	4a8d      	ldr	r2, [pc, #564]	; (8001314 <HAL_RCC_ClockConfig+0x23c>)
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	428b      	cmp	r3, r1
{
 80010e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ec:	4604      	mov	r4, r0
 80010ee:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010f0:	d20c      	bcs.n	800110c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f2:	6813      	ldr	r3, [r2, #0]
 80010f4:	f023 030f 	bic.w	r3, r3, #15
 80010f8:	430b      	orrs	r3, r1
 80010fa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fc:	6813      	ldr	r3, [r2, #0]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	428b      	cmp	r3, r1
 8001104:	d002      	beq.n	800110c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001106:	2001      	movs	r0, #1
}
 8001108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	075f      	lsls	r7, r3, #29
 8001110:	d50b      	bpl.n	800112a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001112:	4981      	ldr	r1, [pc, #516]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 8001114:	6920      	ldr	r0, [r4, #16]
 8001116:	698a      	ldr	r2, [r1, #24]
 8001118:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800111c:	4290      	cmp	r0, r2
 800111e:	d904      	bls.n	800112a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001120:	698a      	ldr	r2, [r1, #24]
 8001122:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001126:	4302      	orrs	r2, r0
 8001128:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800112a:	071e      	lsls	r6, r3, #28
 800112c:	d50b      	bpl.n	8001146 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800112e:	497a      	ldr	r1, [pc, #488]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 8001130:	6960      	ldr	r0, [r4, #20]
 8001132:	69ca      	ldr	r2, [r1, #28]
 8001134:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001138:	4290      	cmp	r0, r2
 800113a:	d904      	bls.n	8001146 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800113c:	69ca      	ldr	r2, [r1, #28]
 800113e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001142:	4302      	orrs	r2, r0
 8001144:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001146:	06d8      	lsls	r0, r3, #27
 8001148:	d50b      	bpl.n	8001162 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800114a:	4973      	ldr	r1, [pc, #460]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 800114c:	69a0      	ldr	r0, [r4, #24]
 800114e:	69ca      	ldr	r2, [r1, #28]
 8001150:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001154:	4290      	cmp	r0, r2
 8001156:	d904      	bls.n	8001162 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001158:	69ca      	ldr	r2, [r1, #28]
 800115a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800115e:	4302      	orrs	r2, r0
 8001160:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001162:	0699      	lsls	r1, r3, #26
 8001164:	d50b      	bpl.n	800117e <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001166:	496c      	ldr	r1, [pc, #432]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 8001168:	69e0      	ldr	r0, [r4, #28]
 800116a:	6a0a      	ldr	r2, [r1, #32]
 800116c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001170:	4290      	cmp	r0, r2
 8001172:	d904      	bls.n	800117e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001174:	6a0a      	ldr	r2, [r1, #32]
 8001176:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800117a:	4302      	orrs	r2, r0
 800117c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800117e:	079a      	lsls	r2, r3, #30
 8001180:	f140 80ad 	bpl.w	80012de <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001184:	4864      	ldr	r0, [pc, #400]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 8001186:	68e1      	ldr	r1, [r4, #12]
 8001188:	6982      	ldr	r2, [r0, #24]
 800118a:	f002 020f 	and.w	r2, r2, #15
 800118e:	4291      	cmp	r1, r2
 8001190:	d904      	bls.n	800119c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001192:	6982      	ldr	r2, [r0, #24]
 8001194:	f022 020f 	bic.w	r2, r2, #15
 8001198:	430a      	orrs	r2, r1
 800119a:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119c:	07d8      	lsls	r0, r3, #31
 800119e:	d531      	bpl.n	8001204 <HAL_RCC_ClockConfig+0x12c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80011a0:	4a5d      	ldr	r2, [pc, #372]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 80011a2:	68a1      	ldr	r1, [r4, #8]
 80011a4:	6993      	ldr	r3, [r2, #24]
 80011a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011aa:	430b      	orrs	r3, r1
 80011ac:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ae:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011b0:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b2:	2902      	cmp	r1, #2
 80011b4:	f000 80a3 	beq.w	80012fe <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011b8:	2903      	cmp	r1, #3
 80011ba:	f000 809a 	beq.w	80012f2 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80011be:	2901      	cmp	r1, #1
 80011c0:	f000 80a3 	beq.w	800130a <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011c4:	0758      	lsls	r0, r3, #29
 80011c6:	d59e      	bpl.n	8001106 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011c8:	4a53      	ldr	r2, [pc, #332]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ca:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011ce:	6913      	ldr	r3, [r2, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d0:	4617      	mov	r7, r2
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011d2:	f023 0307 	bic.w	r3, r3, #7
 80011d6:	430b      	orrs	r3, r1
 80011d8:	6113      	str	r3, [r2, #16]
      tickstart = HAL_GetTick();
 80011da:	f7ff fa23 	bl	8000624 <HAL_GetTick>
 80011de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e0:	e005      	b.n	80011ee <HAL_RCC_ClockConfig+0x116>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e2:	f7ff fa1f 	bl	8000624 <HAL_GetTick>
 80011e6:	1b80      	subs	r0, r0, r6
 80011e8:	4540      	cmp	r0, r8
 80011ea:	f200 808c 	bhi.w	8001306 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	6862      	ldr	r2, [r4, #4]
 80011f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011f6:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80011fa:	d1f2      	bne.n	80011e2 <HAL_RCC_ClockConfig+0x10a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	0799      	lsls	r1, r3, #30
 8001200:	d506      	bpl.n	8001210 <HAL_RCC_ClockConfig+0x138>
 8001202:	68e1      	ldr	r1, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001204:	4844      	ldr	r0, [pc, #272]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 8001206:	6982      	ldr	r2, [r0, #24]
 8001208:	f002 020f 	and.w	r2, r2, #15
 800120c:	428a      	cmp	r2, r1
 800120e:	d86a      	bhi.n	80012e6 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001210:	4940      	ldr	r1, [pc, #256]	; (8001314 <HAL_RCC_ClockConfig+0x23c>)
 8001212:	680a      	ldr	r2, [r1, #0]
 8001214:	f002 020f 	and.w	r2, r2, #15
 8001218:	42aa      	cmp	r2, r5
 800121a:	d90a      	bls.n	8001232 <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121c:	680a      	ldr	r2, [r1, #0]
 800121e:	f022 020f 	bic.w	r2, r2, #15
 8001222:	432a      	orrs	r2, r5
 8001224:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001226:	680a      	ldr	r2, [r1, #0]
 8001228:	f002 020f 	and.w	r2, r2, #15
 800122c:	42aa      	cmp	r2, r5
 800122e:	f47f af6a 	bne.w	8001106 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001232:	075a      	lsls	r2, r3, #29
 8001234:	d50b      	bpl.n	800124e <HAL_RCC_ClockConfig+0x176>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001236:	4938      	ldr	r1, [pc, #224]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 8001238:	6920      	ldr	r0, [r4, #16]
 800123a:	698a      	ldr	r2, [r1, #24]
 800123c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001240:	4290      	cmp	r0, r2
 8001242:	d204      	bcs.n	800124e <HAL_RCC_ClockConfig+0x176>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001244:	698a      	ldr	r2, [r1, #24]
 8001246:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800124a:	4302      	orrs	r2, r0
 800124c:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124e:	071f      	lsls	r7, r3, #28
 8001250:	d50b      	bpl.n	800126a <HAL_RCC_ClockConfig+0x192>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001252:	4931      	ldr	r1, [pc, #196]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 8001254:	6960      	ldr	r0, [r4, #20]
 8001256:	69ca      	ldr	r2, [r1, #28]
 8001258:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800125c:	4290      	cmp	r0, r2
 800125e:	d204      	bcs.n	800126a <HAL_RCC_ClockConfig+0x192>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001260:	69ca      	ldr	r2, [r1, #28]
 8001262:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001266:	4302      	orrs	r2, r0
 8001268:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126a:	06de      	lsls	r6, r3, #27
 800126c:	d50b      	bpl.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800126e:	492a      	ldr	r1, [pc, #168]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 8001270:	69a0      	ldr	r0, [r4, #24]
 8001272:	69ca      	ldr	r2, [r1, #28]
 8001274:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001278:	4290      	cmp	r0, r2
 800127a:	d204      	bcs.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800127c:	69ca      	ldr	r2, [r1, #28]
 800127e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001282:	4302      	orrs	r2, r0
 8001284:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001286:	069d      	lsls	r5, r3, #26
 8001288:	d50b      	bpl.n	80012a2 <HAL_RCC_ClockConfig+0x1ca>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800128a:	4a23      	ldr	r2, [pc, #140]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 800128c:	69e1      	ldr	r1, [r4, #28]
 800128e:	6a13      	ldr	r3, [r2, #32]
 8001290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001294:	4299      	cmp	r1, r3
 8001296:	d204      	bcs.n	80012a2 <HAL_RCC_ClockConfig+0x1ca>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001298:	6a13      	ldr	r3, [r2, #32]
 800129a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800129e:	430b      	orrs	r3, r1
 80012a0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a2:	f7ff fe79 	bl	8000f98 <HAL_RCC_GetSysClockFreq>
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_RCC_ClockConfig+0x240>)
 80012a8:	4602      	mov	r2, r0
 80012aa:	481c      	ldr	r0, [pc, #112]	; (800131c <HAL_RCC_ClockConfig+0x244>)
 80012ac:	6999      	ldr	r1, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ae:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012b0:	f3c1 2103 	ubfx	r1, r1, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 80012b4:	4d1a      	ldr	r5, [pc, #104]	; (8001320 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	4c1a      	ldr	r4, [pc, #104]	; (8001324 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012bc:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012be:	5cc3      	ldrb	r3, [r0, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012c0:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 80012c4:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012c6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 80012ca:	4d17      	ldr	r5, [pc, #92]	; (8001328 <HAL_RCC_ClockConfig+0x250>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012cc:	40ca      	lsrs	r2, r1
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80012d2:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012d4:	6023      	str	r3, [r4, #0]
}
 80012d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80012da:	f7ff b941 	b.w	8000560 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012de:	07da      	lsls	r2, r3, #31
 80012e0:	f53f af5e 	bmi.w	80011a0 <HAL_RCC_ClockConfig+0xc8>
 80012e4:	e794      	b.n	8001210 <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e6:	6982      	ldr	r2, [r0, #24]
 80012e8:	f022 020f 	bic.w	r2, r2, #15
 80012ec:	4311      	orrs	r1, r2
 80012ee:	6181      	str	r1, [r0, #24]
 80012f0:	e78e      	b.n	8001210 <HAL_RCC_ClockConfig+0x138>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012f2:	019f      	lsls	r7, r3, #6
 80012f4:	f53f af68 	bmi.w	80011c8 <HAL_RCC_ClockConfig+0xf0>
 80012f8:	e705      	b.n	8001106 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80012fa:	2001      	movs	r0, #1
}
 80012fc:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012fe:	039b      	lsls	r3, r3, #14
 8001300:	f53f af62 	bmi.w	80011c8 <HAL_RCC_ClockConfig+0xf0>
 8001304:	e6ff      	b.n	8001106 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8001306:	2003      	movs	r0, #3
 8001308:	e6fe      	b.n	8001108 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800130a:	05de      	lsls	r6, r3, #23
 800130c:	f53f af5c 	bmi.w	80011c8 <HAL_RCC_ClockConfig+0xf0>
 8001310:	e6f9      	b.n	8001106 <HAL_RCC_ClockConfig+0x2e>
 8001312:	bf00      	nop
 8001314:	52002000 	.word	0x52002000
 8001318:	58024400 	.word	0x58024400
 800131c:	0800139c 	.word	0x0800139c
 8001320:	2400000c 	.word	0x2400000c
 8001324:	24000004 	.word	0x24000004
 8001328:	24000000 	.word	0x24000000

0800132c <__libc_init_array>:
 800132c:	b570      	push	{r4, r5, r6, lr}
 800132e:	4d0d      	ldr	r5, [pc, #52]	; (8001364 <__libc_init_array+0x38>)
 8001330:	4c0d      	ldr	r4, [pc, #52]	; (8001368 <__libc_init_array+0x3c>)
 8001332:	1b64      	subs	r4, r4, r5
 8001334:	10a4      	asrs	r4, r4, #2
 8001336:	2600      	movs	r6, #0
 8001338:	42a6      	cmp	r6, r4
 800133a:	d109      	bne.n	8001350 <__libc_init_array+0x24>
 800133c:	4d0b      	ldr	r5, [pc, #44]	; (800136c <__libc_init_array+0x40>)
 800133e:	4c0c      	ldr	r4, [pc, #48]	; (8001370 <__libc_init_array+0x44>)
 8001340:	f000 f820 	bl	8001384 <_init>
 8001344:	1b64      	subs	r4, r4, r5
 8001346:	10a4      	asrs	r4, r4, #2
 8001348:	2600      	movs	r6, #0
 800134a:	42a6      	cmp	r6, r4
 800134c:	d105      	bne.n	800135a <__libc_init_array+0x2e>
 800134e:	bd70      	pop	{r4, r5, r6, pc}
 8001350:	f855 3b04 	ldr.w	r3, [r5], #4
 8001354:	4798      	blx	r3
 8001356:	3601      	adds	r6, #1
 8001358:	e7ee      	b.n	8001338 <__libc_init_array+0xc>
 800135a:	f855 3b04 	ldr.w	r3, [r5], #4
 800135e:	4798      	blx	r3
 8001360:	3601      	adds	r6, #1
 8001362:	e7f2      	b.n	800134a <__libc_init_array+0x1e>
 8001364:	080013ac 	.word	0x080013ac
 8001368:	080013ac 	.word	0x080013ac
 800136c:	080013ac 	.word	0x080013ac
 8001370:	080013b0 	.word	0x080013b0

08001374 <memset>:
 8001374:	4402      	add	r2, r0
 8001376:	4603      	mov	r3, r0
 8001378:	4293      	cmp	r3, r2
 800137a:	d100      	bne.n	800137e <memset+0xa>
 800137c:	4770      	bx	lr
 800137e:	f803 1b01 	strb.w	r1, [r3], #1
 8001382:	e7f9      	b.n	8001378 <memset+0x4>

08001384 <_init>:
 8001384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001386:	bf00      	nop
 8001388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800138a:	bc08      	pop	{r3}
 800138c:	469e      	mov	lr, r3
 800138e:	4770      	bx	lr

08001390 <_fini>:
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001392:	bf00      	nop
 8001394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001396:	bc08      	pop	{r3}
 8001398:	469e      	mov	lr, r3
 800139a:	4770      	bx	lr
