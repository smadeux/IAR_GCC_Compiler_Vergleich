
ISR Vergleich.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000205c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002304  08002304  00012304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002308  08002308  00012308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  0800230c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  0800231c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  0800231c  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014042  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002032  00000000  00000000  00034080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b88  00000000  00000000  000360b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ad0  00000000  00000000  00036c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035063  00000000  00000000  00037710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c9ec  00000000  00000000  0006c773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00157d1e  00000000  00000000  0007915f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001d0e7d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003010  00000000  00000000  001d0ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080022dc 	.word	0x080022dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080022dc 	.word	0x080022dc

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 fa0c 	bl	80006f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f80a 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f898 	bl	8000418 <MX_GPIO_Init>
  MX_TIM16_Init();
 80002e8:	f000 f870 	bl	80003cc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80002ec:	4801      	ldr	r0, [pc, #4]	; (80002f4 <main+0x1c>)
 80002ee:	f001 fd4d 	bl	8001d8c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f2:	e7fe      	b.n	80002f2 <main+0x1a>
 80002f4:	2400002c 	.word	0x2400002c

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b09c      	sub	sp, #112	; 0x70
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000302:	224c      	movs	r2, #76	; 0x4c
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f001 ffe0 	bl	80022cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2220      	movs	r2, #32
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f001 ffda 	bl	80022cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000318:	2002      	movs	r0, #2
 800031a:	f000 fd65 	bl	8000de8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800031e:	2300      	movs	r3, #0
 8000320:	603b      	str	r3, [r7, #0]
 8000322:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <SystemClock_Config+0xcc>)
 8000324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000326:	4a27      	ldr	r2, [pc, #156]	; (80003c4 <SystemClock_Config+0xcc>)
 8000328:	f023 0301 	bic.w	r3, r3, #1
 800032c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <SystemClock_Config+0xcc>)
 8000330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <SystemClock_Config+0xd0>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000340:	4a21      	ldr	r2, [pc, #132]	; (80003c8 <SystemClock_Config+0xd0>)
 8000342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <SystemClock_Config+0xd0>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000350:	603b      	str	r3, [r7, #0]
 8000352:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000354:	bf00      	nop
 8000356:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <SystemClock_Config+0xd0>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800035e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000362:	d1f8      	bne.n	8000356 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000364:	2302      	movs	r3, #2
 8000366:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000368:	2301      	movs	r3, #1
 800036a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036c:	2340      	movs	r3, #64	; 0x40
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000370:	2300      	movs	r3, #0
 8000372:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fd6f 	bl	8000e5c <HAL_RCC_OscConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000384:	f000 f886 	bl	8000494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	233f      	movs	r3, #63	; 0x3f
 800038a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038c:	2300      	movs	r3, #0
 800038e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2101      	movs	r1, #1
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 f965 	bl	800167c <HAL_RCC_ClockConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003b8:	f000 f86c 	bl	8000494 <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3770      	adds	r7, #112	; 0x70
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	58000400 	.word	0x58000400
 80003c8:	58024800 	.word	0x58024800

080003cc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_TIM16_Init+0x44>)
 80003d2:	4a10      	ldr	r2, [pc, #64]	; (8000414 <MX_TIM16_Init+0x48>)
 80003d4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64-1;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_TIM16_Init+0x44>)
 80003d8:	223f      	movs	r2, #63	; 0x3f
 80003da:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_TIM16_Init+0x44>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_TIM16_Init+0x44>)
 80003e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003e8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_TIM16_Init+0x44>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <MX_TIM16_Init+0x44>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_TIM16_Init+0x44>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_TIM16_Init+0x44>)
 80003fe:	f001 fc6d 	bl	8001cdc <HAL_TIM_Base_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000408:	f000 f844 	bl	8000494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2400002c 	.word	0x2400002c
 8000414:	40014400 	.word	0x40014400

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
 800042a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <MX_GPIO_Init+0x60>)
 800042e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000432:	4a11      	ldr	r2, [pc, #68]	; (8000478 <MX_GPIO_Init+0x60>)
 8000434:	f043 0304 	orr.w	r3, r3, #4
 8000438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_GPIO_Init+0x60>)
 800043e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000442:	f003 0304 	and.w	r3, r3, #4
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2140      	movs	r1, #64	; 0x40
 800044e:	480b      	ldr	r0, [pc, #44]	; (800047c <MX_GPIO_Init+0x64>)
 8000450:	f000 fcb0 	bl	8000db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXECUTE_PIN_Pin */
  GPIO_InitStruct.Pin = EXECUTE_PIN_Pin;
 8000454:	2340      	movs	r3, #64	; 0x40
 8000456:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000458:	2301      	movs	r3, #1
 800045a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EXECUTE_PIN_GPIO_Port, &GPIO_InitStruct);
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	4619      	mov	r1, r3
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <MX_GPIO_Init+0x64>)
 800046a:	f000 faf3 	bl	8000a54 <HAL_GPIO_Init>

}
 800046e:	bf00      	nop
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	58024400 	.word	0x58024400
 800047c:	58020800 	.word	0x58020800

08000480 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000498:	b672      	cpsid	i
}
 800049a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800049c:	e7fe      	b.n	800049c <Error_Handler+0x8>
	...

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <HAL_MspInit+0x30>)
 80004a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004ac:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <HAL_MspInit+0x30>)
 80004ae:	f043 0302 	orr.w	r3, r3, #2
 80004b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <HAL_MspInit+0x30>)
 80004b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004bc:	f003 0302 	and.w	r3, r3, #2
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	58024400 	.word	0x58024400

080004d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0e      	ldr	r2, [pc, #56]	; (800051c <HAL_TIM_Base_MspInit+0x48>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d116      	bne.n	8000514 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_TIM_Base_MspInit+0x4c>)
 80004e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <HAL_TIM_Base_MspInit+0x4c>)
 80004ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <HAL_TIM_Base_MspInit+0x4c>)
 80004f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80004fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	2075      	movs	r0, #117	; 0x75
 800050a:	f000 fa6e 	bl	80009ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800050e:	2075      	movs	r0, #117	; 0x75
 8000510:	f000 fa85 	bl	8000a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000514:	bf00      	nop
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40014400 	.word	0x40014400
 8000520:	58024400 	.word	0x58024400

08000524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <NMI_Handler+0x4>

0800052a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052e:	e7fe      	b.n	800052e <HardFault_Handler+0x4>

08000530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <MemManage_Handler+0x4>

08000536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <BusFault_Handler+0x4>

0800053c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <UsageFault_Handler+0x4>

08000542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000570:	f000 f934 	bl	80007dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <TIM16_IRQHandler+0x10>)
 800057e:	f001 fc75 	bl	8001e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	2400002c 	.word	0x2400002c

0800058c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000590:	4b39      	ldr	r3, [pc, #228]	; (8000678 <SystemInit+0xec>)
 8000592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000596:	4a38      	ldr	r2, [pc, #224]	; (8000678 <SystemInit+0xec>)
 8000598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800059c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005a0:	4b36      	ldr	r3, [pc, #216]	; (800067c <SystemInit+0xf0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f003 030f 	and.w	r3, r3, #15
 80005a8:	2b06      	cmp	r3, #6
 80005aa:	d807      	bhi.n	80005bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <SystemInit+0xf0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f023 030f 	bic.w	r3, r3, #15
 80005b4:	4a31      	ldr	r2, [pc, #196]	; (800067c <SystemInit+0xf0>)
 80005b6:	f043 0307 	orr.w	r3, r3, #7
 80005ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <SystemInit+0xf4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a2f      	ldr	r2, [pc, #188]	; (8000680 <SystemInit+0xf4>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005c8:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <SystemInit+0xf4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80005ce:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <SystemInit+0xf4>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	492b      	ldr	r1, [pc, #172]	; (8000680 <SystemInit+0xf4>)
 80005d4:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <SystemInit+0xf8>)
 80005d6:	4013      	ands	r3, r2
 80005d8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005da:	4b28      	ldr	r3, [pc, #160]	; (800067c <SystemInit+0xf0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f003 0308 	and.w	r3, r3, #8
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d007      	beq.n	80005f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <SystemInit+0xf0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f023 030f 	bic.w	r3, r3, #15
 80005ee:	4a23      	ldr	r2, [pc, #140]	; (800067c <SystemInit+0xf0>)
 80005f0:	f043 0307 	orr.w	r3, r3, #7
 80005f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <SystemInit+0xf4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <SystemInit+0xf4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <SystemInit+0xf4>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <SystemInit+0xf4>)
 800060a:	4a1f      	ldr	r2, [pc, #124]	; (8000688 <SystemInit+0xfc>)
 800060c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <SystemInit+0xf4>)
 8000610:	4a1e      	ldr	r2, [pc, #120]	; (800068c <SystemInit+0x100>)
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <SystemInit+0xf4>)
 8000616:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <SystemInit+0x104>)
 8000618:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <SystemInit+0xf4>)
 800061c:	2200      	movs	r2, #0
 800061e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <SystemInit+0xf4>)
 8000622:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <SystemInit+0x104>)
 8000624:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <SystemInit+0xf4>)
 8000628:	2200      	movs	r2, #0
 800062a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <SystemInit+0xf4>)
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <SystemInit+0x104>)
 8000630:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <SystemInit+0xf4>)
 8000634:	2200      	movs	r2, #0
 8000636:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <SystemInit+0xf4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a10      	ldr	r2, [pc, #64]	; (8000680 <SystemInit+0xf4>)
 800063e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000642:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <SystemInit+0xf4>)
 8000646:	2200      	movs	r2, #0
 8000648:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <SystemInit+0x108>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <SystemInit+0x10c>)
 8000650:	4013      	ands	r3, r2
 8000652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000656:	d202      	bcs.n	800065e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <SystemInit+0x110>)
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <SystemInit+0x114>)
 8000660:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000664:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <SystemInit+0xec>)
 8000668:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800066c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00
 800067c:	52002000 	.word	0x52002000
 8000680:	58024400 	.word	0x58024400
 8000684:	eaf6ed7f 	.word	0xeaf6ed7f
 8000688:	02020200 	.word	0x02020200
 800068c:	01ff0000 	.word	0x01ff0000
 8000690:	01010280 	.word	0x01010280
 8000694:	5c001000 	.word	0x5c001000
 8000698:	ffff0000 	.word	0xffff0000
 800069c:	51008108 	.word	0x51008108
 80006a0:	52004000 	.word	0x52004000

080006a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80006a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a8:	f7ff ff70 	bl	800058c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006d2:	f001 fdd7 	bl	8002284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006d6:	f7ff fdff 	bl	80002d8 <main>
  bx  lr
 80006da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80006e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80006e4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80006e8:	0800230c 	.word	0x0800230c
  ldr r2, =_sbss
 80006ec:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80006f0:	2400007c 	.word	0x2400007c

080006f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC3_IRQHandler>
	...

080006f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fe:	2003      	movs	r0, #3
 8000700:	f000 f968 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000704:	f001 f970 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 8000708:	4602      	mov	r2, r0
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_Init+0x68>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	0a1b      	lsrs	r3, r3, #8
 8000710:	f003 030f 	and.w	r3, r3, #15
 8000714:	4913      	ldr	r1, [pc, #76]	; (8000764 <HAL_Init+0x6c>)
 8000716:	5ccb      	ldrb	r3, [r1, r3]
 8000718:	f003 031f 	and.w	r3, r3, #31
 800071c:	fa22 f303 	lsr.w	r3, r2, r3
 8000720:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_Init+0x68>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f003 030f 	and.w	r3, r3, #15
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <HAL_Init+0x6c>)
 800072c:	5cd3      	ldrb	r3, [r2, r3]
 800072e:	f003 031f 	and.w	r3, r3, #31
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	fa22 f303 	lsr.w	r3, r2, r3
 8000738:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <HAL_Init+0x70>)
 800073a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800073c:	4a0b      	ldr	r2, [pc, #44]	; (800076c <HAL_Init+0x74>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000742:	200f      	movs	r0, #15
 8000744:	f000 f814 	bl	8000770 <HAL_InitTick>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e002      	b.n	8000758 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000752:	f7ff fea5 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	58024400 	.word	0x58024400
 8000764:	080022f4 	.word	0x080022f4
 8000768:	24000004 	.word	0x24000004
 800076c:	24000000 	.word	0x24000000

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_InitTick+0x60>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	e021      	b.n	80007c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <HAL_InitTick+0x64>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <HAL_InitTick+0x60>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f94d 	bl	8000a3a <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00e      	b.n	80007c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d80a      	bhi.n	80007c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f000 f917 	bl	80009ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <HAL_InitTick+0x68>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2400000c 	.word	0x2400000c
 80007d4:	24000000 	.word	0x24000000
 80007d8:	24000008 	.word	0x24000008

080007dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_IncTick+0x20>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x24>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <HAL_IncTick+0x24>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	2400000c 	.word	0x2400000c
 8000800:	24000078 	.word	0x24000078

08000804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <HAL_GetTick+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	24000078 	.word	0x24000078

0800081c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_GetREVID+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	0c1b      	lsrs	r3, r3, #16
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	5c001000 	.word	0x5c001000

08000834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <__NVIC_SetPriorityGrouping+0x40>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	4313      	orrs	r3, r2
 8000860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <__NVIC_SetPriorityGrouping+0x40>)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	60d3      	str	r3, [r2, #12]
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00
 8000878:	05fa0000 	.word	0x05fa0000

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db0b      	blt.n	80008c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	f003 021f 	and.w	r2, r3, #31
 80008b0:	4907      	ldr	r1, [pc, #28]	; (80008d0 <__NVIC_EnableIRQ+0x38>)
 80008b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b6:	095b      	lsrs	r3, r3, #5
 80008b8:	2001      	movs	r0, #1
 80008ba:	fa00 f202 	lsl.w	r2, r0, r2
 80008be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e100 	.word	0xe000e100

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db0a      	blt.n	80008fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	490c      	ldr	r1, [pc, #48]	; (8000920 <__NVIC_SetPriority+0x4c>)
 80008ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	440b      	add	r3, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008fc:	e00a      	b.n	8000914 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4908      	ldr	r1, [pc, #32]	; (8000924 <__NVIC_SetPriority+0x50>)
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	0112      	lsls	r2, r2, #4
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	440b      	add	r3, r1
 8000912:	761a      	strb	r2, [r3, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	2b04      	cmp	r3, #4
 8000944:	bf28      	it	cs
 8000946:	2304      	movcs	r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3304      	adds	r3, #4
 800094e:	2b06      	cmp	r3, #6
 8000950:	d902      	bls.n	8000958 <NVIC_EncodePriority+0x30>
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3b03      	subs	r3, #3
 8000956:	e000      	b.n	800095a <NVIC_EncodePriority+0x32>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	f04f 32ff 	mov.w	r2, #4294967295
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43da      	mvns	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000970:	f04f 31ff 	mov.w	r1, #4294967295
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43d9      	mvns	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	4313      	orrs	r3, r2
         );
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f7ff ff8e 	bl	80008d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff29 	bl	8000834 <__NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009f8:	f7ff ff40 	bl	800087c <__NVIC_GetPriorityGrouping>
 80009fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff ff90 	bl	8000928 <NVIC_EncodePriority>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff5f 	bl	80008d4 <__NVIC_SetPriority>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff33 	bl	8000898 <__NVIC_EnableIRQ>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ffa4 	bl	8000990 <SysTick_Config>
 8000a48:	4603      	mov	r3, r0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000a62:	4b89      	ldr	r3, [pc, #548]	; (8000c88 <HAL_GPIO_Init+0x234>)
 8000a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000a66:	e194      	b.n	8000d92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 8186 	beq.w	8000d8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d00b      	beq.n	8000aa0 <HAL_GPIO_Init+0x4c>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d007      	beq.n	8000aa0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a94:	2b11      	cmp	r3, #17
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	2b12      	cmp	r3, #18
 8000a9e:	d130      	bne.n	8000b02 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	2203      	movs	r2, #3
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68da      	ldr	r2, [r3, #12]
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	f003 0201 	and.w	r2, r3, #1
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	4013      	ands	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_Init+0xee>
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b12      	cmp	r3, #18
 8000b40:	d123      	bne.n	8000b8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	08da      	lsrs	r2, r3, #3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3208      	adds	r2, #8
 8000b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	220f      	movs	r2, #15
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	691a      	ldr	r2, [r3, #16]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	f003 0307 	and.w	r3, r3, #7
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	08da      	lsrs	r2, r3, #3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3208      	adds	r2, #8
 8000b84:	69b9      	ldr	r1, [r7, #24]
 8000b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2203      	movs	r2, #3
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0203 	and.w	r2, r3, #3
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 80e0 	beq.w	8000d8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bcc:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_GPIO_Init+0x238>)
 8000bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd2:	4a2e      	ldr	r2, [pc, #184]	; (8000c8c <HAL_GPIO_Init+0x238>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <HAL_GPIO_Init+0x238>)
 8000bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bea:	4a29      	ldr	r2, [pc, #164]	; (8000c90 <HAL_GPIO_Init+0x23c>)
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a20      	ldr	r2, [pc, #128]	; (8000c94 <HAL_GPIO_Init+0x240>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d052      	beq.n	8000cbc <HAL_GPIO_Init+0x268>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <HAL_GPIO_Init+0x244>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d031      	beq.n	8000c82 <HAL_GPIO_Init+0x22e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a1e      	ldr	r2, [pc, #120]	; (8000c9c <HAL_GPIO_Init+0x248>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d02b      	beq.n	8000c7e <HAL_GPIO_Init+0x22a>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <HAL_GPIO_Init+0x24c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d025      	beq.n	8000c7a <HAL_GPIO_Init+0x226>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <HAL_GPIO_Init+0x250>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d01f      	beq.n	8000c76 <HAL_GPIO_Init+0x222>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_GPIO_Init+0x254>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d019      	beq.n	8000c72 <HAL_GPIO_Init+0x21e>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <HAL_GPIO_Init+0x258>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d013      	beq.n	8000c6e <HAL_GPIO_Init+0x21a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_GPIO_Init+0x25c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d00d      	beq.n	8000c6a <HAL_GPIO_Init+0x216>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <HAL_GPIO_Init+0x260>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d007      	beq.n	8000c66 <HAL_GPIO_Init+0x212>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_GPIO_Init+0x264>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_GPIO_Init+0x20e>
 8000c5e:	2309      	movs	r3, #9
 8000c60:	e02d      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c62:	230a      	movs	r3, #10
 8000c64:	e02b      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c66:	2308      	movs	r3, #8
 8000c68:	e029      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	e027      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c6e:	2306      	movs	r3, #6
 8000c70:	e025      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c72:	2305      	movs	r3, #5
 8000c74:	e023      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c76:	2304      	movs	r3, #4
 8000c78:	e021      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e01f      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e01d      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e01b      	b.n	8000cbe <HAL_GPIO_Init+0x26a>
 8000c86:	bf00      	nop
 8000c88:	58000080 	.word	0x58000080
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58000400 	.word	0x58000400
 8000c94:	58020000 	.word	0x58020000
 8000c98:	58020400 	.word	0x58020400
 8000c9c:	58020800 	.word	0x58020800
 8000ca0:	58020c00 	.word	0x58020c00
 8000ca4:	58021000 	.word	0x58021000
 8000ca8:	58021400 	.word	0x58021400
 8000cac:	58021800 	.word	0x58021800
 8000cb0:	58021c00 	.word	0x58021c00
 8000cb4:	58022000 	.word	0x58022000
 8000cb8:	58022400 	.word	0x58022400
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	69fa      	ldr	r2, [r7, #28]
 8000cc0:	f002 0203 	and.w	r2, r2, #3
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	4093      	lsls	r3, r2
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cce:	4938      	ldr	r1, [pc, #224]	; (8000db0 <HAL_GPIO_Init+0x35c>)
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f47f ae63 	bne.w	8000a68 <HAL_GPIO_Init+0x14>
  }
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3724      	adds	r7, #36	; 0x24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	58000400 	.word	0x58000400

08000db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc4:	787b      	ldrb	r3, [r7, #1]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000dd0:	e003      	b.n	8000dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000dd2:	887b      	ldrh	r3, [r7, #2]
 8000dd4:	041a      	lsls	r2, r3, #16
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	619a      	str	r2, [r3, #24]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_PWREx_ConfigSupply+0x70>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d00a      	beq.n	8000e12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_PWREx_ConfigSupply+0x70>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d001      	beq.n	8000e0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e01f      	b.n	8000e4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e01d      	b.n	8000e4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_PWREx_ConfigSupply+0x70>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	f023 0207 	bic.w	r2, r3, #7
 8000e1a:	490f      	ldr	r1, [pc, #60]	; (8000e58 <HAL_PWREx_ConfigSupply+0x70>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000e22:	f7ff fcef 	bl	8000804 <HAL_GetTick>
 8000e26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000e28:	e009      	b.n	8000e3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000e2a:	f7ff fceb 	bl	8000804 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e38:	d901      	bls.n	8000e3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e007      	b.n	8000e4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_PWREx_ConfigSupply+0x70>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e4a:	d1ee      	bne.n	8000e2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	58024800 	.word	0x58024800

08000e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	; 0x30
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e3ff      	b.n	800166e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 8087 	beq.w	8000f8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e7c:	4b99      	ldr	r3, [pc, #612]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e86:	4b97      	ldr	r3, [pc, #604]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	2b10      	cmp	r3, #16
 8000e90:	d007      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x46>
 8000e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e94:	2b18      	cmp	r3, #24
 8000e96:	d110      	bne.n	8000eba <HAL_RCC_OscConfig+0x5e>
 8000e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d10b      	bne.n	8000eba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea2:	4b90      	ldr	r3, [pc, #576]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d06c      	beq.n	8000f88 <HAL_RCC_OscConfig+0x12c>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d168      	bne.n	8000f88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e3d9      	b.n	800166e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec2:	d106      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x76>
 8000ec4:	4b87      	ldr	r3, [pc, #540]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a86      	ldr	r2, [pc, #536]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	e02e      	b.n	8000f30 <HAL_RCC_OscConfig+0xd4>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x98>
 8000eda:	4b82      	ldr	r3, [pc, #520]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a81      	ldr	r2, [pc, #516]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	4b7f      	ldr	r3, [pc, #508]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a7e      	ldr	r2, [pc, #504]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e01d      	b.n	8000f30 <HAL_RCC_OscConfig+0xd4>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000efc:	d10c      	bne.n	8000f18 <HAL_RCC_OscConfig+0xbc>
 8000efe:	4b79      	ldr	r3, [pc, #484]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a78      	ldr	r2, [pc, #480]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b76      	ldr	r3, [pc, #472]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a75      	ldr	r2, [pc, #468]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e00b      	b.n	8000f30 <HAL_RCC_OscConfig+0xd4>
 8000f18:	4b72      	ldr	r3, [pc, #456]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a71      	ldr	r2, [pc, #452]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a6e      	ldr	r2, [pc, #440]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d013      	beq.n	8000f60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f38:	f7ff fc64 	bl	8000804 <HAL_GetTick>
 8000f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fc60 	bl	8000804 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e38d      	b.n	800166e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f52:	4b64      	ldr	r3, [pc, #400]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0xe4>
 8000f5e:	e014      	b.n	8000f8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f60:	f7ff fc50 	bl	8000804 <HAL_GetTick>
 8000f64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f68:	f7ff fc4c 	bl	8000804 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b64      	cmp	r3, #100	; 0x64
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e379      	b.n	800166e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f7a:	4b5a      	ldr	r3, [pc, #360]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f0      	bne.n	8000f68 <HAL_RCC_OscConfig+0x10c>
 8000f86:	e000      	b.n	8000f8a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80ae 	beq.w	80010f4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f98:	4b52      	ldr	r3, [pc, #328]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fa0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000fa2:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000fa8:	6a3b      	ldr	r3, [r7, #32]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d007      	beq.n	8000fbe <HAL_RCC_OscConfig+0x162>
 8000fae:	6a3b      	ldr	r3, [r7, #32]
 8000fb0:	2b18      	cmp	r3, #24
 8000fb2:	d13a      	bne.n	800102a <HAL_RCC_OscConfig+0x1ce>
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d135      	bne.n	800102a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x17a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e34b      	b.n	800166e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd6:	f7ff fc21 	bl	800081c <HAL_GetREVID>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f241 0203 	movw	r2, #4099	; 0x1003
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d817      	bhi.n	8001014 <HAL_RCC_OscConfig+0x1b8>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	2b40      	cmp	r3, #64	; 0x40
 8000fea:	d108      	bne.n	8000ffe <HAL_RCC_OscConfig+0x1a2>
 8000fec:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000ff4:	4a3b      	ldr	r2, [pc, #236]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8000ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ffc:	e07a      	b.n	80010f4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffe:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	031b      	lsls	r3, r3, #12
 800100c:	4935      	ldr	r1, [pc, #212]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 800100e:	4313      	orrs	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001012:	e06f      	b.n	80010f4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	061b      	lsls	r3, r3, #24
 8001022:	4930      	ldr	r1, [pc, #192]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001028:	e064      	b.n	80010f4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d045      	beq.n	80010be <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 0219 	bic.w	r2, r3, #25
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	4929      	ldr	r1, [pc, #164]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8001040:	4313      	orrs	r3, r2
 8001042:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001044:	f7ff fbde 	bl	8000804 <HAL_GetTick>
 8001048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800104c:	f7ff fbda 	bl	8000804 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e307      	b.n	800166e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	f7ff fbd7 	bl	800081c <HAL_GetREVID>
 800106e:	4603      	mov	r3, r0
 8001070:	f241 0203 	movw	r2, #4099	; 0x1003
 8001074:	4293      	cmp	r3, r2
 8001076:	d817      	bhi.n	80010a8 <HAL_RCC_OscConfig+0x24c>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	2b40      	cmp	r3, #64	; 0x40
 800107e:	d108      	bne.n	8001092 <HAL_RCC_OscConfig+0x236>
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 800108a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108e:	6053      	str	r3, [r2, #4]
 8001090:	e030      	b.n	80010f4 <HAL_RCC_OscConfig+0x298>
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	031b      	lsls	r3, r3, #12
 80010a0:	4910      	ldr	r1, [pc, #64]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	604b      	str	r3, [r1, #4]
 80010a6:	e025      	b.n	80010f4 <HAL_RCC_OscConfig+0x298>
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	061b      	lsls	r3, r3, #24
 80010b6:	490b      	ldr	r1, [pc, #44]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
 80010bc:	e01a      	b.n	80010f4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_RCC_OscConfig+0x288>)
 80010c4:	f023 0301 	bic.w	r3, r3, #1
 80010c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ca:	f7ff fb9b 	bl	8000804 <HAL_GetTick>
 80010ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010d0:	e00a      	b.n	80010e8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d2:	f7ff fb97 	bl	8000804 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d903      	bls.n	80010e8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e2c4      	b.n	800166e <HAL_RCC_OscConfig+0x812>
 80010e4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010e8:	4ba4      	ldr	r3, [pc, #656]	; (800137c <HAL_RCC_OscConfig+0x520>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1ee      	bne.n	80010d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0310 	and.w	r3, r3, #16
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80a9 	beq.w	8001254 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001102:	4b9e      	ldr	r3, [pc, #632]	; (800137c <HAL_RCC_OscConfig+0x520>)
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800110a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800110c:	4b9b      	ldr	r3, [pc, #620]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b08      	cmp	r3, #8
 8001116:	d007      	beq.n	8001128 <HAL_RCC_OscConfig+0x2cc>
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2b18      	cmp	r3, #24
 800111c:	d13a      	bne.n	8001194 <HAL_RCC_OscConfig+0x338>
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b01      	cmp	r3, #1
 8001126:	d135      	bne.n	8001194 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001128:	4b94      	ldr	r3, [pc, #592]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_OscConfig+0x2e4>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	2b80      	cmp	r3, #128	; 0x80
 800113a:	d001      	beq.n	8001140 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e296      	b.n	800166e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001140:	f7ff fb6c 	bl	800081c <HAL_GetREVID>
 8001144:	4603      	mov	r3, r0
 8001146:	f241 0203 	movw	r2, #4099	; 0x1003
 800114a:	4293      	cmp	r3, r2
 800114c:	d817      	bhi.n	800117e <HAL_RCC_OscConfig+0x322>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	2b20      	cmp	r3, #32
 8001154:	d108      	bne.n	8001168 <HAL_RCC_OscConfig+0x30c>
 8001156:	4b89      	ldr	r3, [pc, #548]	; (800137c <HAL_RCC_OscConfig+0x520>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800115e:	4a87      	ldr	r2, [pc, #540]	; (800137c <HAL_RCC_OscConfig+0x520>)
 8001160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001164:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001166:	e075      	b.n	8001254 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001168:	4b84      	ldr	r3, [pc, #528]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	069b      	lsls	r3, r3, #26
 8001176:	4981      	ldr	r1, [pc, #516]	; (800137c <HAL_RCC_OscConfig+0x520>)
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800117c:	e06a      	b.n	8001254 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800117e:	4b7f      	ldr	r3, [pc, #508]	; (800137c <HAL_RCC_OscConfig+0x520>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	061b      	lsls	r3, r3, #24
 800118c:	497b      	ldr	r1, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800118e:	4313      	orrs	r3, r2
 8001190:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001192:	e05f      	b.n	8001254 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d042      	beq.n	8001222 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800119c:	4b77      	ldr	r3, [pc, #476]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a76      	ldr	r2, [pc, #472]	; (800137c <HAL_RCC_OscConfig+0x520>)
 80011a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fb2c 	bl	8000804 <HAL_GetTick>
 80011ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80011b0:	f7ff fb28 	bl	8000804 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e255      	b.n	800166e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80011c2:	4b6e      	ldr	r3, [pc, #440]	; (800137c <HAL_RCC_OscConfig+0x520>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80011ce:	f7ff fb25 	bl	800081c <HAL_GetREVID>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80011d8:	4293      	cmp	r3, r2
 80011da:	d817      	bhi.n	800120c <HAL_RCC_OscConfig+0x3b0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	2b20      	cmp	r3, #32
 80011e2:	d108      	bne.n	80011f6 <HAL_RCC_OscConfig+0x39a>
 80011e4:	4b65      	ldr	r3, [pc, #404]	; (800137c <HAL_RCC_OscConfig+0x520>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80011ec:	4a63      	ldr	r2, [pc, #396]	; (800137c <HAL_RCC_OscConfig+0x520>)
 80011ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011f2:	6053      	str	r3, [r2, #4]
 80011f4:	e02e      	b.n	8001254 <HAL_RCC_OscConfig+0x3f8>
 80011f6:	4b61      	ldr	r3, [pc, #388]	; (800137c <HAL_RCC_OscConfig+0x520>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	069b      	lsls	r3, r3, #26
 8001204:	495d      	ldr	r1, [pc, #372]	; (800137c <HAL_RCC_OscConfig+0x520>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
 800120a:	e023      	b.n	8001254 <HAL_RCC_OscConfig+0x3f8>
 800120c:	4b5b      	ldr	r3, [pc, #364]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	061b      	lsls	r3, r3, #24
 800121a:	4958      	ldr	r1, [pc, #352]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800121c:	4313      	orrs	r3, r2
 800121e:	60cb      	str	r3, [r1, #12]
 8001220:	e018      	b.n	8001254 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001222:	4b56      	ldr	r3, [pc, #344]	; (800137c <HAL_RCC_OscConfig+0x520>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a55      	ldr	r2, [pc, #340]	; (800137c <HAL_RCC_OscConfig+0x520>)
 8001228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800122c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122e:	f7ff fae9 	bl	8000804 <HAL_GetTick>
 8001232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001236:	f7ff fae5 	bl	8000804 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e212      	b.n	800166e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f0      	bne.n	8001236 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d036      	beq.n	80012ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d019      	beq.n	800129c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001268:	4b44      	ldr	r3, [pc, #272]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800126a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800126c:	4a43      	ldr	r2, [pc, #268]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001274:	f7ff fac6 	bl	8000804 <HAL_GetTick>
 8001278:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fac2 	bl	8000804 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1ef      	b.n	800166e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_RCC_OscConfig+0x520>)
 8001290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x420>
 800129a:	e018      	b.n	80012ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129c:	4b37      	ldr	r3, [pc, #220]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800129e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a0:	4a36      	ldr	r2, [pc, #216]	; (800137c <HAL_RCC_OscConfig+0x520>)
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff faac 	bl	8000804 <HAL_GetTick>
 80012ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff faa8 	bl	8000804 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1d5      	b.n	800166e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012c2:	4b2e      	ldr	r3, [pc, #184]	; (800137c <HAL_RCC_OscConfig+0x520>)
 80012c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d036      	beq.n	8001348 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d019      	beq.n	8001316 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_RCC_OscConfig+0x520>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a25      	ldr	r2, [pc, #148]	; (800137c <HAL_RCC_OscConfig+0x520>)
 80012e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fa89 	bl	8000804 <HAL_GetTick>
 80012f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80012f6:	f7ff fa85 	bl	8000804 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e1b2      	b.n	800166e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x49a>
 8001314:	e018      	b.n	8001348 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_RCC_OscConfig+0x520>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800131c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001320:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001322:	f7ff fa6f 	bl	8000804 <HAL_GetTick>
 8001326:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800132a:	f7ff fa6b 	bl	8000804 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e198      	b.n	800166e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_RCC_OscConfig+0x520>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8085 	beq.w	8001460 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_RCC_OscConfig+0x524>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <HAL_RCC_OscConfig+0x524>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001360:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001362:	f7ff fa4f 	bl	8000804 <HAL_GetTick>
 8001366:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001368:	e00c      	b.n	8001384 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800136a:	f7ff fa4b 	bl	8000804 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b64      	cmp	r3, #100	; 0x64
 8001376:	d905      	bls.n	8001384 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e178      	b.n	800166e <HAL_RCC_OscConfig+0x812>
 800137c:	58024400 	.word	0x58024400
 8001380:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001384:	4b96      	ldr	r3, [pc, #600]	; (80015e0 <HAL_RCC_OscConfig+0x784>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ec      	beq.n	800136a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d106      	bne.n	80013a6 <HAL_RCC_OscConfig+0x54a>
 8001398:	4b92      	ldr	r3, [pc, #584]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 800139a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139c:	4a91      	ldr	r2, [pc, #580]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6713      	str	r3, [r2, #112]	; 0x70
 80013a4:	e02d      	b.n	8001402 <HAL_RCC_OscConfig+0x5a6>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x56c>
 80013ae:	4b8d      	ldr	r3, [pc, #564]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b2:	4a8c      	ldr	r2, [pc, #560]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ba:	4b8a      	ldr	r3, [pc, #552]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013be:	4a89      	ldr	r2, [pc, #548]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013c0:	f023 0304 	bic.w	r3, r3, #4
 80013c4:	6713      	str	r3, [r2, #112]	; 0x70
 80013c6:	e01c      	b.n	8001402 <HAL_RCC_OscConfig+0x5a6>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d10c      	bne.n	80013ea <HAL_RCC_OscConfig+0x58e>
 80013d0:	4b84      	ldr	r3, [pc, #528]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d4:	4a83      	ldr	r2, [pc, #524]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6713      	str	r3, [r2, #112]	; 0x70
 80013dc:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e0:	4a80      	ldr	r2, [pc, #512]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6713      	str	r3, [r2, #112]	; 0x70
 80013e8:	e00b      	b.n	8001402 <HAL_RCC_OscConfig+0x5a6>
 80013ea:	4b7e      	ldr	r3, [pc, #504]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ee:	4a7d      	ldr	r2, [pc, #500]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6713      	str	r3, [r2, #112]	; 0x70
 80013f6:	4b7b      	ldr	r3, [pc, #492]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	4a7a      	ldr	r2, [pc, #488]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80013fc:	f023 0304 	bic.w	r3, r3, #4
 8001400:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d015      	beq.n	8001436 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140a:	f7ff f9fb 	bl	8000804 <HAL_GetTick>
 800140e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001410:	e00a      	b.n	8001428 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001412:	f7ff f9f7 	bl	8000804 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001420:	4293      	cmp	r3, r2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e122      	b.n	800166e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001428:	4b6e      	ldr	r3, [pc, #440]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0ee      	beq.n	8001412 <HAL_RCC_OscConfig+0x5b6>
 8001434:	e014      	b.n	8001460 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001436:	f7ff f9e5 	bl	8000804 <HAL_GetTick>
 800143a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800143c:	e00a      	b.n	8001454 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143e:	f7ff f9e1 	bl	8000804 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	f241 3288 	movw	r2, #5000	; 0x1388
 800144c:	4293      	cmp	r3, r2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e10c      	b.n	800166e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001454:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1ee      	bne.n	800143e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8101 	beq.w	800166c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800146a:	4b5e      	ldr	r3, [pc, #376]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001472:	2b18      	cmp	r3, #24
 8001474:	f000 80bc 	beq.w	80015f0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	2b02      	cmp	r3, #2
 800147e:	f040 8095 	bne.w	80015ac <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001482:	4b58      	ldr	r3, [pc, #352]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a57      	ldr	r2, [pc, #348]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800148c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148e:	f7ff f9b9 	bl	8000804 <HAL_GetTick>
 8001492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff f9b5 	bl	8000804 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0e2      	b.n	800166e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014a8:	4b4e      	ldr	r3, [pc, #312]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1f0      	bne.n	8001496 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b4:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80014b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014b8:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <HAL_RCC_OscConfig+0x78c>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	430a      	orrs	r2, r1
 80014c8:	4946      	ldr	r1, [pc, #280]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	628b      	str	r3, [r1, #40]	; 0x28
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014dc:	3b01      	subs	r3, #1
 80014de:	025b      	lsls	r3, r3, #9
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e8:	3b01      	subs	r3, #1
 80014ea:	041b      	lsls	r3, r3, #16
 80014ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f6:	3b01      	subs	r3, #1
 80014f8:	061b      	lsls	r3, r3, #24
 80014fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80014fe:	4939      	ldr	r1, [pc, #228]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001500:	4313      	orrs	r3, r2
 8001502:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001504:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001508:	4a36      	ldr	r2, [pc, #216]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001510:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001514:	4b35      	ldr	r3, [pc, #212]	; (80015ec <HAL_RCC_OscConfig+0x790>)
 8001516:	4013      	ands	r3, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800151c:	00d2      	lsls	r2, r2, #3
 800151e:	4931      	ldr	r1, [pc, #196]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001520:	4313      	orrs	r3, r2
 8001522:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001524:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	f023 020c 	bic.w	r2, r3, #12
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	492c      	ldr	r1, [pc, #176]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001532:	4313      	orrs	r3, r2
 8001534:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001536:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	f023 0202 	bic.w	r2, r3, #2
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4928      	ldr	r1, [pc, #160]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001544:	4313      	orrs	r3, r2
 8001546:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001548:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 800154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154c:	4a25      	ldr	r2, [pc, #148]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 800154e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	4a22      	ldr	r2, [pc, #136]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 800155a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001566:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800156a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff f93e 	bl	8000804 <HAL_GetTick>
 8001588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff f93a 	bl	8000804 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e067      	b.n	800166e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x730>
 80015aa:	e05f      	b.n	800166c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ac:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80015b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff f924 	bl	8000804 <HAL_GetTick>
 80015bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff f920 	bl	8000804 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e04d      	b.n	800166e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <HAL_RCC_OscConfig+0x788>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x764>
 80015de:	e045      	b.n	800166c <HAL_RCC_OscConfig+0x810>
 80015e0:	58024800 	.word	0x58024800
 80015e4:	58024400 	.word	0x58024400
 80015e8:	fffffc0c 	.word	0xfffffc0c
 80015ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <HAL_RCC_OscConfig+0x81c>)
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_RCC_OscConfig+0x81c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	2b01      	cmp	r3, #1
 8001602:	d031      	beq.n	8001668 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f003 0203 	and.w	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800160e:	429a      	cmp	r2, r3
 8001610:	d12a      	bne.n	8001668 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d122      	bne.n	8001668 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d11a      	bne.n	8001668 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	0a5b      	lsrs	r3, r3, #9
 8001636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d111      	bne.n	8001668 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001650:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d108      	bne.n	8001668 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	0e1b      	lsrs	r3, r3, #24
 800165a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001662:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3730      	adds	r7, #48	; 0x30
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	58024400 	.word	0x58024400

0800167c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e19c      	b.n	80019ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b8a      	ldr	r3, [pc, #552]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d910      	bls.n	80016c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b87      	ldr	r3, [pc, #540]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 020f 	bic.w	r2, r3, #15
 80016a6:	4985      	ldr	r1, [pc, #532]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b83      	ldr	r3, [pc, #524]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e184      	b.n	80019ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d010      	beq.n	80016ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	4b7b      	ldr	r3, [pc, #492]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016d8:	429a      	cmp	r2, r3
 80016da:	d908      	bls.n	80016ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80016dc:	4b78      	ldr	r3, [pc, #480]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	4975      	ldr	r1, [pc, #468]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d010      	beq.n	800171c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	4b70      	ldr	r3, [pc, #448]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001706:	429a      	cmp	r2, r3
 8001708:	d908      	bls.n	800171c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800170a:	4b6d      	ldr	r3, [pc, #436]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	496a      	ldr	r1, [pc, #424]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 8001718:	4313      	orrs	r3, r2
 800171a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b00      	cmp	r3, #0
 8001726:	d010      	beq.n	800174a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699a      	ldr	r2, [r3, #24]
 800172c:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001734:	429a      	cmp	r2, r3
 8001736:	d908      	bls.n	800174a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001738:	4b61      	ldr	r3, [pc, #388]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	495e      	ldr	r1, [pc, #376]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 8001746:	4313      	orrs	r3, r2
 8001748:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b00      	cmp	r3, #0
 8001754:	d010      	beq.n	8001778 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69da      	ldr	r2, [r3, #28]
 800175a:	4b59      	ldr	r3, [pc, #356]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001762:	429a      	cmp	r2, r3
 8001764:	d908      	bls.n	8001778 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001766:	4b56      	ldr	r3, [pc, #344]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4953      	ldr	r1, [pc, #332]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 8001774:	4313      	orrs	r3, r2
 8001776:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d010      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	429a      	cmp	r2, r3
 8001792:	d908      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001794:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f023 020f 	bic.w	r2, r3, #15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4947      	ldr	r1, [pc, #284]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d055      	beq.n	800185e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80017b2:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4940      	ldr	r1, [pc, #256]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017cc:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d121      	bne.n	800181c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0f6      	b.n	80019ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017e4:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d115      	bne.n	800181c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0ea      	b.n	80019ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d107      	bne.n	800180c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d109      	bne.n	800181c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0de      	b.n	80019ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800180c:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0d6      	b.n	80019ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	f023 0207 	bic.w	r2, r3, #7
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4925      	ldr	r1, [pc, #148]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 800182a:	4313      	orrs	r3, r2
 800182c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182e:	f7fe ffe9 	bl	8000804 <HAL_GetTick>
 8001832:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001834:	e00a      	b.n	800184c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001836:	f7fe ffe5 	bl	8000804 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	f241 3288 	movw	r2, #5000	; 0x1388
 8001844:	4293      	cmp	r3, r2
 8001846:	d901      	bls.n	800184c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e0be      	b.n	80019ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	429a      	cmp	r2, r3
 800185c:	d1eb      	bne.n	8001836 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d010      	beq.n	800188c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	429a      	cmp	r2, r3
 8001878:	d208      	bcs.n	800188c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f023 020f 	bic.w	r2, r3, #15
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	490e      	ldr	r1, [pc, #56]	; (80018c0 <HAL_RCC_ClockConfig+0x244>)
 8001888:	4313      	orrs	r3, r2
 800188a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d214      	bcs.n	80018c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 020f 	bic.w	r2, r3, #15
 80018a2:	4906      	ldr	r1, [pc, #24]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b04      	ldr	r3, [pc, #16]	; (80018bc <HAL_RCC_ClockConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e086      	b.n	80019ca <HAL_RCC_ClockConfig+0x34e>
 80018bc:	52002000 	.word	0x52002000
 80018c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d010      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018dc:	429a      	cmp	r2, r3
 80018de:	d208      	bcs.n	80018f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018e0:	4b3c      	ldr	r3, [pc, #240]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4939      	ldr	r1, [pc, #228]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d010      	beq.n	8001920 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800190a:	429a      	cmp	r2, r3
 800190c:	d208      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	492e      	ldr	r1, [pc, #184]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 800191c:	4313      	orrs	r3, r2
 800191e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	2b00      	cmp	r3, #0
 800192a:	d010      	beq.n	800194e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699a      	ldr	r2, [r3, #24]
 8001930:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001938:	429a      	cmp	r2, r3
 800193a:	d208      	bcs.n	800194e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4922      	ldr	r1, [pc, #136]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 800194a:	4313      	orrs	r3, r2
 800194c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	2b00      	cmp	r3, #0
 8001958:	d010      	beq.n	800197c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001966:	429a      	cmp	r2, r3
 8001968:	d208      	bcs.n	800197c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4917      	ldr	r1, [pc, #92]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 8001978:	4313      	orrs	r3, r2
 800197a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800197c:	f000 f834 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	4912      	ldr	r1, [pc, #72]	; (80019d8 <HAL_RCC_ClockConfig+0x35c>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_RCC_ClockConfig+0x358>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <HAL_RCC_ClockConfig+0x35c>)
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_RCC_ClockConfig+0x360>)
 80019b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_RCC_ClockConfig+0x364>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_RCC_ClockConfig+0x368>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fed6 	bl	8000770 <HAL_InitTick>
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	58024400 	.word	0x58024400
 80019d8:	080022f4 	.word	0x080022f4
 80019dc:	24000004 	.word	0x24000004
 80019e0:	24000000 	.word	0x24000000
 80019e4:	24000008 	.word	0x24000008

080019e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ee:	4bb3      	ldr	r3, [pc, #716]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019f6:	2b18      	cmp	r3, #24
 80019f8:	f200 8155 	bhi.w	8001ca6 <HAL_RCC_GetSysClockFreq+0x2be>
 80019fc:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <HAL_RCC_GetSysClockFreq+0x1c>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001a69 	.word	0x08001a69
 8001a08:	08001ca7 	.word	0x08001ca7
 8001a0c:	08001ca7 	.word	0x08001ca7
 8001a10:	08001ca7 	.word	0x08001ca7
 8001a14:	08001ca7 	.word	0x08001ca7
 8001a18:	08001ca7 	.word	0x08001ca7
 8001a1c:	08001ca7 	.word	0x08001ca7
 8001a20:	08001ca7 	.word	0x08001ca7
 8001a24:	08001a8f 	.word	0x08001a8f
 8001a28:	08001ca7 	.word	0x08001ca7
 8001a2c:	08001ca7 	.word	0x08001ca7
 8001a30:	08001ca7 	.word	0x08001ca7
 8001a34:	08001ca7 	.word	0x08001ca7
 8001a38:	08001ca7 	.word	0x08001ca7
 8001a3c:	08001ca7 	.word	0x08001ca7
 8001a40:	08001ca7 	.word	0x08001ca7
 8001a44:	08001a95 	.word	0x08001a95
 8001a48:	08001ca7 	.word	0x08001ca7
 8001a4c:	08001ca7 	.word	0x08001ca7
 8001a50:	08001ca7 	.word	0x08001ca7
 8001a54:	08001ca7 	.word	0x08001ca7
 8001a58:	08001ca7 	.word	0x08001ca7
 8001a5c:	08001ca7 	.word	0x08001ca7
 8001a60:	08001ca7 	.word	0x08001ca7
 8001a64:	08001a9b 	.word	0x08001a9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a68:	4b94      	ldr	r3, [pc, #592]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d009      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a74:	4b91      	ldr	r3, [pc, #580]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	08db      	lsrs	r3, r3, #3
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	4a90      	ldr	r2, [pc, #576]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
 8001a84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001a86:	e111      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001a88:	4b8d      	ldr	r3, [pc, #564]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a8a:	61bb      	str	r3, [r7, #24]
    break;
 8001a8c:	e10e      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001a8e:	4b8d      	ldr	r3, [pc, #564]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001a90:	61bb      	str	r3, [r7, #24]
    break;
 8001a92:	e10b      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001a94:	4b8c      	ldr	r3, [pc, #560]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001a96:	61bb      	str	r3, [r7, #24]
    break;
 8001a98:	e108      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001a9a:	4b88      	ldr	r3, [pc, #544]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001aa4:	4b85      	ldr	r3, [pc, #532]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ab0:	4b82      	ldr	r3, [pc, #520]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001aba:	4b80      	ldr	r3, [pc, #512]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	08db      	lsrs	r3, r3, #3
 8001ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	fb02 f303 	mul.w	r3, r2, r3
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80e1 	beq.w	8001ca0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	f000 8083 	beq.w	8001bec <HAL_RCC_GetSysClockFreq+0x204>
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	f200 80a1 	bhi.w	8001c30 <HAL_RCC_GetSysClockFreq+0x248>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x114>
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d056      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001afa:	e099      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001afc:	4b6f      	ldr	r3, [pc, #444]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d02d      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001b08:	4b6c      	ldr	r3, [pc, #432]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	4a6b      	ldr	r2, [pc, #428]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b32:	4b62      	ldr	r3, [pc, #392]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b46:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001b62:	e087      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001cd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b76:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ba6:	e065      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bb2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001cd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bba:	4b40      	ldr	r3, [pc, #256]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001bea:	e043      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001cd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c2e:	e021      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001cd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c42:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001ccc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c72:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	0a5b      	lsrs	r3, r3, #9
 8001c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c7e:	3301      	adds	r3, #1
 8001c80:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c98:	ee17 3a90 	vmov	r3, s15
 8001c9c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001c9e:	e005      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
    break;
 8001ca4:	e002      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ca8:	61bb      	str	r3, [r7, #24]
    break;
 8001caa:	bf00      	nop
  }

  return sysclockfreq;
 8001cac:	69bb      	ldr	r3, [r7, #24]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	03d09000 	.word	0x03d09000
 8001cc4:	003d0900 	.word	0x003d0900
 8001cc8:	017d7840 	.word	0x017d7840
 8001ccc:	46000000 	.word	0x46000000
 8001cd0:	4c742400 	.word	0x4c742400
 8001cd4:	4a742400 	.word	0x4a742400
 8001cd8:	4bbebc20 	.word	0x4bbebc20

08001cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e049      	b.n	8001d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fbe6 	bl	80004d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3304      	adds	r3, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f000 f9fa 	bl	8002114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d001      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e04f      	b.n	8001e44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01d      	beq.n	8001e02 <HAL_TIM_Base_Start_IT+0x76>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dce:	d018      	beq.n	8001e02 <HAL_TIM_Base_Start_IT+0x76>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_TIM_Base_Start_IT+0x76>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1e      	ldr	r2, [pc, #120]	; (8001e58 <HAL_TIM_Base_Start_IT+0xcc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00e      	beq.n	8001e02 <HAL_TIM_Base_Start_IT+0x76>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <HAL_TIM_Base_Start_IT+0xd0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d009      	beq.n	8001e02 <HAL_TIM_Base_Start_IT+0x76>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_TIM_Base_Start_IT+0xd4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d004      	beq.n	8001e02 <HAL_TIM_Base_Start_IT+0x76>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d115      	bne.n	8001e2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b06      	cmp	r3, #6
 8001e12:	d015      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0xb4>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d011      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2c:	e008      	b.n	8001e40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e000      	b.n	8001e42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40000400 	.word	0x40000400
 8001e58:	40000800 	.word	0x40000800
 8001e5c:	40000c00 	.word	0x40000c00
 8001e60:	40010400 	.word	0x40010400
 8001e64:	40001800 	.word	0x40001800
 8001e68:	00010007 	.word	0x00010007

08001e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d122      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0202 	mvn.w	r2, #2
 8001e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f912 	bl	80020d8 <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f904 	bl	80020c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f915 	bl	80020ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d122      	bne.n	8001f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d11b      	bne.n	8001f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0204 	mvn.w	r2, #4
 8001eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8e8 	bl	80020d8 <HAL_TIM_IC_CaptureCallback>
 8001f08:	e005      	b.n	8001f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8da 	bl	80020c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f8eb 	bl	80020ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d122      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d11b      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0208 	mvn.w	r2, #8
 8001f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2204      	movs	r2, #4
 8001f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8be 	bl	80020d8 <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8b0 	bl	80020c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8c1 	bl	80020ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d122      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0210 	mvn.w	r2, #16
 8001f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2208      	movs	r2, #8
 8001f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f894 	bl	80020d8 <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f886 	bl	80020c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f897 	bl	80020ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d118      	bne.n	8002004 <HAL_TIM_IRQHandler+0x198>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d111      	bne.n	8002004 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0201 	mvn.w	r2, #1
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_SET);
 8001fea:	2201      	movs	r2, #1
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	4834      	ldr	r0, [pc, #208]	; (80020c0 <HAL_TIM_IRQHandler+0x254>)
 8001ff0:	f7fe fee0 	bl	8000db4 <HAL_GPIO_WritePin>
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7fe fa43 	bl	8000480 <HAL_TIM_PeriodElapsedCallback>
      HAL_GPIO_WritePin(EXECUTE_PIN_GPIO_Port, EXECUTE_PIN_Pin, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2140      	movs	r1, #64	; 0x40
 8001ffe:	4830      	ldr	r0, [pc, #192]	; (80020c0 <HAL_TIM_IRQHandler+0x254>)
 8002000:	f7fe fed8 	bl	8000db4 <HAL_GPIO_WritePin>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	2b80      	cmp	r3, #128	; 0x80
 8002010:	d10e      	bne.n	8002030 <HAL_TIM_IRQHandler+0x1c4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201c:	2b80      	cmp	r3, #128	; 0x80
 800201e:	d107      	bne.n	8002030 <HAL_TIM_IRQHandler+0x1c4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f916 	bl	800225c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203e:	d10e      	bne.n	800205e <HAL_TIM_IRQHandler+0x1f2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b80      	cmp	r3, #128	; 0x80
 800204c:	d107      	bne.n	800205e <HAL_TIM_IRQHandler+0x1f2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f909 	bl	8002270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d10e      	bne.n	800208a <HAL_TIM_IRQHandler+0x21e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d107      	bne.n	800208a <HAL_TIM_IRQHandler+0x21e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f83b 	bl	8002100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b20      	cmp	r3, #32
 8002096:	d10e      	bne.n	80020b6 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d107      	bne.n	80020b6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f06f 0220 	mvn.w	r2, #32
 80020ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f8c9 	bl	8002248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	58020800 	.word	0x58020800

080020c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a40      	ldr	r2, [pc, #256]	; (8002228 <TIM_Base_SetConfig+0x114>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d013      	beq.n	8002154 <TIM_Base_SetConfig+0x40>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002132:	d00f      	beq.n	8002154 <TIM_Base_SetConfig+0x40>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a3d      	ldr	r2, [pc, #244]	; (800222c <TIM_Base_SetConfig+0x118>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d00b      	beq.n	8002154 <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a3c      	ldr	r2, [pc, #240]	; (8002230 <TIM_Base_SetConfig+0x11c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3b      	ldr	r2, [pc, #236]	; (8002234 <TIM_Base_SetConfig+0x120>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3a      	ldr	r2, [pc, #232]	; (8002238 <TIM_Base_SetConfig+0x124>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d108      	bne.n	8002166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <TIM_Base_SetConfig+0x114>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <TIM_Base_SetConfig+0x9a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002174:	d01b      	beq.n	80021ae <TIM_Base_SetConfig+0x9a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2c      	ldr	r2, [pc, #176]	; (800222c <TIM_Base_SetConfig+0x118>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d017      	beq.n	80021ae <TIM_Base_SetConfig+0x9a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <TIM_Base_SetConfig+0x11c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <TIM_Base_SetConfig+0x9a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <TIM_Base_SetConfig+0x120>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00f      	beq.n	80021ae <TIM_Base_SetConfig+0x9a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a29      	ldr	r2, [pc, #164]	; (8002238 <TIM_Base_SetConfig+0x124>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00b      	beq.n	80021ae <TIM_Base_SetConfig+0x9a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a28      	ldr	r2, [pc, #160]	; (800223c <TIM_Base_SetConfig+0x128>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <TIM_Base_SetConfig+0x9a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a27      	ldr	r2, [pc, #156]	; (8002240 <TIM_Base_SetConfig+0x12c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d003      	beq.n	80021ae <TIM_Base_SetConfig+0x9a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a26      	ldr	r2, [pc, #152]	; (8002244 <TIM_Base_SetConfig+0x130>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d108      	bne.n	80021c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a10      	ldr	r2, [pc, #64]	; (8002228 <TIM_Base_SetConfig+0x114>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00f      	beq.n	800220c <TIM_Base_SetConfig+0xf8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <TIM_Base_SetConfig+0x124>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00b      	beq.n	800220c <TIM_Base_SetConfig+0xf8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a11      	ldr	r2, [pc, #68]	; (800223c <TIM_Base_SetConfig+0x128>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d007      	beq.n	800220c <TIM_Base_SetConfig+0xf8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a10      	ldr	r2, [pc, #64]	; (8002240 <TIM_Base_SetConfig+0x12c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d003      	beq.n	800220c <TIM_Base_SetConfig+0xf8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <TIM_Base_SetConfig+0x130>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d103      	bne.n	8002214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	615a      	str	r2, [r3, #20]
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40010000 	.word	0x40010000
 800222c:	40000400 	.word	0x40000400
 8002230:	40000800 	.word	0x40000800
 8002234:	40000c00 	.word	0x40000c00
 8002238:	40010400 	.word	0x40010400
 800223c:	40014000 	.word	0x40014000
 8002240:	40014400 	.word	0x40014400
 8002244:	40014800 	.word	0x40014800

08002248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <__libc_init_array>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	4d0d      	ldr	r5, [pc, #52]	; (80022bc <__libc_init_array+0x38>)
 8002288:	4c0d      	ldr	r4, [pc, #52]	; (80022c0 <__libc_init_array+0x3c>)
 800228a:	1b64      	subs	r4, r4, r5
 800228c:	10a4      	asrs	r4, r4, #2
 800228e:	2600      	movs	r6, #0
 8002290:	42a6      	cmp	r6, r4
 8002292:	d109      	bne.n	80022a8 <__libc_init_array+0x24>
 8002294:	4d0b      	ldr	r5, [pc, #44]	; (80022c4 <__libc_init_array+0x40>)
 8002296:	4c0c      	ldr	r4, [pc, #48]	; (80022c8 <__libc_init_array+0x44>)
 8002298:	f000 f820 	bl	80022dc <_init>
 800229c:	1b64      	subs	r4, r4, r5
 800229e:	10a4      	asrs	r4, r4, #2
 80022a0:	2600      	movs	r6, #0
 80022a2:	42a6      	cmp	r6, r4
 80022a4:	d105      	bne.n	80022b2 <__libc_init_array+0x2e>
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
 80022a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ac:	4798      	blx	r3
 80022ae:	3601      	adds	r6, #1
 80022b0:	e7ee      	b.n	8002290 <__libc_init_array+0xc>
 80022b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b6:	4798      	blx	r3
 80022b8:	3601      	adds	r6, #1
 80022ba:	e7f2      	b.n	80022a2 <__libc_init_array+0x1e>
 80022bc:	08002304 	.word	0x08002304
 80022c0:	08002304 	.word	0x08002304
 80022c4:	08002304 	.word	0x08002304
 80022c8:	08002308 	.word	0x08002308

080022cc <memset>:
 80022cc:	4402      	add	r2, r0
 80022ce:	4603      	mov	r3, r0
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d100      	bne.n	80022d6 <memset+0xa>
 80022d4:	4770      	bx	lr
 80022d6:	f803 1b01 	strb.w	r1, [r3], #1
 80022da:	e7f9      	b.n	80022d0 <memset+0x4>

080022dc <_init>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	bf00      	nop
 80022e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e2:	bc08      	pop	{r3}
 80022e4:	469e      	mov	lr, r3
 80022e6:	4770      	bx	lr

080022e8 <_fini>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	bf00      	nop
 80022ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ee:	bc08      	pop	{r3}
 80022f0:	469e      	mov	lr, r3
 80022f2:	4770      	bx	lr
