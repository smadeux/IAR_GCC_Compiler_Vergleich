ARM GAS  C:\Users\MadeuxS\AppData\Local\Temp\ccho3tVC.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 23, 1
   4              		.eabi_attribute 24, 1
   5              		.eabi_attribute 25, 1
   6              		.eabi_attribute 26, 1
   7              		.eabi_attribute 30, 2
   8              		.eabi_attribute 34, 1
   9              		.eabi_attribute 18, 4
  10              		.file	"sysmem.c"
  11              		.text
  12              	.Ltext0:
  13              		.cfi_sections	.debug_frame
  14              		.section	.text._sbrk,"ax",%progbits
  15              		.align	1
  16              		.p2align 2,,3
  17              		.global	_sbrk
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	_sbrk:
  25              	.LVL0:
  26              	.LFB0:
  27              		.file 1 "Core/Src/sysmem.c"
   1:Core/Src/sysmem.c **** /**
   2:Core/Src/sysmem.c ****  ******************************************************************************
   3:Core/Src/sysmem.c ****  * @file      sysmem.c
   4:Core/Src/sysmem.c ****  * @author    Generated by STM32CubeIDE
   5:Core/Src/sysmem.c ****  * @brief     STM32CubeIDE System Memory calls file
   6:Core/Src/sysmem.c ****  *
   7:Core/Src/sysmem.c ****  *            For more information about which C functions
   8:Core/Src/sysmem.c ****  *            need which of these lowlevel functions
   9:Core/Src/sysmem.c ****  *            please consult the newlib libc manual
  10:Core/Src/sysmem.c ****  ******************************************************************************
  11:Core/Src/sysmem.c ****  * @attention
  12:Core/Src/sysmem.c ****  *
  13:Core/Src/sysmem.c ****  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  14:Core/Src/sysmem.c ****  * All rights reserved.</center></h2>
  15:Core/Src/sysmem.c ****  *
  16:Core/Src/sysmem.c ****  * This software component is licensed by ST under BSD 3-Clause license,
  17:Core/Src/sysmem.c ****  * the "License"; You may not use this file except in compliance with the
  18:Core/Src/sysmem.c ****  * License. You may obtain a copy of the License at:
  19:Core/Src/sysmem.c ****  *                        opensource.org/licenses/BSD-3-Clause
  20:Core/Src/sysmem.c ****  *
  21:Core/Src/sysmem.c ****  ******************************************************************************
  22:Core/Src/sysmem.c ****  */
  23:Core/Src/sysmem.c **** 
  24:Core/Src/sysmem.c **** /* Includes */
  25:Core/Src/sysmem.c **** #include <errno.h>
  26:Core/Src/sysmem.c **** #include <stdint.h>
  27:Core/Src/sysmem.c **** 
  28:Core/Src/sysmem.c **** /**
  29:Core/Src/sysmem.c ****  * Pointer to the current high watermark of the heap usage
  30:Core/Src/sysmem.c ****  */
  31:Core/Src/sysmem.c **** static uint8_t *__sbrk_heap_end = NULL;
ARM GAS  C:\Users\MadeuxS\AppData\Local\Temp\ccho3tVC.s 			page 2


  32:Core/Src/sysmem.c **** 
  33:Core/Src/sysmem.c **** /**
  34:Core/Src/sysmem.c ****  * @brief _sbrk() allocates memory to the newlib heap and is used by malloc
  35:Core/Src/sysmem.c ****  *        and others from the C library
  36:Core/Src/sysmem.c ****  *
  37:Core/Src/sysmem.c ****  * @verbatim
  38:Core/Src/sysmem.c ****  * ############################################################################
  39:Core/Src/sysmem.c ****  * #  .data  #  .bss  #       newlib heap       #          MSP stack          #
  40:Core/Src/sysmem.c ****  * #         #        #                         # Reserved by _Min_Stack_Size #
  41:Core/Src/sysmem.c ****  * ############################################################################
  42:Core/Src/sysmem.c ****  * ^-- RAM start      ^-- _end                             _estack, RAM end --^
  43:Core/Src/sysmem.c ****  * @endverbatim
  44:Core/Src/sysmem.c ****  *
  45:Core/Src/sysmem.c ****  * This implementation starts allocating at the '_end' linker symbol
  46:Core/Src/sysmem.c ****  * The '_Min_Stack_Size' linker symbol reserves a memory for the MSP stack
  47:Core/Src/sysmem.c ****  * The implementation considers '_estack' linker symbol to be RAM end
  48:Core/Src/sysmem.c ****  * NOTE: If the MSP stack, at any point during execution, grows larger than the
  49:Core/Src/sysmem.c ****  * reserved size, please increase the '_Min_Stack_Size'.
  50:Core/Src/sysmem.c ****  *
  51:Core/Src/sysmem.c ****  * @param incr Memory size
  52:Core/Src/sysmem.c ****  * @return Pointer to allocated memory
  53:Core/Src/sysmem.c ****  */
  54:Core/Src/sysmem.c **** void *_sbrk(ptrdiff_t incr)
  55:Core/Src/sysmem.c **** {
  28              		.loc 1 55 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  56:Core/Src/sysmem.c ****   extern uint8_t _end; /* Symbol defined in the linker script */
  32              		.loc 1 56 3 view .LVU1
  57:Core/Src/sysmem.c ****   extern uint8_t _estack; /* Symbol defined in the linker script */
  33              		.loc 1 57 3 view .LVU2
  58:Core/Src/sysmem.c ****   extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  34              		.loc 1 58 3 view .LVU3
  59:Core/Src/sysmem.c ****   const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  35              		.loc 1 59 3 view .LVU4
  60:Core/Src/sysmem.c ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
  36              		.loc 1 60 3 view .LVU5
  55:Core/Src/sysmem.c ****   extern uint8_t _end; /* Symbol defined in the linker script */
  37              		.loc 1 55 1 is_stmt 0 view .LVU6
  38 0000 38B5     		push	{r3, r4, r5, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 16
  41              		.cfi_offset 3, -16
  42              		.cfi_offset 4, -12
  43              		.cfi_offset 5, -8
  44              		.cfi_offset 14, -4
  61:Core/Src/sysmem.c ****   uint8_t *prev_heap_end;
  62:Core/Src/sysmem.c **** 
  63:Core/Src/sysmem.c ****   /* Initialize heap end at first call */
  64:Core/Src/sysmem.c ****   if (NULL == __sbrk_heap_end)
  45              		.loc 1 64 12 view .LVU7
  46 0002 0D4C     		ldr	r4, .L9
  55:Core/Src/sysmem.c ****   extern uint8_t _end; /* Symbol defined in the linker script */
  47              		.loc 1 55 1 view .LVU8
  48 0004 0346     		mov	r3, r0
  59:Core/Src/sysmem.c ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
ARM GAS  C:\Users\MadeuxS\AppData\Local\Temp\ccho3tVC.s 			page 3


  49              		.loc 1 59 18 view .LVU9
  50 0006 0D49     		ldr	r1, .L9+4
  51 0008 0D4D     		ldr	r5, .L9+8
  52              		.loc 1 64 12 view .LVU10
  53 000a 2268     		ldr	r2, [r4]
  59:Core/Src/sysmem.c ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
  54              		.loc 1 59 18 view .LVU11
  55 000c 491B     		subs	r1, r1, r5
  56              	.LVL1:
  61:Core/Src/sysmem.c ****   uint8_t *prev_heap_end;
  57              		.loc 1 61 3 is_stmt 1 view .LVU12
  58              		.loc 1 64 3 view .LVU13
  59              		.loc 1 64 6 is_stmt 0 view .LVU14
  60 000e 2AB1     		cbz	r2, .L7
  65:Core/Src/sysmem.c ****   {
  66:Core/Src/sysmem.c ****     __sbrk_heap_end = &_end;
  67:Core/Src/sysmem.c ****   }
  68:Core/Src/sysmem.c **** 
  69:Core/Src/sysmem.c ****   /* Protect heap from growing into the reserved MSP stack */
  70:Core/Src/sysmem.c ****   if (__sbrk_heap_end + incr > max_heap)
  61              		.loc 1 70 3 is_stmt 1 view .LVU15
  62              		.loc 1 70 23 is_stmt 0 view .LVU16
  63 0010 1344     		add	r3, r3, r2
  64              		.loc 1 70 6 view .LVU17
  65 0012 8B42     		cmp	r3, r1
  66 0014 08D8     		bhi	.L8
  67              	.LVL2:
  68              	.L3:
  71:Core/Src/sysmem.c ****   {
  72:Core/Src/sysmem.c ****     errno = ENOMEM;
  73:Core/Src/sysmem.c ****     return (void *)-1;
  74:Core/Src/sysmem.c ****   }
  75:Core/Src/sysmem.c **** 
  76:Core/Src/sysmem.c ****   prev_heap_end = __sbrk_heap_end;
  69              		.loc 1 76 3 is_stmt 1 view .LVU18
  77:Core/Src/sysmem.c ****   __sbrk_heap_end += incr;
  70              		.loc 1 77 3 view .LVU19
  78:Core/Src/sysmem.c **** 
  79:Core/Src/sysmem.c ****   return (void *)prev_heap_end;
  80:Core/Src/sysmem.c **** }
  71              		.loc 1 80 1 is_stmt 0 view .LVU20
  72 0016 1046     		mov	r0, r2
  77:Core/Src/sysmem.c ****   __sbrk_heap_end += incr;
  73              		.loc 1 77 19 view .LVU21
  74 0018 2360     		str	r3, [r4]
  75              	.LVL3:
  79:Core/Src/sysmem.c **** }
  76              		.loc 1 79 3 is_stmt 1 view .LVU22
  77              		.loc 1 80 1 is_stmt 0 view .LVU23
  78 001a 38BD     		pop	{r3, r4, r5, pc}
  79              	.LVL4:
  80              	.L7:
  66:Core/Src/sysmem.c ****   }
  81              		.loc 1 66 5 is_stmt 1 view .LVU24
  66:Core/Src/sysmem.c ****   }
  82              		.loc 1 66 21 is_stmt 0 view .LVU25
  83 001c 0948     		ldr	r0, .L9+12
ARM GAS  C:\Users\MadeuxS\AppData\Local\Temp\ccho3tVC.s 			page 4


  84              	.LVL5:
  66:Core/Src/sysmem.c ****   }
  85              		.loc 1 66 21 view .LVU26
  86 001e 0246     		mov	r2, r0
  87 0020 2060     		str	r0, [r4]
  70:Core/Src/sysmem.c ****   {
  88              		.loc 1 70 3 is_stmt 1 view .LVU27
  70:Core/Src/sysmem.c ****   {
  89              		.loc 1 70 23 is_stmt 0 view .LVU28
  90 0022 1344     		add	r3, r3, r2
  91              	.LVL6:
  70:Core/Src/sysmem.c ****   {
  92              		.loc 1 70 6 view .LVU29
  93 0024 8B42     		cmp	r3, r1
  94 0026 F6D9     		bls	.L3
  95              	.L8:
  72:Core/Src/sysmem.c ****     return (void *)-1;
  96              		.loc 1 72 5 is_stmt 1 view .LVU30
  97 0028 FFF7FEFF 		bl	__errno
  98              	.LVL7:
  72:Core/Src/sysmem.c ****     return (void *)-1;
  99              		.loc 1 72 11 is_stmt 0 view .LVU31
 100 002c 0C23     		movs	r3, #12
  73:Core/Src/sysmem.c ****   }
 101              		.loc 1 73 12 view .LVU32
 102 002e 4FF0FF32 		mov	r2, #-1
  72:Core/Src/sysmem.c ****     return (void *)-1;
 103              		.loc 1 72 11 view .LVU33
 104 0032 0360     		str	r3, [r0]
  73:Core/Src/sysmem.c ****   }
 105              		.loc 1 73 5 is_stmt 1 view .LVU34
 106              		.loc 1 80 1 is_stmt 0 view .LVU35
 107 0034 1046     		mov	r0, r2
 108 0036 38BD     		pop	{r3, r4, r5, pc}
 109              	.L10:
 110              		.align	2
 111              	.L9:
 112 0038 00000000 		.word	.LANCHOR0
 113 003c 00000000 		.word	_estack
 114 0040 00000000 		.word	_Min_Stack_Size
 115 0044 00000000 		.word	_end
 116              		.cfi_endproc
 117              	.LFE0:
 119              		.section	.bss.__sbrk_heap_end,"aw",%nobits
 120              		.align	2
 121              		.set	.LANCHOR0,. + 0
 124              	__sbrk_heap_end:
 125 0000 00000000 		.space	4
 126              		.text
 127              	.Letext0:
 128              		.file 2 "c:\\dev\\tools\\gcc-arm-none-eabi-10.3-2021.07\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\
 129              		.file 3 "c:\\dev\\tools\\gcc-arm-none-eabi-10.3-2021.07\\arm-none-eabi\\include\\machine\\_default
 130              		.file 4 "c:\\dev\\tools\\gcc-arm-none-eabi-10.3-2021.07\\arm-none-eabi\\include\\sys\\_stdint.h"
 131              		.file 5 "c:\\dev\\tools\\gcc-arm-none-eabi-10.3-2021.07\\arm-none-eabi\\include\\sys\\errno.h"
ARM GAS  C:\Users\MadeuxS\AppData\Local\Temp\ccho3tVC.s 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 sysmem.c
C:\Users\MadeuxS\AppData\Local\Temp\ccho3tVC.s:15     .text._sbrk:00000000 $t
C:\Users\MadeuxS\AppData\Local\Temp\ccho3tVC.s:24     .text._sbrk:00000000 _sbrk
C:\Users\MadeuxS\AppData\Local\Temp\ccho3tVC.s:112    .text._sbrk:00000038 $d
C:\Users\MadeuxS\AppData\Local\Temp\ccho3tVC.s:120    .bss.__sbrk_heap_end:00000000 $d
C:\Users\MadeuxS\AppData\Local\Temp\ccho3tVC.s:124    .bss.__sbrk_heap_end:00000000 __sbrk_heap_end

UNDEFINED SYMBOLS
__errno
_estack
_Min_Stack_Size
_end
